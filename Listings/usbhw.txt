; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\objects\usbhw.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\usbhw.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\RTE\_Target_1 -IC:\Users\ECBME\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\ECBME\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.6.0\Device\Include -D__UVISION_VERSION=531 -D_RTE_ -DLPC175x_6x -D_RTE_ --omf_browse=.\objects\usbhw.crf usbhw.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  EPAdr PROC
;;;66     
;;;67     uint32_t EPAdr (uint32_t EPNum) {
000000  4601              MOV      r1,r0
;;;68       uint32_t val;
;;;69     
;;;70       val = (EPNum & 0x0F) << 1;
000002  070a              LSLS     r2,r1,#28
000004  0ed0              LSRS     r0,r2,#27
;;;71       if (EPNum & 0x80) {
000006  f0010280          AND      r2,r1,#0x80
00000a  b102              CBZ      r2,|L1.14|
;;;72         val += 1;
00000c  1c40              ADDS     r0,r0,#1
                  |L1.14|
;;;73       }
;;;74       return (val);
;;;75     }
00000e  4770              BX       lr
;;;76     
                          ENDP

                  WrCmd PROC
;;;83     
;;;84     void WrCmd (uint32_t cmd) {
000010  2110              MOVS     r1,#0x10
;;;85     
;;;86       LPC_USB->DevIntClr = CCEMTY_INT;
000012  4afe              LDR      r2,|L1.1036|
000014  6011              STR      r1,[r2,#0]
;;;87       LPC_USB->CmdCode = cmd;
000016  49fe              LDR      r1,|L1.1040|
000018  f8c10210          STR      r0,[r1,#0x210]
;;;88       while ((LPC_USB->DevIntSt & CCEMTY_INT) == 0);
00001c  bf00              NOP      
                  |L1.30|
00001e  49fb              LDR      r1,|L1.1036|
000020  3908              SUBS     r1,r1,#8
000022  6809              LDR      r1,[r1,#0]
000024  f0010110          AND      r1,r1,#0x10
000028  2900              CMP      r1,#0
00002a  d0f8              BEQ      |L1.30|
;;;89     }
00002c  4770              BX       lr
;;;90     
                          ENDP

                  WrCmdDat PROC
;;;98     
;;;99     void WrCmdDat (uint32_t cmd, uint32_t val) {
00002e  2210              MOVS     r2,#0x10
;;;100    
;;;101      LPC_USB->DevIntClr = CCEMTY_INT;
000030  4bf6              LDR      r3,|L1.1036|
000032  601a              STR      r2,[r3,#0]
;;;102      LPC_USB->CmdCode = cmd;
000034  4af6              LDR      r2,|L1.1040|
000036  f8c20210          STR      r0,[r2,#0x210]
;;;103      while ((LPC_USB->DevIntSt & CCEMTY_INT) == 0);
00003a  bf00              NOP      
                  |L1.60|
00003c  4af3              LDR      r2,|L1.1036|
00003e  3a08              SUBS     r2,r2,#8
000040  6812              LDR      r2,[r2,#0]
000042  f0020210          AND      r2,r2,#0x10
000046  2a00              CMP      r2,#0
000048  d0f8              BEQ      |L1.60|
;;;104      LPC_USB->DevIntClr = CCEMTY_INT;
00004a  2210              MOVS     r2,#0x10
00004c  4bef              LDR      r3,|L1.1036|
00004e  601a              STR      r2,[r3,#0]
;;;105      LPC_USB->CmdCode = val;
000050  4aef              LDR      r2,|L1.1040|
000052  f8c21210          STR      r1,[r2,#0x210]
;;;106      while ((LPC_USB->DevIntSt & CCEMTY_INT) == 0);
000056  bf00              NOP      
                  |L1.88|
000058  4aec              LDR      r2,|L1.1036|
00005a  3a08              SUBS     r2,r2,#8
00005c  6812              LDR      r2,[r2,#0]
00005e  f0020210          AND      r2,r2,#0x10
000062  2a00              CMP      r2,#0
000064  d0f8              BEQ      |L1.88|
;;;107    }
000066  4770              BX       lr
;;;108    
                          ENDP

                  WrCmdEP PROC
;;;116    
;;;117    void WrCmdEP (uint32_t EPNum, uint32_t cmd){
000068  b510              PUSH     {r4,lr}
00006a  4604              MOV      r4,r0
00006c  460b              MOV      r3,r1
;;;118    
;;;119      LPC_USB->DevIntClr = CCEMTY_INT;
00006e  2010              MOVS     r0,#0x10
000070  49e6              LDR      r1,|L1.1036|
000072  6008              STR      r0,[r1,#0]
;;;120      LPC_USB->CmdCode = CMD_SEL_EP(EPAdr(EPNum));
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       EPAdr
00007a  f44f61a0          MOV      r1,#0x500
00007e  ea414000          ORR      r0,r1,r0,LSL #16
000082  49e3              LDR      r1,|L1.1040|
000084  f8c10210          STR      r0,[r1,#0x210]
;;;121      while ((LPC_USB->DevIntSt & CCEMTY_INT) == 0);
000088  bf00              NOP      
                  |L1.138|
00008a  48e0              LDR      r0,|L1.1036|
00008c  3808              SUBS     r0,r0,#8
00008e  6800              LDR      r0,[r0,#0]
000090  f0000010          AND      r0,r0,#0x10
000094  2800              CMP      r0,#0
000096  d0f8              BEQ      |L1.138|
;;;122      LPC_USB->DevIntClr = CCEMTY_INT;
000098  2010              MOVS     r0,#0x10
00009a  49dc              LDR      r1,|L1.1036|
00009c  6008              STR      r0,[r1,#0]
;;;123      LPC_USB->CmdCode = cmd;
00009e  48dc              LDR      r0,|L1.1040|
0000a0  f8c03210          STR      r3,[r0,#0x210]
;;;124      while ((LPC_USB->DevIntSt & CCEMTY_INT) == 0);
0000a4  bf00              NOP      
                  |L1.166|
0000a6  48d9              LDR      r0,|L1.1036|
0000a8  3808              SUBS     r0,r0,#8
0000aa  6800              LDR      r0,[r0,#0]
0000ac  f0000010          AND      r0,r0,#0x10
0000b0  2800              CMP      r0,#0
0000b2  d0f8              BEQ      |L1.166|
;;;125    }
0000b4  bd10              POP      {r4,pc}
;;;126    
                          ENDP

                  RdCmdDat PROC
;;;133    
;;;134    uint32_t RdCmdDat (uint32_t cmd) {
0000b6  4601              MOV      r1,r0
;;;135    
;;;136      LPC_USB->DevIntClr = CCEMTY_INT | CDFULL_INT;
0000b8  2030              MOVS     r0,#0x30
0000ba  4ad4              LDR      r2,|L1.1036|
0000bc  6010              STR      r0,[r2,#0]
;;;137      LPC_USB->CmdCode = cmd;
0000be  48d4              LDR      r0,|L1.1040|
0000c0  f8c01210          STR      r1,[r0,#0x210]
;;;138      while ((LPC_USB->DevIntSt & CDFULL_INT) == 0);
0000c4  bf00              NOP      
                  |L1.198|
0000c6  48d1              LDR      r0,|L1.1036|
0000c8  3808              SUBS     r0,r0,#8
0000ca  6800              LDR      r0,[r0,#0]
0000cc  f0000020          AND      r0,r0,#0x20
0000d0  2800              CMP      r0,#0
0000d2  d0f8              BEQ      |L1.198|
;;;139      return (LPC_USB->CmdData);
0000d4  48cd              LDR      r0,|L1.1036|
0000d6  300c              ADDS     r0,r0,#0xc
0000d8  6800              LDR      r0,[r0,#0]
;;;140    }
0000da  4770              BX       lr
;;;141    
                          ENDP

                  USB_SetAddress PROC
;;;279    
;;;280    void USB_SetAddress (uint32_t adr) {
0000dc  b510              PUSH     {r4,lr}
0000de  4604              MOV      r4,r0
;;;281      WrCmdDat(CMD_SET_ADDR, DAT_WR_BYTE(DEV_EN | adr)); /* Don't wait for next */
0000e0  f0440080          ORR      r0,r4,#0x80
0000e4  f44f7280          MOV      r2,#0x100
0000e8  ea424100          ORR      r1,r2,r0,LSL #16
0000ec  48c9              LDR      r0,|L1.1044|
0000ee  f7fffffe          BL       WrCmdDat
;;;282      WrCmdDat(CMD_SET_ADDR, DAT_WR_BYTE(DEV_EN | adr)); /*  Setup Status Phase */
0000f2  f0440080          ORR      r0,r4,#0x80
0000f6  f44f7280          MOV      r2,#0x100
0000fa  ea424100          ORR      r1,r2,r0,LSL #16
0000fe  48c5              LDR      r0,|L1.1044|
000100  f7fffffe          BL       WrCmdDat
;;;283    }
000104  bd10              POP      {r4,pc}
;;;284    
                          ENDP

                  USB_Reset PROC
;;;189    
;;;190    void USB_Reset (void) {
000106  2100              MOVS     r1,#0
;;;191    #if USB_DMA
;;;192      uint32_t n;
;;;193    #endif
;;;194    
;;;195      LPC_USB->EpInd = 0;
000108  4ac0              LDR      r2,|L1.1036|
00010a  3240              ADDS     r2,r2,#0x40
00010c  6011              STR      r1,[r2,#0]
;;;196      LPC_USB->MaxPSize = USB_MAX_PACKET0;
00010e  2140              MOVS     r1,#0x40
000110  4abf              LDR      r2,|L1.1040|
000112  f8c2124c          STR      r1,[r2,#0x24c]
;;;197      LPC_USB->EpInd = 1;
000116  2101              MOVS     r1,#1
000118  4abc              LDR      r2,|L1.1036|
00011a  3240              ADDS     r2,r2,#0x40
00011c  6011              STR      r1,[r2,#0]
;;;198      LPC_USB->MaxPSize = USB_MAX_PACKET0;
00011e  2140              MOVS     r1,#0x40
000120  4abb              LDR      r2,|L1.1040|
000122  f8c2124c          STR      r1,[r2,#0x24c]
;;;199      while ((LPC_USB->DevIntSt & EP_RLZED_INT) == 0);
000126  bf00              NOP      
                  |L1.296|
000128  49b8              LDR      r1,|L1.1036|
00012a  3908              SUBS     r1,r1,#8
00012c  6809              LDR      r1,[r1,#0]
00012e  f4017180          AND      r1,r1,#0x100
000132  2900              CMP      r1,#0
000134  d0f8              BEQ      |L1.296|
;;;200    
;;;201      LPC_USB->EpIntClr  = 0xFFFFFFFF;
000136  f04f31ff          MOV      r1,#0xffffffff
00013a  4ab4              LDR      r2,|L1.1036|
00013c  3230              ADDS     r2,r2,#0x30
00013e  6011              STR      r1,[r2,#0]
;;;202      LPC_USB->EpIntEn   = 0xFFFFFFFF ^ USB_DMA_EP;
000140  f06f0140          MVN      r1,#0x40
000144  4ab2              LDR      r2,|L1.1040|
000146  f8c21234          STR      r1,[r2,#0x234]
;;;203      LPC_USB->DevIntClr = 0xFFFFFFFF;
00014a  11c9              ASRS     r1,r1,#7
00014c  4aaf              LDR      r2,|L1.1036|
00014e  6011              STR      r1,[r2,#0]
;;;204      LPC_USB->DevIntEn  = DEV_STAT_INT    | EP_SLOW_INT    |
000150  210d              MOVS     r1,#0xd
000152  1f12              SUBS     r2,r2,#4
000154  6011              STR      r1,[r2,#0]
;;;205                   (USB_SOF_EVENT   ? FRAME_INT : 0) |
;;;206                   (USB_ERROR_EVENT ? ERR_INT   : 0);
;;;207    
;;;208    #if USB_DMA
;;;209      LPC_USB->UDCAH   = USB_RAM_ADR;
000156  49b0              LDR      r1,|L1.1048|
000158  4aac              LDR      r2,|L1.1036|
00015a  3278              ADDS     r2,r2,#0x78
00015c  6011              STR      r1,[r2,#0]
;;;210      LPC_USB->DMARClr = 0xFFFFFFFF;
00015e  f04f31ff          MOV      r1,#0xffffffff
000162  4aaa              LDR      r2,|L1.1036|
000164  324c              ADDS     r2,r2,#0x4c
000166  6011              STR      r1,[r2,#0]
;;;211      LPC_USB->EpDMADis  = 0xFFFFFFFF;
000168  4aa8              LDR      r2,|L1.1036|
00016a  3284              ADDS     r2,r2,#0x84
00016c  6011              STR      r1,[r2,#0]
;;;212      LPC_USB->EpDMAEn   = USB_DMA_EP;
00016e  2140              MOVS     r1,#0x40
000170  1f12              SUBS     r2,r2,#4
000172  6011              STR      r1,[r2,#0]
;;;213      LPC_USB->EoTIntClr = 0xFFFFFFFF;
000174  f04f31ff          MOV      r1,#0xffffffff
000178  4aa4              LDR      r2,|L1.1036|
00017a  329c              ADDS     r2,r2,#0x9c
00017c  6011              STR      r1,[r2,#0]
;;;214      LPC_USB->NDDRIntClr = 0xFFFFFFFF;
00017e  4aa3              LDR      r2,|L1.1036|
000180  32a8              ADDS     r2,r2,#0xa8
000182  6011              STR      r1,[r2,#0]
;;;215      LPC_USB->SysErrIntClr = 0xFFFFFFFF;
000184  4aa1              LDR      r2,|L1.1036|
000186  32b4              ADDS     r2,r2,#0xb4
000188  6011              STR      r1,[r2,#0]
;;;216      LPC_USB->DMAIntEn  = 0x00000007;
00018a  2107              MOVS     r1,#7
00018c  4a9f              LDR      r2,|L1.1036|
00018e  328c              ADDS     r2,r2,#0x8c
000190  6011              STR      r1,[r2,#0]
;;;217      DDMemMap[0] = 0x00000000;
000192  2100              MOVS     r1,#0
000194  4aa1              LDR      r2,|L1.1052|
000196  6011              STR      r1,[r2,#0]  ; DDMemMap
;;;218      DDMemMap[1] = 0x00000000;
000198  6051              STR      r1,[r2,#4]  ; DDMemMap
;;;219      for (n = 0; n < USB_EP_NUM; n++) {
00019a  2000              MOVS     r0,#0
00019c  e007              B        |L1.430|
                  |L1.414|
;;;220        udca[n] = 0;
00019e  2100              MOVS     r1,#0
0001a0  4a9f              LDR      r2,|L1.1056|
0001a2  f8421020          STR      r1,[r2,r0,LSL #2]
;;;221        UDCA[n] = 0;
0001a6  4a9f              LDR      r2,|L1.1060|
0001a8  f8421020          STR      r1,[r2,r0,LSL #2]
0001ac  1c40              ADDS     r0,r0,#1              ;219
                  |L1.430|
0001ae  2820              CMP      r0,#0x20              ;219
0001b0  d3f5              BCC      |L1.414|
;;;222      }
;;;223    #endif
;;;224    }
0001b2  4770              BX       lr
;;;225    
                          ENDP

                  USB_Init PROC
;;;148    
;;;149    void USB_Init (void) {
0001b4  b500              PUSH     {lr}
;;;150    
;;;151      LPC_PINCON->PINSEL1 &= ~((3<<26)|(3<<28));   /* P0.29 D+, P0.30 D- */
0001b6  489c              LDR      r0,|L1.1064|
0001b8  6840              LDR      r0,[r0,#4]
0001ba  f0205070          BIC      r0,r0,#0x3c000000
0001be  499a              LDR      r1,|L1.1064|
0001c0  6048              STR      r0,[r1,#4]
;;;152      LPC_PINCON->PINSEL1 |=  ((1<<26)|(1<<28));   /* PINSEL1 26.27, 28.29  = 01 */
0001c2  4608              MOV      r0,r1
0001c4  6840              LDR      r0,[r0,#4]
0001c6  f04050a0          ORR      r0,r0,#0x14000000
0001ca  6048              STR      r0,[r1,#4]
;;;153    
;;;154      LPC_PINCON->PINSEL3 &= ~((3<< 4)|(3<<28));   /* P1.18 GoodLink, P1.30 VBUS */
0001cc  4608              MOV      r0,r1
0001ce  68c0              LDR      r0,[r0,#0xc]
0001d0  4996              LDR      r1,|L1.1068|
0001d2  4008              ANDS     r0,r0,r1
0001d4  4994              LDR      r1,|L1.1064|
0001d6  60c8              STR      r0,[r1,#0xc]
;;;155      LPC_PINCON->PINSEL3 |=  ((1<< 4)|(2<<28));   /* PINSEL3 4.5 = 01, 28.29 = 10 */
0001d8  4608              MOV      r0,r1
0001da  68c0              LDR      r0,[r0,#0xc]
0001dc  4994              LDR      r1,|L1.1072|
0001de  4308              ORRS     r0,r0,r1
0001e0  4991              LDR      r1,|L1.1064|
0001e2  60c8              STR      r0,[r1,#0xc]
;;;156    
;;;157      LPC_PINCON->PINSEL4 &= ~((3<<18)        );   /* P2.9 SoftConnect */
0001e4  4608              MOV      r0,r1
0001e6  6900              LDR      r0,[r0,#0x10]
0001e8  f4202040          BIC      r0,r0,#0xc0000
0001ec  6108              STR      r0,[r1,#0x10]
;;;158      LPC_PINCON->PINSEL4 |=  ((1<<18)        );   /* PINSEL4 18.19 = 01 */
0001ee  4608              MOV      r0,r1
0001f0  6900              LDR      r0,[r0,#0x10]
0001f2  f4402080          ORR      r0,r0,#0x40000
0001f6  6108              STR      r0,[r1,#0x10]
;;;159    
;;;160      LPC_SC->PCONP |= (1UL<<31);                /* USB PCLK -> enable USB Per.       */
0001f8  488e              LDR      r0,|L1.1076|
0001fa  6800              LDR      r0,[r0,#0]
0001fc  f0404000          ORR      r0,r0,#0x80000000
000200  498c              LDR      r1,|L1.1076|
000202  39c4              SUBS     r1,r1,#0xc4
000204  f8c100c4          STR      r0,[r1,#0xc4]
;;;161    
;;;162      LPC_USB->USBClkCtrl = 0x12;                /* Dev, AHB clock enable */
000208  2012              MOVS     r0,#0x12
00020a  498b              LDR      r1,|L1.1080|
00020c  6008              STR      r0,[r1,#0]
;;;163      while ((LPC_USB->USBClkSt & 0x12) != 0x12); 
00020e  bf00              NOP      
                  |L1.528|
000210  4889              LDR      r0,|L1.1080|
000212  1d00              ADDS     r0,r0,#4
000214  6800              LDR      r0,[r0,#0]
000216  f0000012          AND      r0,r0,#0x12
00021a  2812              CMP      r0,#0x12
00021c  d1f8              BNE      |L1.528|
;;;164    
;;;165      NVIC_EnableIRQ(USB_IRQn);               /* enable USB interrupt */
00021e  2018              MOVS     r0,#0x18
000220  2101              MOVS     r1,#1
000222  4081              LSLS     r1,r1,r0
000224  0942              LSRS     r2,r0,#5
000226  0092              LSLS     r2,r2,#2
000228  f10222e0          ADD      r2,r2,#0xe000e000
00022c  f8c21100          STR      r1,[r2,#0x100]
000230  bf00              NOP      
;;;166    
;;;167      USB_Reset();
000232  f7fffffe          BL       USB_Reset
;;;168      USB_SetAddress(0);
000236  2000              MOVS     r0,#0
000238  f7fffffe          BL       USB_SetAddress
;;;169    }
00023c  bd00              POP      {pc}
;;;170    
                          ENDP

                  USB_Connect PROC
;;;178    
;;;179    void USB_Connect (uint32_t con) {
00023e  b510              PUSH     {r4,lr}
000240  4604              MOV      r4,r0
;;;180      WrCmdDat(CMD_SET_DEV_STAT, DAT_WR_BYTE(con ? DEV_CON : 0));
000242  b10c              CBZ      r4,|L1.584|
000244  2001              MOVS     r0,#1
000246  e000              B        |L1.586|
                  |L1.584|
000248  2000              MOVS     r0,#0
                  |L1.586|
00024a  f44f7280          MOV      r2,#0x100
00024e  ea424100          ORR      r1,r2,r0,LSL #16
000252  487a              LDR      r0,|L1.1084|
000254  f7fffffe          BL       WrCmdDat
;;;181    }
000258  bd10              POP      {r4,pc}
;;;182    
                          ENDP

                  USB_Suspend PROC
;;;232    
;;;233    void USB_Suspend (void) {
00025a  4770              BX       lr
;;;234      /* Performed by Hardware */
;;;235    }
;;;236    
                          ENDP

                  USB_Resume PROC
;;;243    
;;;244    void USB_Resume (void) {
00025c  4770              BX       lr
;;;245      /* Performed by Hardware */
;;;246    }
;;;247    
                          ENDP

                  USB_WakeUp PROC
;;;254    
;;;255    void USB_WakeUp (void) {
00025e  b500              PUSH     {lr}
;;;256    
;;;257      if (USB_DeviceStatus & USB_GETSTATUS_REMOTE_WAKEUP) {
000260  4877              LDR      r0,|L1.1088|
000262  7800              LDRB     r0,[r0,#0]  ; USB_DeviceStatus
000264  f0000002          AND      r0,r0,#2
000268  b118              CBZ      r0,|L1.626|
;;;258        WrCmdDat(CMD_SET_DEV_STAT, DAT_WR_BYTE(DEV_CON));
00026a  4976              LDR      r1,|L1.1092|
00026c  4873              LDR      r0,|L1.1084|
00026e  f7fffffe          BL       WrCmdDat
                  |L1.626|
;;;259      }
;;;260    }
000272  bd00              POP      {pc}
;;;261    
                          ENDP

                  USB_WakeUpCfg PROC
;;;268    
;;;269    void USB_WakeUpCfg (uint32_t cfg) {
000274  4770              BX       lr
;;;270      /* Not needed */
;;;271    }
;;;272    
                          ENDP

                  USB_Configure PROC
;;;291    
;;;292    void USB_Configure (uint32_t cfg) {
000276  b510              PUSH     {r4,lr}
000278  4604              MOV      r4,r0
;;;293    
;;;294      WrCmdDat(CMD_CFG_DEV, DAT_WR_BYTE(cfg ? CONF_DVICE : 0));
00027a  b10c              CBZ      r4,|L1.640|
00027c  2001              MOVS     r0,#1
00027e  e000              B        |L1.642|
                  |L1.640|
000280  2000              MOVS     r0,#0
                  |L1.642|
000282  f44f7280          MOV      r2,#0x100
000286  ea424100          ORR      r1,r2,r0,LSL #16
00028a  486f              LDR      r0,|L1.1096|
00028c  f7fffffe          BL       WrCmdDat
;;;295    
;;;296      LPC_USB->ReEp = 0x00000003;
000290  2003              MOVS     r0,#3
000292  495e              LDR      r1,|L1.1036|
000294  313c              ADDS     r1,r1,#0x3c
000296  6008              STR      r0,[r1,#0]
;;;297      while ((LPC_USB->DevIntSt & EP_RLZED_INT) == 0);
000298  bf00              NOP      
                  |L1.666|
00029a  485c              LDR      r0,|L1.1036|
00029c  3808              SUBS     r0,r0,#8
00029e  6800              LDR      r0,[r0,#0]
0002a0  f4007080          AND      r0,r0,#0x100
0002a4  2800              CMP      r0,#0
0002a6  d0f8              BEQ      |L1.666|
;;;298      LPC_USB->DevIntClr = EP_RLZED_INT;
0002a8  f44f7080          MOV      r0,#0x100
0002ac  4957              LDR      r1,|L1.1036|
0002ae  6008              STR      r0,[r1,#0]
;;;299    }
0002b0  bd10              POP      {r4,pc}
;;;300    
                          ENDP

                  USB_ConfigEP PROC
;;;307    
;;;308    void USB_ConfigEP (USB_ENDPOINT_DESCRIPTOR *pEPD) {
0002b2  b510              PUSH     {r4,lr}
0002b4  4603              MOV      r3,r0
;;;309      uint32_t num;
;;;310    
;;;311      num = EPAdr(pEPD->bEndpointAddress);
0002b6  7898              LDRB     r0,[r3,#2]
0002b8  f7fffffe          BL       EPAdr
0002bc  4604              MOV      r4,r0
;;;312      LPC_USB->ReEp |= (1 << num);
0002be  4853              LDR      r0,|L1.1036|
0002c0  303c              ADDS     r0,r0,#0x3c
0002c2  6800              LDR      r0,[r0,#0]
0002c4  2101              MOVS     r1,#1
0002c6  40a1              LSLS     r1,r1,r4
0002c8  4308              ORRS     r0,r0,r1
0002ca  4951              LDR      r1,|L1.1040|
0002cc  f8c10244          STR      r0,[r1,#0x244]
;;;313      LPC_USB->EpInd = num;
0002d0  484e              LDR      r0,|L1.1036|
0002d2  3040              ADDS     r0,r0,#0x40
0002d4  6004              STR      r4,[r0,#0]
;;;314      LPC_USB->MaxPSize = pEPD->wMaxPacketSize;
0002d6  8898              LDRH     r0,[r3,#4]
0002d8  f8c1024c          STR      r0,[r1,#0x24c]
;;;315      while ((LPC_USB->DevIntSt & EP_RLZED_INT) == 0);
0002dc  bf00              NOP      
                  |L1.734|
0002de  484b              LDR      r0,|L1.1036|
0002e0  3808              SUBS     r0,r0,#8
0002e2  6800              LDR      r0,[r0,#0]
0002e4  f4007080          AND      r0,r0,#0x100
0002e8  2800              CMP      r0,#0
0002ea  d0f8              BEQ      |L1.734|
;;;316      LPC_USB->DevIntClr = EP_RLZED_INT;
0002ec  f44f7080          MOV      r0,#0x100
0002f0  4946              LDR      r1,|L1.1036|
0002f2  6008              STR      r0,[r1,#0]
;;;317    }
0002f4  bd10              POP      {r4,pc}
;;;318    
                          ENDP

                  USB_DirCtrlEP PROC
;;;325    
;;;326    void USB_DirCtrlEP (uint32_t dir) {
0002f6  4770              BX       lr
;;;327      /* Not needed */
;;;328    }
;;;329    
                          ENDP

                  USB_EnableEP PROC
;;;338    
;;;339    void USB_EnableEP (uint32_t EPNum) {
0002f8  b530              PUSH     {r4,r5,lr}
0002fa  4604              MOV      r4,r0
;;;340      WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(0));
0002fc  4620              MOV      r0,r4
0002fe  f7fffffe          BL       EPAdr
000302  4952              LDR      r1,|L1.1100|
000304  ea414500          ORR      r5,r1,r0,LSL #16
000308  1389              ASRS     r1,r1,#14
00030a  4628              MOV      r0,r5
00030c  f7fffffe          BL       WrCmdDat
;;;341    }
000310  bd30              POP      {r4,r5,pc}
;;;342    
                          ENDP

                  USB_DisableEP PROC
;;;351    
;;;352    void USB_DisableEP (uint32_t EPNum) {
000312  b530              PUSH     {r4,r5,lr}
000314  4604              MOV      r4,r0
;;;353      WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(EP_STAT_DA));
000316  4620              MOV      r0,r4
000318  f7fffffe          BL       EPAdr
00031c  494b              LDR      r1,|L1.1100|
00031e  ea414500          ORR      r5,r1,r0,LSL #16
000322  494b              LDR      r1,|L1.1104|
000324  4628              MOV      r0,r5
000326  f7fffffe          BL       WrCmdDat
;;;354    }
00032a  bd30              POP      {r4,r5,pc}
;;;355    
                          ENDP

                  USB_ResetEP PROC
;;;364    
;;;365    void USB_ResetEP (uint32_t EPNum) {
00032c  b530              PUSH     {r4,r5,lr}
00032e  4604              MOV      r4,r0
;;;366      WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(0));
000330  4620              MOV      r0,r4
000332  f7fffffe          BL       EPAdr
000336  4945              LDR      r1,|L1.1100|
000338  ea414500          ORR      r5,r1,r0,LSL #16
00033c  1389              ASRS     r1,r1,#14
00033e  4628              MOV      r0,r5
000340  f7fffffe          BL       WrCmdDat
;;;367    }
000344  bd30              POP      {r4,r5,pc}
;;;368    
                          ENDP

                  USB_SetStallEP PROC
;;;377    
;;;378    void USB_SetStallEP (uint32_t EPNum) {
000346  b530              PUSH     {r4,r5,lr}
000348  4604              MOV      r4,r0
;;;379      WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(EP_STAT_ST));
00034a  4620              MOV      r0,r4
00034c  f7fffffe          BL       EPAdr
000350  493e              LDR      r1,|L1.1100|
000352  ea414500          ORR      r5,r1,r0,LSL #16
000356  493b              LDR      r1,|L1.1092|
000358  4628              MOV      r0,r5
00035a  f7fffffe          BL       WrCmdDat
;;;380    }
00035e  bd30              POP      {r4,r5,pc}
;;;381    
                          ENDP

                  USB_ClrStallEP PROC
;;;390    
;;;391    void USB_ClrStallEP (uint32_t EPNum) {
000360  b530              PUSH     {r4,r5,lr}
000362  4604              MOV      r4,r0
;;;392      WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(0));
000364  4620              MOV      r0,r4
000366  f7fffffe          BL       EPAdr
00036a  4938              LDR      r1,|L1.1100|
00036c  ea414500          ORR      r5,r1,r0,LSL #16
000370  1389              ASRS     r1,r1,#14
000372  4628              MOV      r0,r5
000374  f7fffffe          BL       WrCmdDat
;;;393    }
000378  bd30              POP      {r4,r5,pc}
;;;394    
                          ENDP

                  USB_ClearEPBuf PROC
;;;403    
;;;404    void USB_ClearEPBuf (uint32_t EPNum) {
00037a  b510              PUSH     {r4,lr}
00037c  4604              MOV      r4,r0
;;;405      WrCmdEP(EPNum, CMD_CLR_BUF);
00037e  4935              LDR      r1,|L1.1108|
000380  4620              MOV      r0,r4
000382  f7fffffe          BL       WrCmdEP
;;;406    }
000386  bd10              POP      {r4,pc}
;;;407    
                          ENDP

                  USB_ReadEP PROC
;;;417    
;;;418    uint32_t USB_ReadEP (uint32_t EPNum, uint8_t *pData) {
000388  b5f0              PUSH     {r4-r7,lr}
00038a  4605              MOV      r5,r0
00038c  460f              MOV      r7,r1
;;;419      uint32_t cnt, n;
;;;420    
;;;421      LPC_USB->Ctrl = ((EPNum & 0x0F) << 2) | CTRL_RD_EN;
00038e  f005000f          AND      r0,r5,#0xf
000392  2101              MOVS     r1,#1
000394  eb010080          ADD      r0,r1,r0,LSL #2
000398  491c              LDR      r1,|L1.1036|
00039a  3120              ADDS     r1,r1,#0x20
00039c  6008              STR      r0,[r1,#0]
;;;422    
;;;423      do {
00039e  bf00              NOP      
                  |L1.928|
;;;424        cnt = LPC_USB->RxPLen;
0003a0  481a              LDR      r0,|L1.1036|
0003a2  3018              ADDS     r0,r0,#0x18
0003a4  6804              LDR      r4,[r0,#0]
;;;425      } while ((cnt & PKT_RDY) == 0);
0003a6  f4046000          AND      r0,r4,#0x800
0003aa  2800              CMP      r0,#0
0003ac  d0f8              BEQ      |L1.928|
;;;426      cnt &= PKT_LNGTH_MASK;
0003ae  f3c40409          UBFX     r4,r4,#0,#10
;;;427    
;;;428      for (n = 0; n < (cnt + 3) / 4; n++) {
0003b2  2600              MOVS     r6,#0
0003b4  e005              B        |L1.962|
                  |L1.950|
;;;429        *((__packed uint32_t *)pData) = LPC_USB->RxData;
0003b6  4816              LDR      r0,|L1.1040|
0003b8  f8d00218          LDR      r0,[r0,#0x218]
0003bc  6038              STR      r0,[r7,#0]
;;;430        pData += 4;
0003be  1d3f              ADDS     r7,r7,#4
0003c0  1c76              ADDS     r6,r6,#1              ;428
                  |L1.962|
0003c2  1ce0              ADDS     r0,r4,#3              ;428
0003c4  ebb60f90          CMP      r6,r0,LSR #2          ;428
0003c8  d3f5              BCC      |L1.950|
;;;431      }
;;;432      LPC_USB->Ctrl = 0;
0003ca  2000              MOVS     r0,#0
0003cc  490f              LDR      r1,|L1.1036|
0003ce  3120              ADDS     r1,r1,#0x20
0003d0  6008              STR      r0,[r1,#0]
;;;433    
;;;434      if (((EP_MSK_ISO >> EPNum) & 1) == 0) {   /* Non-Isochronous Endpoint */
0003d2  f2412048          MOV      r0,#0x1248
0003d6  4128              ASRS     r0,r0,r5
0003d8  f0000001          AND      r0,r0,#1
0003dc  b918              CBNZ     r0,|L1.998|
;;;435        WrCmdEP(EPNum, CMD_CLR_BUF);
0003de  491d              LDR      r1,|L1.1108|
0003e0  4628              MOV      r0,r5
0003e2  f7fffffe          BL       WrCmdEP
                  |L1.998|
;;;436      }
;;;437      return (cnt);
0003e6  4620              MOV      r0,r4
;;;438    }
0003e8  bdf0              POP      {r4-r7,pc}
;;;439    
                          ENDP

                  USB_WriteEP PROC
;;;450    
;;;451    uint32_t USB_WriteEP (uint32_t EPNum, uint8_t *pData, uint32_t cnt) {
0003ea  b5f0              PUSH     {r4-r7,lr}
0003ec  4606              MOV      r6,r0
0003ee  460d              MOV      r5,r1
0003f0  4614              MOV      r4,r2
;;;452      uint32_t n;
;;;453    
;;;454      LPC_USB->Ctrl = ((EPNum & 0x0F) << 2) | CTRL_WR_EN;
0003f2  f006000f          AND      r0,r6,#0xf
0003f6  2102              MOVS     r1,#2
0003f8  eb010080          ADD      r0,r1,r0,LSL #2
0003fc  4903              LDR      r1,|L1.1036|
0003fe  3120              ADDS     r1,r1,#0x20
000400  6008              STR      r0,[r1,#0]
;;;455    
;;;456      LPC_USB->TxPLen = cnt;
000402  4803              LDR      r0,|L1.1040|
000404  f8c04224          STR      r4,[r0,#0x224]
;;;457    
;;;458      for (n = 0; n < (cnt + 3) / 4; n++) {
000408  2700              MOVS     r7,#0
00040a  e02a              B        |L1.1122|
                  |L1.1036|
                          DCD      0x5000c208
                  |L1.1040|
                          DCD      0x5000c000
                  |L1.1044|
                          DCD      0x00d00500
                  |L1.1048|
                          DCD      0x20080000
                  |L1.1052|
                          DCD      DDMemMap
                  |L1.1056|
                          DCD      udca
                  |L1.1060|
                          DCD      UDCA
                  |L1.1064|
                          DCD      0x4002c000
                  |L1.1068|
                          DCD      0xcfffffcf
                  |L1.1072|
                          DCD      0x20000010
                  |L1.1076|
                          DCD      0x400fc0c4
                  |L1.1080|
                          DCD      0x5000cff4
                  |L1.1084|
                          DCD      0x00fe0500
                  |L1.1088|
                          DCD      USB_DeviceStatus
                  |L1.1092|
                          DCD      0x00010100
                  |L1.1096|
                          DCD      0x00d80500
                  |L1.1100|
                          DCD      0x00400500
                  |L1.1104|
                          DCD      0x00200100
                  |L1.1108|
                          DCD      0x00f20500
                  |L1.1112|
;;;459        LPC_USB->TxData = *((__packed uint32_t *)pData);
000458  6828              LDR      r0,[r5,#0]
00045a  49fe              LDR      r1,|L1.2132|
00045c  6008              STR      r0,[r1,#0]
;;;460        pData += 4;
00045e  1d2d              ADDS     r5,r5,#4
000460  1c7f              ADDS     r7,r7,#1              ;458
                  |L1.1122|
000462  1ce0              ADDS     r0,r4,#3              ;458
000464  ebb70f90          CMP      r7,r0,LSR #2          ;458
000468  d3f6              BCC      |L1.1112|
;;;461      }
;;;462      LPC_USB->Ctrl = 0;
00046a  2000              MOVS     r0,#0
00046c  49f9              LDR      r1,|L1.2132|
00046e  310c              ADDS     r1,r1,#0xc
000470  6008              STR      r0,[r1,#0]
;;;463      WrCmdEP(EPNum, CMD_VALID_BUF);
000472  49f9              LDR      r1,|L1.2136|
000474  4630              MOV      r0,r6
000476  f7fffffe          BL       WrCmdEP
;;;464      return (cnt);
00047a  4620              MOV      r0,r4
;;;465    }
00047c  bdf0              POP      {r4-r7,pc}
;;;466    
                          ENDP

                  USB_DMA_Setup PROC
;;;480    
;;;481    uint32_t USB_DMA_Setup(uint32_t EPNum, USB_DMA_DESCRIPTOR *pDD) {
00047e  e92d43f0          PUSH     {r4-r9,lr}
000482  4681              MOV      r9,r0
000484  460c              MOV      r4,r1
;;;482      uint32_t num, ptr, nxt, iso, n;
;;;483    
;;;484      iso = pDD->Cfg.Type.IsoEP;                /* Iso or Non-Iso Descriptor */
000486  7b20              LDRB     r0,[r4,#0xc]
000488  f3c00540          UBFX     r5,r0,#1,#1
;;;485      num = EPAdr(EPNum);                       /* Endpoint's Physical Address */
00048c  4648              MOV      r0,r9
00048e  f7fffffe          BL       EPAdr
000492  4680              MOV      r8,r0
;;;486    
;;;487      ptr = 0;                                  /* Current Descriptor */
000494  2700              MOVS     r7,#0
;;;488      nxt = udca[num];                          /* Initial Descriptor */
000496  48f1              LDR      r0,|L1.2140|
000498  f8503028          LDR      r3,[r0,r8,LSL #2]
;;;489      while (nxt) {                             /* Go through Descriptor List */
00049c  e017              B        |L1.1230|
                  |L1.1182|
;;;490        ptr = nxt;                              /* Current Descriptor */
00049e  461f              MOV      r7,r3
;;;491        if (!pDD->Cfg.Type.Link) {              /* Check for Linked Descriptors */
0004a0  7b20              LDRB     r0,[r4,#0xc]
0004a2  f0000001          AND      r0,r0,#1
0004a6  b988              CBNZ     r0,|L1.1228|
;;;492          n = (ptr - DDAdr[iso]) / DDSz[iso];   /* Descriptor Index */
0004a8  48ed              LDR      r0,|L1.2144|
0004aa  f8500025          LDR      r0,[r0,r5,LSL #2]
0004ae  1a38              SUBS     r0,r7,r0
0004b0  49ec              LDR      r1,|L1.2148|
0004b2  f8511025          LDR      r1,[r1,r5,LSL #2]
0004b6  fbb0f6f1          UDIV     r6,r0,r1
;;;493          DDMemMap[iso] &= ~(1 << n);           /* Unmark Memory Usage */
0004ba  48eb              LDR      r0,|L1.2152|
0004bc  f8500025          LDR      r0,[r0,r5,LSL #2]
0004c0  2101              MOVS     r1,#1
0004c2  40b1              LSLS     r1,r1,r6
0004c4  4388              BICS     r0,r0,r1
0004c6  49e8              LDR      r1,|L1.2152|
0004c8  f8410025          STR      r0,[r1,r5,LSL #2]
                  |L1.1228|
;;;494        }
;;;495        nxt = *((uint32_t *)ptr);                  /* Next Descriptor */
0004cc  683b              LDR      r3,[r7,#0]
                  |L1.1230|
0004ce  2b00              CMP      r3,#0                 ;489
0004d0  d1e5              BNE      |L1.1182|
;;;496      }
;;;497    
;;;498      for (n = 0; n < 32; n++) {                /* Search for available Memory */
0004d2  2600              MOVS     r6,#0
0004d4  e008              B        |L1.1256|
                  |L1.1238|
;;;499        if ((DDMemMap[iso] & (1 << n)) == 0) {
0004d6  48e4              LDR      r0,|L1.2152|
0004d8  f8501025          LDR      r1,[r0,r5,LSL #2]
0004dc  2001              MOVS     r0,#1
0004de  40b0              LSLS     r0,r0,r6
0004e0  4001              ANDS     r1,r1,r0
0004e2  b901              CBNZ     r1,|L1.1254|
;;;500          break;                                /* Memory found */
0004e4  e002              B        |L1.1260|
                  |L1.1254|
0004e6  1c76              ADDS     r6,r6,#1              ;498
                  |L1.1256|
0004e8  2e20              CMP      r6,#0x20              ;498
0004ea  d3f4              BCC      |L1.1238|
                  |L1.1260|
0004ec  bf00              NOP      
;;;501        }
;;;502      }
;;;503      if (n == 32) return (FALSE);              /* Memory not available */
0004ee  2e20              CMP      r6,#0x20
0004f0  d102              BNE      |L1.1272|
0004f2  2000              MOVS     r0,#0
                  |L1.1268|
;;;504    
;;;505      DDMemMap[iso] |= 1 << n;                  /* Mark Memory Usage */
;;;506      nxt = DDAdr[iso] + n * DDSz[iso];         /* Next Descriptor */
;;;507    
;;;508      if (ptr && pDD->Cfg.Type.Link) {
;;;509        *((uint32_t *)(ptr + 0))  = nxt;           /* Link in new Descriptor */
;;;510        *((uint32_t *)(ptr + 4)) |= 0x00000004;    /* Next DD is Valid */
;;;511      } else {
;;;512        udca[num] = nxt;                        /* Save new Descriptor */
;;;513        UDCA[num] = nxt;                        /* Update UDCA in USB */
;;;514      }
;;;515    
;;;516      /* Fill in DMA Descriptor */
;;;517      *(((uint32_t *)nxt)++) =  0;                 /* Next DD Pointer */
;;;518      *(((uint32_t *)nxt)++) =  pDD->Cfg.Type.ATLE |
;;;519                           (pDD->Cfg.Type.IsoEP << 4) |
;;;520                           (pDD->MaxSize <<  5) |
;;;521                           (pDD->BufLen  << 16);
;;;522      *(((uint32_t *)nxt)++) =  pDD->BufAdr;
;;;523      *(((uint32_t *)nxt)++) =  pDD->Cfg.Type.LenPos << 8;
;;;524      if (iso) {
;;;525        *((uint32_t *)nxt) =  pDD->InfoAdr;
;;;526      }
;;;527    
;;;528      return (TRUE); /* Success */
;;;529    }
0004f4  e8bd83f0          POP      {r4-r9,pc}
                  |L1.1272|
0004f8  48db              LDR      r0,|L1.2152|
0004fa  f8501025          LDR      r1,[r0,r5,LSL #2]     ;505
0004fe  2001              MOVS     r0,#1                 ;505
000500  40b0              LSLS     r0,r0,r6              ;505
000502  4301              ORRS     r1,r1,r0              ;505
000504  48d8              LDR      r0,|L1.2152|
000506  f8401025          STR      r1,[r0,r5,LSL #2]     ;505
00050a  48d5              LDR      r0,|L1.2144|
00050c  f8500025          LDR      r0,[r0,r5,LSL #2]     ;506
000510  49d4              LDR      r1,|L1.2148|
000512  f8511025          LDR      r1,[r1,r5,LSL #2]     ;506
000516  fb060301          MLA      r3,r6,r1,r0           ;506
00051a  b14f              CBZ      r7,|L1.1328|
00051c  7b20              LDRB     r0,[r4,#0xc]          ;508
00051e  f0000001          AND      r0,r0,#1              ;508
000522  b128              CBZ      r0,|L1.1328|
000524  603b              STR      r3,[r7,#0]            ;509
000526  6878              LDR      r0,[r7,#4]            ;510
000528  f0400004          ORR      r0,r0,#4              ;510
00052c  6078              STR      r0,[r7,#4]            ;510
00052e  e005              B        |L1.1340|
                  |L1.1328|
000530  48ca              LDR      r0,|L1.2140|
000532  f8403028          STR      r3,[r0,r8,LSL #2]     ;512
000536  48cd              LDR      r0,|L1.2156|
000538  f8403028          STR      r3,[r0,r8,LSL #2]     ;513
                  |L1.1340|
00053c  2000              MOVS     r0,#0                 ;517
00053e  c301              STM      r3!,{r0}              ;517
000540  7b20              LDRB     r0,[r4,#0xc]          ;518
000542  f3c00080          UBFX     r0,r0,#2,#1           ;518
000546  7b21              LDRB     r1,[r4,#0xc]          ;518
000548  f3c10140          UBFX     r1,r1,#1,#1           ;518
00054c  ea401001          ORR      r0,r0,r1,LSL #4       ;518
000550  88e1              LDRH     r1,[r4,#6]            ;518
000552  ea401041          ORR      r0,r0,r1,LSL #5       ;518
000556  88a1              LDRH     r1,[r4,#4]            ;518
000558  ea404001          ORR      r0,r0,r1,LSL #16      ;518
00055c  c301              STM      r3!,{r0}              ;518
00055e  6820              LDR      r0,[r4,#0]            ;522
000560  c301              STM      r3!,{r0}              ;522
000562  89a0              LDRH     r0,[r4,#0xc]          ;523
000564  f3c02007          UBFX     r0,r0,#8,#8           ;523
000568  0200              LSLS     r0,r0,#8              ;523
00056a  c301              STM      r3!,{r0}              ;523
00056c  b10d              CBZ      r5,|L1.1394|
00056e  68a0              LDR      r0,[r4,#8]            ;525
000570  6018              STR      r0,[r3,#0]            ;525
                  |L1.1394|
000572  2001              MOVS     r0,#1                 ;528
000574  e7be              B        |L1.1268|
;;;530    
                          ENDP

                  USB_DMA_Enable PROC
;;;539    
;;;540    void USB_DMA_Enable (uint32_t EPNum) {
000576  b500              PUSH     {lr}
000578  4603              MOV      r3,r0
;;;541      LPC_USB->EpDMAEn = 1 << EPAdr(EPNum);
00057a  4618              MOV      r0,r3
00057c  f7fffffe          BL       EPAdr
000580  2101              MOVS     r1,#1
000582  4081              LSLS     r1,r1,r0
000584  48b3              LDR      r0,|L1.2132|
000586  306c              ADDS     r0,r0,#0x6c
000588  6001              STR      r1,[r0,#0]
;;;542    }
00058a  bd00              POP      {pc}
;;;543    
                          ENDP

                  USB_DMA_Disable PROC
;;;552    
;;;553    void USB_DMA_Disable (uint32_t EPNum) {
00058c  b500              PUSH     {lr}
00058e  4603              MOV      r3,r0
;;;554      LPC_USB->EpDMADis = 1 << EPAdr(EPNum);
000590  4618              MOV      r0,r3
000592  f7fffffe          BL       EPAdr
000596  2101              MOVS     r1,#1
000598  4081              LSLS     r1,r1,r0
00059a  48ae              LDR      r0,|L1.2132|
00059c  3070              ADDS     r0,r0,#0x70
00059e  6001              STR      r1,[r0,#0]
;;;555    }
0005a0  bd00              POP      {pc}
;;;556    
                          ENDP

                  USB_DMA_Status PROC
;;;565    
;;;566    uint32_t USB_DMA_Status (uint32_t EPNum) {
0005a2  b530              PUSH     {r4,r5,lr}
0005a4  4605              MOV      r5,r0
;;;567      uint32_t ptr, val;
;;;568              
;;;569      ptr = UDCA[EPAdr(EPNum)];                 /* Current Descriptor */
0005a6  4628              MOV      r0,r5
0005a8  f7fffffe          BL       EPAdr
0005ac  49af              LDR      r1,|L1.2156|
0005ae  f8513020          LDR      r3,[r1,r0,LSL #2]
;;;570      if (ptr == 0) 
0005b2  b90b              CBNZ     r3,|L1.1464|
;;;571    	return (USB_DMA_INVALID);
0005b4  2000              MOVS     r0,#0
                  |L1.1462|
;;;572    
;;;573      val = *((uint32_t *)(ptr + 3*4));            /* Status Information */
;;;574      switch ((val >> 1) & 0x0F) {
;;;575        case 0x00:                              /* Not serviced */
;;;576          return (USB_DMA_IDLE);
;;;577        case 0x01:                              /* Being serviced */
;;;578          return (USB_DMA_BUSY);
;;;579        case 0x02:                              /* Normal Completition */
;;;580          return (USB_DMA_DONE);
;;;581        case 0x03:                              /* Data Under Run */
;;;582          return (USB_DMA_UNDER_RUN);
;;;583        case 0x08:                              /* Data Over Run */
;;;584          return (USB_DMA_OVER_RUN);
;;;585        case 0x09:                              /* System Error */
;;;586          return (USB_DMA_ERROR);
;;;587      }
;;;588    
;;;589      return (USB_DMA_UNKNOWN);
;;;590    }
0005b6  bd30              POP      {r4,r5,pc}
                  |L1.1464|
0005b8  68dc              LDR      r4,[r3,#0xc]          ;573
0005ba  f3c40043          UBFX     r0,r4,#1,#4           ;574
0005be  280a              CMP      r0,#0xa               ;574
0005c0  d212              BCS      |L1.1512|
0005c2  e8dff000          TBB      [pc,r0]               ;574
0005c6  0507              DCB      0x05,0x07
0005c8  090b1111          DCB      0x09,0x0b,0x11,0x11
0005cc  11110d0f          DCB      0x11,0x11,0x0d,0x0f
0005d0  2001              MOVS     r0,#1                 ;576
0005d2  e7f0              B        |L1.1462|
0005d4  2002              MOVS     r0,#2                 ;578
0005d6  e7ee              B        |L1.1462|
0005d8  2003              MOVS     r0,#3                 ;580
0005da  e7ec              B        |L1.1462|
0005dc  2005              MOVS     r0,#5                 ;582
0005de  e7ea              B        |L1.1462|
0005e0  2004              MOVS     r0,#4                 ;584
0005e2  e7e8              B        |L1.1462|
0005e4  2006              MOVS     r0,#6                 ;586
0005e6  e7e6              B        |L1.1462|
                  |L1.1512|
0005e8  f64f70ff          MOV      r0,#0xffff            ;589
0005ec  e7e3              B        |L1.1462|
;;;591    
                          ENDP

                  USB_DMA_BufAdr PROC
;;;600    
;;;601    uint32_t USB_DMA_BufAdr (uint32_t EPNum) {
0005ee  b530              PUSH     {r4,r5,lr}
0005f0  4605              MOV      r5,r0
;;;602      uint32_t ptr, val;
;;;603    
;;;604      ptr = UDCA[EPAdr(EPNum)];                 /* Current Descriptor */
0005f2  4628              MOV      r0,r5
0005f4  f7fffffe          BL       EPAdr
0005f8  499c              LDR      r1,|L1.2156|
0005fa  f8513020          LDR      r3,[r1,r0,LSL #2]
;;;605      if (ptr == 0)
0005fe  b913              CBNZ     r3,|L1.1542|
;;;606      {
;;;607    	return ((uint32_t)(-1));                /* DMA Invalid */
000600  f04f30ff          MOV      r0,#0xffffffff
                  |L1.1540|
;;;608      }
;;;609    
;;;610      val = *((uint32_t *)(ptr + 2*4));         /* Buffer Address */
;;;611      return (val);                             /* Current Address */
;;;612    }
000604  bd30              POP      {r4,r5,pc}
                  |L1.1542|
000606  689c              LDR      r4,[r3,#8]            ;610
000608  4620              MOV      r0,r4                 ;611
00060a  e7fb              B        |L1.1540|
;;;613    
                          ENDP

                  USB_DMA_BufCnt PROC
;;;623    
;;;624    uint32_t USB_DMA_BufCnt (uint32_t EPNum) {
00060c  b530              PUSH     {r4,r5,lr}
00060e  4605              MOV      r5,r0
;;;625      uint32_t ptr, val;
;;;626    
;;;627      ptr = UDCA[EPAdr(EPNum)];                 /* Current Descriptor */
000610  4628              MOV      r0,r5
000612  f7fffffe          BL       EPAdr
000616  4995              LDR      r1,|L1.2156|
000618  f8513020          LDR      r3,[r1,r0,LSL #2]
;;;628      if (ptr == 0)
00061c  b913              CBNZ     r3,|L1.1572|
;;;629      { 
;;;630    	return ((uint32_t)(-1));                /* DMA Invalid */
00061e  f04f30ff          MOV      r0,#0xffffffff
                  |L1.1570|
;;;631      }
;;;632      val = *((uint32_t *)(ptr + 3*4));         /* Status Information */
;;;633      return (val >> 16);                       /* Current Count */
;;;634    }
000622  bd30              POP      {r4,r5,pc}
                  |L1.1572|
000624  68dc              LDR      r4,[r3,#0xc]          ;632
000626  0c20              LSRS     r0,r4,#16             ;633
000628  e7fb              B        |L1.1570|
;;;635    
                          ENDP

                  USB_GetFrame PROC
;;;645    
;;;646    uint32_t USB_GetFrame (void) {
00062a  b500              PUSH     {lr}
;;;647      uint32_t val;
;;;648    
;;;649      WrCmd(CMD_RD_FRAME);
00062c  4890              LDR      r0,|L1.2160|
00062e  f7fffffe          BL       WrCmd
;;;650      val = RdCmdDat(DAT_RD_FRAME);
000632  4890              LDR      r0,|L1.2164|
000634  f7fffffe          BL       RdCmdDat
000638  4603              MOV      r3,r0
;;;651      val = val | (RdCmdDat(DAT_RD_FRAME) << 8);
00063a  488e              LDR      r0,|L1.2164|
00063c  f7fffffe          BL       RdCmdDat
000640  ea432300          ORR      r3,r3,r0,LSL #8
;;;652    
;;;653      return (val);
000644  4618              MOV      r0,r3
;;;654    }
000646  bd00              POP      {pc}
;;;655    
                          ENDP

                  USB_IRQHandler PROC
;;;660    
;;;661    void USB_IRQHandler (void) {
000648  e92d47f0          PUSH     {r4-r10,lr}
;;;662      uint32_t disr, val, n, m;
;;;663      uint32_t episr, episrCur;
;;;664    
;;;665      disr = LPC_USB->DevIntSt;       /* Device Interrupt Status */
00064c  4881              LDR      r0,|L1.2132|
00064e  381c              SUBS     r0,r0,#0x1c
000650  6807              LDR      r7,[r0,#0]
;;;666    
;;;667      /* Device Status Interrupt (Reset, Connect change, Suspend/Resume) */
;;;668      if (disr & DEV_STAT_INT) {
000652  f0070008          AND      r0,r7,#8
000656  b1e8              CBZ      r0,|L1.1684|
;;;669        LPC_USB->DevIntClr = DEV_STAT_INT;
000658  2008              MOVS     r0,#8
00065a  497e              LDR      r1,|L1.2132|
00065c  3914              SUBS     r1,r1,#0x14
00065e  6008              STR      r0,[r1,#0]
;;;670        WrCmd(CMD_GET_DEV_STAT);
000660  4885              LDR      r0,|L1.2168|
000662  f7fffffe          BL       WrCmd
;;;671        val = RdCmdDat(DAT_GET_DEV_STAT);       /* Device Status */
000666  4885              LDR      r0,|L1.2172|
000668  f7fffffe          BL       RdCmdDat
00066c  4606              MOV      r6,r0
;;;672        if (val & DEV_RST) {                    /* Reset */
00066e  f0060010          AND      r0,r6,#0x10
000672  b118              CBZ      r0,|L1.1660|
;;;673          USB_Reset();
000674  f7fffffe          BL       USB_Reset
;;;674    #if   USB_RESET_EVENT
;;;675          USB_Reset_Event();
000678  f7fffffe          BL       USB_Reset_Event
                  |L1.1660|
;;;676    #endif
;;;677        }
;;;678        if (val & DEV_CON_CH) {                 /* Connect change */
;;;679    #if   USB_POWER_EVENT
;;;680          USB_Power_Event(val & DEV_CON);
;;;681    #endif
;;;682        }
;;;683        if (val & DEV_SUS_CH) {                 /* Suspend/Resume */
00067c  f0060008          AND      r0,r6,#8
000680  b138              CBZ      r0,|L1.1682|
;;;684          if (val & DEV_SUS) {                  /* Suspend */
000682  f0060004          AND      r0,r6,#4
000686  b110              CBZ      r0,|L1.1678|
;;;685            USB_Suspend();
000688  f7fffffe          BL       USB_Suspend
00068c  e001              B        |L1.1682|
                  |L1.1678|
;;;686    #if     USB_SUSPEND_EVENT
;;;687            USB_Suspend_Event();
;;;688    #endif
;;;689          } else {                              /* Resume */
;;;690            USB_Resume();
00068e  f7fffffe          BL       USB_Resume
                  |L1.1682|
;;;691    #if     USB_RESUME_EVENT
;;;692            USB_Resume_Event();
;;;693    #endif
;;;694          }
;;;695        }
;;;696        goto isr_end;
000692  e0dc              B        |L1.2126|
                  |L1.1684|
;;;697      }
;;;698    
;;;699    #if USB_SOF_EVENT
;;;700      /* Start of Frame Interrupt */
;;;701      if (disr & FRAME_INT) {
000694  f0070001          AND      r0,r7,#1
000698  b108              CBZ      r0,|L1.1694|
;;;702        USB_SOF_Event();
00069a  f7fffffe          BL       USB_SOF_Event
                  |L1.1694|
;;;703      }
;;;704    #endif
;;;705    
;;;706    #if USB_ERROR_EVENT
;;;707      /* Error Interrupt */
;;;708      if (disr & ERR_INT) {
;;;709        WrCmd(CMD_RD_ERR_STAT);
;;;710        val = RdCmdDat(DAT_RD_ERR_STAT);
;;;711        USB_Error_Event(val);
;;;712      }
;;;713    #endif
;;;714    
;;;715      /* Endpoint's Slow Interrupt */
;;;716      if (disr & EP_SLOW_INT) {
00069e  f0070004          AND      r0,r7,#4
0006a2  2800              CMP      r0,#0
0006a4  d04e              BEQ      |L1.1860|
;;;717        episrCur = 0;
0006a6  f04f0900          MOV      r9,#0
;;;718        episr    = LPC_USB->EpIntSt;
0006aa  4875              LDR      r0,|L1.2176|
0006ac  f8d08230          LDR      r8,[r0,#0x230]
;;;719        for (n = 0; n < USB_EP_NUM; n++) {      /* Check All Endpoints */
0006b0  2400              MOVS     r4,#0
0006b2  e040              B        |L1.1846|
                  |L1.1716|
;;;720          if (episr == episrCur) break;         /* break if all EP interrupts handled */
0006b4  45c8              CMP      r8,r9
0006b6  d100              BNE      |L1.1722|
0006b8  e03f              B        |L1.1850|
                  |L1.1722|
;;;721          if (episr & (1 << n)) {
0006ba  2001              MOVS     r0,#1
0006bc  40a0              LSLS     r0,r0,r4
0006be  ea000008          AND      r0,r0,r8
0006c2  b360              CBZ      r0,|L1.1822|
;;;722            episrCur |= (1 << n);
0006c4  2001              MOVS     r0,#1
0006c6  40a0              LSLS     r0,r0,r4
0006c8  ea400909          ORR      r9,r0,r9
;;;723            m = n >> 1;
0006cc  0865              LSRS     r5,r4,#1
;;;724      
;;;725            LPC_USB->EpIntClr = (1 << n);
0006ce  2001              MOVS     r0,#1
0006d0  40a0              LSLS     r0,r0,r4
0006d2  4960              LDR      r1,|L1.2132|
0006d4  311c              ADDS     r1,r1,#0x1c
0006d6  6008              STR      r0,[r1,#0]
;;;726            while ((LPC_USB->DevIntSt & CDFULL_INT) == 0);
0006d8  bf00              NOP      
                  |L1.1754|
0006da  485e              LDR      r0,|L1.2132|
0006dc  381c              SUBS     r0,r0,#0x1c
0006de  6800              LDR      r0,[r0,#0]
0006e0  f0000020          AND      r0,r0,#0x20
0006e4  2800              CMP      r0,#0
0006e6  d0f8              BEQ      |L1.1754|
;;;727            val = LPC_USB->CmdData;
0006e8  485a              LDR      r0,|L1.2132|
0006ea  3808              SUBS     r0,r0,#8
0006ec  6806              LDR      r6,[r0,#0]
;;;728      
;;;729            if ((n & 1) == 0) {                 /* OUT Endpoint */
0006ee  f0040001          AND      r0,r4,#1
0006f2  b9a8              CBNZ     r0,|L1.1824|
;;;730              if (n == 0) {                     /* Control OUT Endpoint */
0006f4  b954              CBNZ     r4,|L1.1804|
;;;731                if (val & EP_SEL_STP) {         /* Setup Packet */
0006f6  f0060004          AND      r0,r6,#4
0006fa  b138              CBZ      r0,|L1.1804|
;;;732                  if (USB_P_EP[0]) {
0006fc  4861              LDR      r0,|L1.2180|
0006fe  6800              LDR      r0,[r0,#0]  ; USB_P_EP
000700  b120              CBZ      r0,|L1.1804|
;;;733                    USB_P_EP[0](USB_EVT_SETUP);
000702  4860              LDR      r0,|L1.2180|
000704  6801              LDR      r1,[r0,#0]  ; USB_P_EP
000706  2001              MOVS     r0,#1
000708  4788              BLX      r1
;;;734                    continue;
00070a  e013              B        |L1.1844|
                  |L1.1804|
;;;735                  }
;;;736                }
;;;737              }
;;;738              if (USB_P_EP[m]) {
00070c  485d              LDR      r0,|L1.2180|
00070e  f8500025          LDR      r0,[r0,r5,LSL #2]
000712  b120              CBZ      r0,|L1.1822|
;;;739                USB_P_EP[m](USB_EVT_OUT);
000714  485b              LDR      r0,|L1.2180|
000716  f8501025          LDR      r1,[r0,r5,LSL #2]
00071a  2002              MOVS     r0,#2
00071c  4788              BLX      r1
                  |L1.1822|
00071e  e008              B        |L1.1842|
                  |L1.1824|
;;;740              }
;;;741            } else {                            /* IN Endpoint */
;;;742              if (USB_P_EP[m]) {
000720  4858              LDR      r0,|L1.2180|
000722  f8500025          LDR      r0,[r0,r5,LSL #2]
000726  b120              CBZ      r0,|L1.1842|
;;;743                USB_P_EP[m](USB_EVT_IN);
000728  4856              LDR      r0,|L1.2180|
00072a  f8501025          LDR      r1,[r0,r5,LSL #2]
00072e  2003              MOVS     r0,#3
000730  4788              BLX      r1
                  |L1.1842|
000732  bf00              NOP                            ;734
                  |L1.1844|
000734  1c64              ADDS     r4,r4,#1              ;719
                  |L1.1846|
000736  2c20              CMP      r4,#0x20              ;719
000738  d3bc              BCC      |L1.1716|
                  |L1.1850|
00073a  bf00              NOP                            ;720
;;;744              }
;;;745            }
;;;746          }
;;;747        }
;;;748        LPC_USB->DevIntClr = EP_SLOW_INT;
00073c  2004              MOVS     r0,#4
00073e  4945              LDR      r1,|L1.2132|
000740  3914              SUBS     r1,r1,#0x14
000742  6008              STR      r0,[r1,#0]
                  |L1.1860|
;;;749      }
;;;750    
;;;751    #if USB_DMA
;;;752    
;;;753      if (LPC_USB->DMAIntSt & 0x00000001) {          /* End of Transfer Interrupt */
000744  4843              LDR      r0,|L1.2132|
000746  3074              ADDS     r0,r0,#0x74
000748  6800              LDR      r0,[r0,#0]
00074a  f0000001          AND      r0,r0,#1
00074e  b328              CBZ      r0,|L1.1948|
;;;754        val = LPC_USB->EoTIntSt;
000750  4840              LDR      r0,|L1.2132|
000752  3084              ADDS     r0,r0,#0x84
000754  6806              LDR      r6,[r0,#0]
;;;755        for (n = 2; n < USB_EP_NUM; n++) {      /* Check All Endpoints */
000756  2402              MOVS     r4,#2
000758  e01b              B        |L1.1938|
                  |L1.1882|
;;;756          if (val & (1 << n)) {
00075a  2001              MOVS     r0,#1
00075c  40a0              LSLS     r0,r0,r4
00075e  4030              ANDS     r0,r0,r6
000760  b1b0              CBZ      r0,|L1.1936|
;;;757            m = n >> 1;
000762  0865              LSRS     r5,r4,#1
;;;758            if ((n & 1) == 0) {                 /* OUT Endpoint */
000764  f0040001          AND      r0,r4,#1
000768  b948              CBNZ     r0,|L1.1918|
;;;759              if (USB_P_EP[m]) {
00076a  4846              LDR      r0,|L1.2180|
00076c  f8500025          LDR      r0,[r0,r5,LSL #2]
000770  b170              CBZ      r0,|L1.1936|
;;;760                USB_P_EP[m](USB_EVT_OUT_DMA_EOT);
000772  4844              LDR      r0,|L1.2180|
000774  f8501025          LDR      r1,[r0,r5,LSL #2]
000778  2008              MOVS     r0,#8
00077a  4788              BLX      r1
00077c  e008              B        |L1.1936|
                  |L1.1918|
;;;761              }
;;;762            } else {                            /* IN Endpoint */
;;;763              if (USB_P_EP[m]) {
00077e  4841              LDR      r0,|L1.2180|
000780  f8500025          LDR      r0,[r0,r5,LSL #2]
000784  b120              CBZ      r0,|L1.1936|
;;;764                USB_P_EP[m](USB_EVT_IN_DMA_EOT);
000786  483f              LDR      r0,|L1.2180|
000788  f8501025          LDR      r1,[r0,r5,LSL #2]
00078c  2009              MOVS     r0,#9
00078e  4788              BLX      r1
                  |L1.1936|
000790  1c64              ADDS     r4,r4,#1              ;755
                  |L1.1938|
000792  2c20              CMP      r4,#0x20              ;755
000794  d3e1              BCC      |L1.1882|
;;;765              }
;;;766            }
;;;767          }
;;;768        }
;;;769        LPC_USB->EoTIntClr = val;
000796  482f              LDR      r0,|L1.2132|
000798  3088              ADDS     r0,r0,#0x88
00079a  6006              STR      r6,[r0,#0]
                  |L1.1948|
;;;770      }
;;;771    
;;;772      if (LPC_USB->DMAIntSt & 0x00000002) {          /* New DD Request Interrupt */
00079c  482d              LDR      r0,|L1.2132|
00079e  3074              ADDS     r0,r0,#0x74
0007a0  6800              LDR      r0,[r0,#0]
0007a2  f0000002          AND      r0,r0,#2
0007a6  b328              CBZ      r0,|L1.2036|
;;;773        val = LPC_USB->NDDRIntSt;
0007a8  482a              LDR      r0,|L1.2132|
0007aa  3090              ADDS     r0,r0,#0x90
0007ac  6806              LDR      r6,[r0,#0]
;;;774        for (n = 2; n < USB_EP_NUM; n++) {      /* Check All Endpoints */
0007ae  2402              MOVS     r4,#2
0007b0  e01b              B        |L1.2026|
                  |L1.1970|
;;;775          if (val & (1 << n)) {
0007b2  2001              MOVS     r0,#1
0007b4  40a0              LSLS     r0,r0,r4
0007b6  4030              ANDS     r0,r0,r6
0007b8  b1b0              CBZ      r0,|L1.2024|
;;;776            m = n >> 1;
0007ba  0865              LSRS     r5,r4,#1
;;;777            if ((n & 1) == 0) {                 /* OUT Endpoint */
0007bc  f0040001          AND      r0,r4,#1
0007c0  b948              CBNZ     r0,|L1.2006|
;;;778              if (USB_P_EP[m]) {
0007c2  4830              LDR      r0,|L1.2180|
0007c4  f8500025          LDR      r0,[r0,r5,LSL #2]
0007c8  b170              CBZ      r0,|L1.2024|
;;;779                USB_P_EP[m](USB_EVT_OUT_DMA_NDR);
0007ca  482e              LDR      r0,|L1.2180|
0007cc  f8501025          LDR      r1,[r0,r5,LSL #2]
0007d0  200a              MOVS     r0,#0xa
0007d2  4788              BLX      r1
0007d4  e008              B        |L1.2024|
                  |L1.2006|
;;;780              }
;;;781            } else {                            /* IN Endpoint */
;;;782              if (USB_P_EP[m]) {
0007d6  482b              LDR      r0,|L1.2180|
0007d8  f8500025          LDR      r0,[r0,r5,LSL #2]
0007dc  b120              CBZ      r0,|L1.2024|
;;;783                USB_P_EP[m](USB_EVT_IN_DMA_NDR);
0007de  4829              LDR      r0,|L1.2180|
0007e0  f8501025          LDR      r1,[r0,r5,LSL #2]
0007e4  200b              MOVS     r0,#0xb
0007e6  4788              BLX      r1
                  |L1.2024|
0007e8  1c64              ADDS     r4,r4,#1              ;774
                  |L1.2026|
0007ea  2c20              CMP      r4,#0x20              ;774
0007ec  d3e1              BCC      |L1.1970|
;;;784              }
;;;785            }
;;;786          }
;;;787        }
;;;788        LPC_USB->NDDRIntClr = val;
0007ee  4819              LDR      r0,|L1.2132|
0007f0  3094              ADDS     r0,r0,#0x94
0007f2  6006              STR      r6,[r0,#0]
                  |L1.2036|
;;;789      }
;;;790    
;;;791      if (LPC_USB->DMAIntSt & 0x00000004) {          /* System Error Interrupt */
0007f4  4817              LDR      r0,|L1.2132|
0007f6  3074              ADDS     r0,r0,#0x74
0007f8  6800              LDR      r0,[r0,#0]
0007fa  f0000004          AND      r0,r0,#4
0007fe  b328              CBZ      r0,|L1.2124|
;;;792        val = LPC_USB->SysErrIntSt;
000800  4814              LDR      r0,|L1.2132|
000802  309c              ADDS     r0,r0,#0x9c
000804  6806              LDR      r6,[r0,#0]
;;;793        for (n = 2; n < USB_EP_NUM; n++) {      /* Check All Endpoints */
000806  2402              MOVS     r4,#2
000808  e01b              B        |L1.2114|
                  |L1.2058|
;;;794          if (val & (1 << n)) {
00080a  2001              MOVS     r0,#1
00080c  40a0              LSLS     r0,r0,r4
00080e  4030              ANDS     r0,r0,r6
000810  b1b0              CBZ      r0,|L1.2112|
;;;795            m = n >> 1;
000812  0865              LSRS     r5,r4,#1
;;;796            if ((n & 1) == 0) {                 /* OUT Endpoint */
000814  f0040001          AND      r0,r4,#1
000818  b948              CBNZ     r0,|L1.2094|
;;;797              if (USB_P_EP[m]) {
00081a  481a              LDR      r0,|L1.2180|
00081c  f8500025          LDR      r0,[r0,r5,LSL #2]
000820  b170              CBZ      r0,|L1.2112|
;;;798                USB_P_EP[m](USB_EVT_OUT_DMA_ERR);
000822  4818              LDR      r0,|L1.2180|
000824  f8501025          LDR      r1,[r0,r5,LSL #2]
000828  200c              MOVS     r0,#0xc
00082a  4788              BLX      r1
00082c  e008              B        |L1.2112|
                  |L1.2094|
;;;799              }
;;;800            } else {                            /* IN Endpoint */
;;;801              if (USB_P_EP[m]) {
00082e  4815              LDR      r0,|L1.2180|
000830  f8500025          LDR      r0,[r0,r5,LSL #2]
000834  b120              CBZ      r0,|L1.2112|
;;;802                USB_P_EP[m](USB_EVT_IN_DMA_ERR);
000836  4813              LDR      r0,|L1.2180|
000838  f8501025          LDR      r1,[r0,r5,LSL #2]
00083c  200d              MOVS     r0,#0xd
00083e  4788              BLX      r1
                  |L1.2112|
000840  1c64              ADDS     r4,r4,#1              ;793
                  |L1.2114|
000842  2c20              CMP      r4,#0x20              ;793
000844  d3e1              BCC      |L1.2058|
;;;803              }
;;;804            }
;;;805          }
;;;806        }
;;;807        LPC_USB->SysErrIntClr = val;
000846  4803              LDR      r0,|L1.2132|
000848  30a0              ADDS     r0,r0,#0xa0
00084a  6006              STR      r6,[r0,#0]
                  |L1.2124|
;;;808      }
;;;809    
;;;810    #endif /* USB_DMA */
;;;811    
;;;812    isr_end:
00084c  bf00              NOP      
                  |L1.2126|
;;;813      return;
;;;814    }
00084e  e8bd87f0          POP      {r4-r10,pc}
000852  0000              DCW      0x0000
                  |L1.2132|
                          DCD      0x5000c21c
                  |L1.2136|
                          DCD      0x00fa0500
                  |L1.2140|
                          DCD      udca
                  |L1.2144|
                          DCD      DDAdr
                  |L1.2148|
                          DCD      DDSz
                  |L1.2152|
                          DCD      DDMemMap
                  |L1.2156|
                          DCD      UDCA
                  |L1.2160|
                          DCD      0x00f50500
                  |L1.2164|
                          DCD      0x00f50200
                  |L1.2168|
                          DCD      0x00fe0500
                  |L1.2172|
                          DCD      0x00fe0200
                  |L1.2176|
                          DCD      0x5000c000
                  |L1.2180|
                          DCD      USB_P_EP
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  udca
                          %        128

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  DDAdr
                          DCD      0x20080080
                          DCD      0x20080180
                  DDSz
                          DCD      0x00000010
                          DCD      0x00000014

                          AREA ||.data||, DATA, ALIGN=2

                  DDMemMap
                          %        8

                          AREA USB_RAM, DATA, NOINIT, ALIGN=2

                  UDCA
                          %        128
                  DD_NISO_Mem
                          %        256
                  DD_ISO_Mem
                          %        160
