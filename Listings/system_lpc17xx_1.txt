; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\objects\system_lpc17xx_1.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\system_lpc17xx_1.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\RTE\_Target_1 -IC:\Users\ECBME\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\ECBME\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.6.0\Device\Include -D__UVISION_VERSION=531 -D_RTE_ -DLPC175x_6x -D_RTE_ --omf_browse=.\objects\system_lpc17xx_1.crf system_LPC17xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;455     *         retrieved from cpu registers.
;;;456     */void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;457    {
;;;458      /* Determine clock frequency according to clock register values             */
;;;459      if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
000004  48f7              LDR      r0,|L1.996|
000006  6800              LDR      r0,[r0,#0]
000008  f3c06001          UBFX     r0,r0,#24,#2
00000c  2803              CMP      r0,#3
00000e  d17d              BNE      |L1.268|
;;;460        switch (LPC_SC->CLKSRCSEL & 0x03) {
000010  48f4              LDR      r0,|L1.996|
000012  3084              ADDS     r0,r0,#0x84
000014  6800              LDR      r0,[r0,#0]
000016  f0000003          AND      r0,r0,#3
00001a  b130              CBZ      r0,|L1.42|
00001c  2801              CMP      r0,#1
00001e  d030              BEQ      |L1.130|
000020  2802              CMP      r0,#2
000022  d059              BEQ      |L1.216|
000024  2803              CMP      r0,#3
000026  d12b              BNE      |L1.128|
000028  e000              B        |L1.44|
                  |L1.42|
;;;461          case 0:                                /* Int. RC oscillator => PLL0    */
;;;462          case 3:                                /* Reserved, default to Int. RC  */
00002a  bf00              NOP      
                  |L1.44|
;;;463            SystemCoreClock = (IRC_OSC *
00002c  48ed              LDR      r0,|L1.996|
00002e  6800              LDR      r0,[r0,#0]
000030  f3c04007          UBFX     r0,r0,#16,#8
000034  1c44              ADDS     r4,r0,#1
000036  2102              MOVS     r1,#2
000038  48ea              LDR      r0,|L1.996|
00003a  3888              SUBS     r0,r0,#0x88
00003c  f8d00088          LDR      r0,[r0,#0x88]
000040  f3c0000e          UBFX     r0,r0,#0,#15
000044  1c40              ADDS     r0,r0,#1
000046  fba10100          UMULL    r0,r1,r1,r0
00004a  4be7              LDR      r3,|L1.1000|
00004c  f04f0c00          MOV      r12,#0
000050  fba07903          UMULL    r7,r9,r0,r3
000054  fb019103          MLA      r1,r1,r3,r9
000058  fb00110c          MLA      r1,r0,r12,r1
00005c  4622              MOV      r2,r4
00005e  4663              MOV      r3,r12
000060  4638              MOV      r0,r7
000062  f7fffffe          BL       __aeabi_uldivmod
000066  4605              MOV      r5,r0
000068  48de              LDR      r0,|L1.996|
00006a  307c              ADDS     r0,r0,#0x7c
00006c  6800              LDR      r0,[r0,#0]
00006e  b2c0              UXTB     r0,r0
000070  1c44              ADDS     r4,r0,#1
000072  4622              MOV      r2,r4
000074  2300              MOVS     r3,#0
000076  4628              MOV      r0,r5
000078  f7fffffe          BL       __aeabi_uldivmod
00007c  49db              LDR      r1,|L1.1004|
00007e  6008              STR      r0,[r1,#0]  ; SystemCoreClock
                  |L1.128|
;;;464                              ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
;;;465                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
;;;466                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;467            break;
000080  e056              B        |L1.304|
                  |L1.130|
;;;468          case 1:                                /* Main oscillator => PLL0       */
;;;469            SystemCoreClock = (OSC_CLK *
000082  48d8              LDR      r0,|L1.996|
000084  6800              LDR      r0,[r0,#0]
000086  f3c04007          UBFX     r0,r0,#16,#8
00008a  1c44              ADDS     r4,r0,#1
00008c  2102              MOVS     r1,#2
00008e  48d5              LDR      r0,|L1.996|
000090  3888              SUBS     r0,r0,#0x88
000092  f8d00088          LDR      r0,[r0,#0x88]
000096  f3c0000e          UBFX     r0,r0,#0,#15
00009a  1c40              ADDS     r0,r0,#1
00009c  fba11000          UMULL    r1,r0,r1,r0
0000a0  4ad3              LDR      r2,|L1.1008|
0000a2  f04f0c00          MOV      r12,#0
0000a6  fba17902          UMULL    r7,r9,r1,r2
0000aa  fb009002          MLA      r0,r0,r2,r9
0000ae  fb01010c          MLA      r1,r1,r12,r0
0000b2  4622              MOV      r2,r4
0000b4  4663              MOV      r3,r12
0000b6  4638              MOV      r0,r7
0000b8  f7fffffe          BL       __aeabi_uldivmod
0000bc  4605              MOV      r5,r0
0000be  48c9              LDR      r0,|L1.996|
0000c0  307c              ADDS     r0,r0,#0x7c
0000c2  6800              LDR      r0,[r0,#0]
0000c4  b2c0              UXTB     r0,r0
0000c6  1c44              ADDS     r4,r0,#1
0000c8  4622              MOV      r2,r4
0000ca  2300              MOVS     r3,#0
0000cc  4628              MOV      r0,r5
0000ce  f7fffffe          BL       __aeabi_uldivmod
0000d2  49c6              LDR      r1,|L1.1004|
0000d4  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;470                              ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
;;;471                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
;;;472                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;473            break;
0000d6  e02b              B        |L1.304|
                  |L1.216|
;;;474          case 2:                                /* RTC oscillator => PLL0        */
;;;475            SystemCoreClock = (RTC_CLK *
0000d8  48c2              LDR      r0,|L1.996|
0000da  6800              LDR      r0,[r0,#0]
0000dc  f3c04007          UBFX     r0,r0,#16,#8
0000e0  1c44              ADDS     r4,r0,#1
0000e2  2102              MOVS     r1,#2
0000e4  48bf              LDR      r0,|L1.996|
0000e6  3888              SUBS     r0,r0,#0x88
0000e8  f8d00088          LDR      r0,[r0,#0x88]
0000ec  f3c0000e          UBFX     r0,r0,#0,#15
0000f0  1c40              ADDS     r0,r0,#1
0000f2  fba11200          UMULL    r1,r2,r1,r0
0000f6  f44f4000          MOV      r0,#0x8000
0000fa  2300              MOVS     r3,#0
0000fc  fba17900          UMULL    r7,r9,r1,r0
000100  fb029000          MLA      r0,r2,r0,r9
000104  fb010103          MLA      r1,r1,r3,r0
000108  4622              MOV      r2,r4
00010a  e000              B        |L1.270|
                  |L1.268|
00010c  e011              B        |L1.306|
                  |L1.270|
00010e  4638              MOV      r0,r7
000110  f7fffffe          BL       __aeabi_uldivmod
000114  4605              MOV      r5,r0
000116  48b3              LDR      r0,|L1.996|
000118  307c              ADDS     r0,r0,#0x7c
00011a  6800              LDR      r0,[r0,#0]
00011c  b2c0              UXTB     r0,r0
00011e  1c44              ADDS     r4,r0,#1
000120  4622              MOV      r2,r4
000122  2300              MOVS     r3,#0
000124  4628              MOV      r0,r5
000126  f7fffffe          BL       __aeabi_uldivmod
00012a  49b0              LDR      r1,|L1.1004|
00012c  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;476                              ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
;;;477                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
;;;478                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;479            break;
00012e  bf00              NOP      
                  |L1.304|
000130  e030              B        |L1.404|
                  |L1.306|
;;;480        }
;;;481      } else {
;;;482        switch (LPC_SC->CLKSRCSEL & 0x03) {
000132  48ac              LDR      r0,|L1.996|
000134  3084              ADDS     r0,r0,#0x84
000136  6800              LDR      r0,[r0,#0]
000138  f0000003          AND      r0,r0,#3
00013c  b130              CBZ      r0,|L1.332|
00013e  2801              CMP      r0,#1
000140  d010              BEQ      |L1.356|
000142  2802              CMP      r0,#2
000144  d019              BEQ      |L1.378|
000146  2803              CMP      r0,#3
000148  d123              BNE      |L1.402|
00014a  e000              B        |L1.334|
                  |L1.332|
;;;483          case 0:                                /* Int. RC oscillator => PLL0    */
;;;484          case 3:                                /* Reserved, default to Int. RC  */
00014c  bf00              NOP      
                  |L1.334|
;;;485            SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
00014e  48a5              LDR      r0,|L1.996|
000150  307c              ADDS     r0,r0,#0x7c
000152  6800              LDR      r0,[r0,#0]
000154  b2c0              UXTB     r0,r0
000156  1c40              ADDS     r0,r0,#1
000158  49a3              LDR      r1,|L1.1000|
00015a  fbb1f0f0          UDIV     r0,r1,r0
00015e  49a3              LDR      r1,|L1.1004|
000160  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;486            break;
000162  e016              B        |L1.402|
                  |L1.356|
;;;487          case 1:                                /* Main oscillator => PLL0       */
;;;488            SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
000164  489f              LDR      r0,|L1.996|
000166  307c              ADDS     r0,r0,#0x7c
000168  6800              LDR      r0,[r0,#0]
00016a  b2c0              UXTB     r0,r0
00016c  1c40              ADDS     r0,r0,#1
00016e  49a0              LDR      r1,|L1.1008|
000170  fbb1f0f0          UDIV     r0,r1,r0
000174  499d              LDR      r1,|L1.1004|
000176  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;489            break;
000178  e00b              B        |L1.402|
                  |L1.378|
;;;490          case 2:                                /* RTC oscillator => PLL0        */
;;;491            SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
00017a  489a              LDR      r0,|L1.996|
00017c  307c              ADDS     r0,r0,#0x7c
00017e  6800              LDR      r0,[r0,#0]
000180  b2c0              UXTB     r0,r0
000182  1c40              ADDS     r0,r0,#1
000184  f44f4100          MOV      r1,#0x8000
000188  fbb1f0f0          UDIV     r0,r1,r0
00018c  4997              LDR      r1,|L1.1004|
00018e  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;492            break;
000190  bf00              NOP      
                  |L1.402|
000192  bf00              NOP                            ;486
                  |L1.404|
;;;493        }
;;;494      }
;;;495    
;;;496    }
000194  e8bd87f0          POP      {r4-r10,pc}
;;;497    
                          ENDP

                  SystemInit PROC
;;;506     */
;;;507    void SystemInit (void)
000198  2020              MOVS     r0,#0x20
;;;508    {
;;;509    #if (CLOCK_SETUP)                       /* Clock Setup                        */
;;;510      LPC_SC->SCS       = SCS_Val;
00019a  4996              LDR      r1,|L1.1012|
00019c  6008              STR      r0,[r1,#0]
;;;511      if (LPC_SC->SCS & (1 << 5)) {             /* If Main Oscillator is enabled  */
00019e  4891              LDR      r0,|L1.996|
0001a0  3888              SUBS     r0,r0,#0x88
0001a2  f8d001a0          LDR      r0,[r0,#0x1a0]
0001a6  f0000020          AND      r0,r0,#0x20
0001aa  b130              CBZ      r0,|L1.442|
;;;512        while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
0001ac  bf00              NOP      
                  |L1.430|
0001ae  4891              LDR      r0,|L1.1012|
0001b0  6800              LDR      r0,[r0,#0]
0001b2  f0000040          AND      r0,r0,#0x40
0001b6  2800              CMP      r0,#0
0001b8  d0f9              BEQ      |L1.430|
                  |L1.442|
;;;513      }
;;;514    
;;;515      LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
0001ba  2003              MOVS     r0,#3
0001bc  4989              LDR      r1,|L1.996|
0001be  317c              ADDS     r1,r1,#0x7c
0001c0  6008              STR      r0,[r1,#0]
;;;516      /* Periphral clock must be selected before PLL0 enabling and connecting
;;;517       * - according errata.lpc1768-16.March.2010 -
;;;518       */
;;;519      LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
0001c2  2000              MOVS     r0,#0
0001c4  4987              LDR      r1,|L1.996|
0001c6  3988              SUBS     r1,r1,#0x88
0001c8  f8c101a8          STR      r0,[r1,#0x1a8]
;;;520      LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
0001cc  4989              LDR      r1,|L1.1012|
0001ce  310c              ADDS     r1,r1,#0xc
0001d0  6008              STR      r0,[r1,#0]
;;;521    
;;;522      LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source sysclk / PLL0  */
0001d2  2001              MOVS     r0,#1
0001d4  4983              LDR      r1,|L1.996|
0001d6  3184              ADDS     r1,r1,#0x84
0001d8  6008              STR      r0,[r1,#0]
;;;523    
;;;524    #if (PLL0_SETUP)
;;;525      LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
0001da  4887              LDR      r0,|L1.1016|
0001dc  4981              LDR      r1,|L1.996|
0001de  1f09              SUBS     r1,r1,#4
0001e0  6008              STR      r0,[r1,#0]
;;;526      LPC_SC->PLL0FEED  = 0xAA;
0001e2  20aa              MOVS     r0,#0xaa
0001e4  497f              LDR      r1,|L1.996|
0001e6  1d09              ADDS     r1,r1,#4
0001e8  6008              STR      r0,[r1,#0]
;;;527      LPC_SC->PLL0FEED  = 0x55;
0001ea  2055              MOVS     r0,#0x55
0001ec  6008              STR      r0,[r1,#0]
;;;528    
;;;529      LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
0001ee  2001              MOVS     r0,#1
0001f0  497c              LDR      r1,|L1.996|
0001f2  3908              SUBS     r1,r1,#8
0001f4  6008              STR      r0,[r1,#0]
;;;530      LPC_SC->PLL0FEED  = 0xAA;
0001f6  20aa              MOVS     r0,#0xaa
0001f8  497a              LDR      r1,|L1.996|
0001fa  1d09              ADDS     r1,r1,#4
0001fc  6008              STR      r0,[r1,#0]
;;;531      LPC_SC->PLL0FEED  = 0x55;
0001fe  2055              MOVS     r0,#0x55
000200  4978              LDR      r1,|L1.996|
000202  3988              SUBS     r1,r1,#0x88
000204  f8c1008c          STR      r0,[r1,#0x8c]
;;;532      while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
000208  bf00              NOP      
                  |L1.522|
00020a  4876              LDR      r0,|L1.996|
00020c  6800              LDR      r0,[r0,#0]
00020e  f0006080          AND      r0,r0,#0x4000000
000212  2800              CMP      r0,#0
000214  d0f9              BEQ      |L1.522|
;;;533    
;;;534      LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
000216  2003              MOVS     r0,#3
000218  4972              LDR      r1,|L1.996|
00021a  3908              SUBS     r1,r1,#8
00021c  6008              STR      r0,[r1,#0]
;;;535      LPC_SC->PLL0FEED  = 0xAA;
00021e  20aa              MOVS     r0,#0xaa
000220  4970              LDR      r1,|L1.996|
000222  3988              SUBS     r1,r1,#0x88
000224  f8c1008c          STR      r0,[r1,#0x8c]
;;;536      LPC_SC->PLL0FEED  = 0x55;
000228  2055              MOVS     r0,#0x55
00022a  496e              LDR      r1,|L1.996|
00022c  1d09              ADDS     r1,r1,#4
00022e  6008              STR      r0,[r1,#0]
;;;537      while ((LPC_SC->PLL0STAT & ((1<<25) | (1<<24))) != ((1<<25) | (1<<24)));  /* Wait for PLLC0_STAT & PLLE0_STAT */
000230  bf00              NOP      
                  |L1.562|
000232  486c              LDR      r0,|L1.996|
000234  6800              LDR      r0,[r0,#0]
000236  f0007040          AND      r0,r0,#0x3000000
00023a  f1b07f40          CMP      r0,#0x3000000
00023e  d1f8              BNE      |L1.562|
;;;538    #endif
;;;539    
;;;540    #if (PLL1_SETUP)
;;;541      LPC_SC->PLL1CFG   = PLL1CFG_Val;
000240  2023              MOVS     r0,#0x23
000242  4968              LDR      r1,|L1.996|
000244  311c              ADDS     r1,r1,#0x1c
000246  6008              STR      r0,[r1,#0]
;;;542      LPC_SC->PLL1FEED  = 0xAA;
000248  20aa              MOVS     r0,#0xaa
00024a  4966              LDR      r1,|L1.996|
00024c  3988              SUBS     r1,r1,#0x88
00024e  f8c100ac          STR      r0,[r1,#0xac]
;;;543      LPC_SC->PLL1FEED  = 0x55;
000252  2055              MOVS     r0,#0x55
000254  4963              LDR      r1,|L1.996|
000256  3124              ADDS     r1,r1,#0x24
000258  6008              STR      r0,[r1,#0]
;;;544    
;;;545      LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
00025a  2001              MOVS     r0,#1
00025c  4961              LDR      r1,|L1.996|
00025e  3118              ADDS     r1,r1,#0x18
000260  6008              STR      r0,[r1,#0]
;;;546      LPC_SC->PLL1FEED  = 0xAA;
000262  20aa              MOVS     r0,#0xaa
000264  495f              LDR      r1,|L1.996|
000266  3124              ADDS     r1,r1,#0x24
000268  6008              STR      r0,[r1,#0]
;;;547      LPC_SC->PLL1FEED  = 0x55;
00026a  2055              MOVS     r0,#0x55
00026c  495d              LDR      r1,|L1.996|
00026e  3988              SUBS     r1,r1,#0x88
000270  f8c100ac          STR      r0,[r1,#0xac]
;;;548      while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
000274  bf00              NOP      
                  |L1.630|
000276  485b              LDR      r0,|L1.996|
000278  3020              ADDS     r0,r0,#0x20
00027a  6800              LDR      r0,[r0,#0]
00027c  f4006080          AND      r0,r0,#0x400
000280  2800              CMP      r0,#0
000282  d0f8              BEQ      |L1.630|
;;;549    
;;;550      LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
000284  2003              MOVS     r0,#3
000286  4957              LDR      r1,|L1.996|
000288  3118              ADDS     r1,r1,#0x18
00028a  6008              STR      r0,[r1,#0]
;;;551      LPC_SC->PLL1FEED  = 0xAA;
00028c  20aa              MOVS     r0,#0xaa
00028e  4955              LDR      r1,|L1.996|
000290  3988              SUBS     r1,r1,#0x88
000292  f8c100ac          STR      r0,[r1,#0xac]
;;;552      LPC_SC->PLL1FEED  = 0x55;
000296  2055              MOVS     r0,#0x55
000298  4952              LDR      r1,|L1.996|
00029a  3124              ADDS     r1,r1,#0x24
00029c  6008              STR      r0,[r1,#0]
;;;553      while ((LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))) != ((1<< 9) | (1<< 8)));  /* Wait for PLLC1_STAT & PLLE1_STAT */
00029e  bf00              NOP      
                  |L1.672|
0002a0  4850              LDR      r0,|L1.996|
0002a2  3020              ADDS     r0,r0,#0x20
0002a4  6800              LDR      r0,[r0,#0]
0002a6  f4007040          AND      r0,r0,#0x300
0002aa  f5b07f40          CMP      r0,#0x300
0002ae  d1f7              BNE      |L1.672|
;;;554    #else
;;;555      LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
;;;556    #endif
;;;557    
;;;558      LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
0002b0  4852              LDR      r0,|L1.1020|
0002b2  494c              LDR      r1,|L1.996|
0002b4  313c              ADDS     r1,r1,#0x3c
0002b6  6008              STR      r0,[r1,#0]
;;;559    
;;;560      LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
0002b8  2000              MOVS     r0,#0
0002ba  494a              LDR      r1,|L1.996|
0002bc  3988              SUBS     r1,r1,#0x88
0002be  f8c101c8          STR      r0,[r1,#0x1c8]
;;;561    #endif
;;;562    
;;;563    #if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
;;;564      LPC_SC->FLASHCFG  = (LPC_SC->FLASHCFG & ~0x0000F000) | FLASHCFG_Val;
0002c2  4608              MOV      r0,r1
0002c4  6800              LDR      r0,[r0,#0]
0002c6  f4204070          BIC      r0,r0,#0xf000
0002ca  f4404080          ORR      r0,r0,#0x4000
0002ce  6008              STR      r0,[r1,#0]
;;;565    #endif
;;;566    }
0002d0  4770              BX       lr
;;;567    
                          ENDP

                  SystemClockUpdate PROC
;;;586    
;;;587    void SystemClockUpdate (void) {
0002d2  4844              LDR      r0,|L1.996|
;;;588    	/* Determine clock frequency according to clock register values             */
;;;589    	if (((LPC_SC->PLL0STAT >> 24)&3)==3) {/* If PLL0 enabled and connected      */
0002d4  6800              LDR      r0,[r0,#0]
0002d6  f3c06001          UBFX     r0,r0,#24,#2
0002da  2803              CMP      r0,#3
0002dc  d15e              BNE      |L1.924|
;;;590    		switch (LPC_SC->CLKSRCSEL & 0x03) {
0002de  4841              LDR      r0,|L1.996|
0002e0  3084              ADDS     r0,r0,#0x84
0002e2  6800              LDR      r0,[r0,#0]
0002e4  f0000003          AND      r0,r0,#3
0002e8  b130              CBZ      r0,|L1.760|
0002ea  2801              CMP      r0,#1
0002ec  d020              BEQ      |L1.816|
0002ee  2802              CMP      r0,#2
0002f0  d039              BEQ      |L1.870|
0002f2  2803              CMP      r0,#3
0002f4  d151              BNE      |L1.922|
0002f6  e000              B        |L1.762|
                  |L1.760|
;;;591    			case 0:                           /* Internal RC oscillator => PLL0     */
;;;592    			case 3:                           /* Reserved, default to Internal RC   */
0002f8  bf00              NOP      
                  |L1.762|
;;;593    				SystemFrequency = (IRC_OSC * 
0002fa  483a              LDR      r0,|L1.996|
0002fc  6800              LDR      r0,[r0,#0]
0002fe  f3c0000e          UBFX     r0,r0,#0,#15
000302  1c40              ADDS     r0,r0,#1
000304  0041              LSLS     r1,r0,#1
000306  4837              LDR      r0,|L1.996|
000308  3888              SUBS     r0,r0,#0x88
00030a  f8d00088          LDR      r0,[r0,#0x88]
00030e  f3c04007          UBFX     r0,r0,#16,#8
000312  1c40              ADDS     r0,r0,#1
000314  fbb1f0f0          UDIV     r0,r1,r0
000318  4933              LDR      r1,|L1.1000|
00031a  4348              MULS     r0,r1,r0
00031c  4931              LDR      r1,|L1.996|
00031e  317c              ADDS     r1,r1,#0x7c
000320  6809              LDR      r1,[r1,#0]
000322  b2c9              UXTB     r1,r1
000324  1c49              ADDS     r1,r1,#1
000326  fbb0f0f1          UDIV     r0,r0,r1
00032a  4935              LDR      r1,|L1.1024|
00032c  6008              STR      r0,[r1,#0]  ; SystemFrequency
;;;594    				                  (((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1))) /
;;;595    				                  (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1))   /
;;;596    				                  ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;597    				break;
00032e  e034              B        |L1.922|
                  |L1.816|
;;;598    			case 1:                           /* Main oscillator => PLL0            */
;;;599    				SystemFrequency = (OSC_CLK * 
000330  482c              LDR      r0,|L1.996|
000332  6800              LDR      r0,[r0,#0]
000334  f3c0000e          UBFX     r0,r0,#0,#15
000338  1c40              ADDS     r0,r0,#1
00033a  0041              LSLS     r1,r0,#1
00033c  4829              LDR      r0,|L1.996|
00033e  3888              SUBS     r0,r0,#0x88
000340  f8d00088          LDR      r0,[r0,#0x88]
000344  f3c04007          UBFX     r0,r0,#16,#8
000348  1c40              ADDS     r0,r0,#1
00034a  fbb1f0f0          UDIV     r0,r1,r0
00034e  4928              LDR      r1,|L1.1008|
000350  4348              MULS     r0,r1,r0
000352  4924              LDR      r1,|L1.996|
000354  317c              ADDS     r1,r1,#0x7c
000356  6809              LDR      r1,[r1,#0]
000358  b2c9              UXTB     r1,r1
00035a  1c49              ADDS     r1,r1,#1
00035c  fbb0f0f1          UDIV     r0,r0,r1
000360  4927              LDR      r1,|L1.1024|
000362  6008              STR      r0,[r1,#0]  ; SystemFrequency
;;;600    				                  (((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1))) /
;;;601    				                  (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1))   /
;;;602    				                  ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;603    				break;
000364  e019              B        |L1.922|
                  |L1.870|
;;;604    			case 2:                           /* RTC oscillator => PLL0             */
;;;605    				SystemFrequency = (RTC_CLK * 
000366  481f              LDR      r0,|L1.996|
000368  6800              LDR      r0,[r0,#0]
00036a  f3c0000e          UBFX     r0,r0,#0,#15
00036e  1c40              ADDS     r0,r0,#1
000370  0041              LSLS     r1,r0,#1
000372  481c              LDR      r0,|L1.996|
000374  3888              SUBS     r0,r0,#0x88
000376  f8d00088          LDR      r0,[r0,#0x88]
00037a  f3c04007          UBFX     r0,r0,#16,#8
00037e  1c40              ADDS     r0,r0,#1
000380  fbb1f0f0          UDIV     r0,r1,r0
000384  03c1              LSLS     r1,r0,#15
000386  4817              LDR      r0,|L1.996|
000388  307c              ADDS     r0,r0,#0x7c
00038a  6800              LDR      r0,[r0,#0]
00038c  b2c0              UXTB     r0,r0
00038e  1c40              ADDS     r0,r0,#1
000390  fbb1f0f0          UDIV     r0,r1,r0
000394  491a              LDR      r1,|L1.1024|
000396  6008              STR      r0,[r1,#0]  ; SystemFrequency
;;;606    				                  (((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1))) /
;;;607    				                  (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1))   /
;;;608    				                  ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;609    				break;
000398  bf00              NOP      
                  |L1.922|
00039a  e03f              B        |L1.1052|
                  |L1.924|
;;;610    		}
;;;611    		
;;;612    	} else {
;;;613    		switch (LPC_SC->CLKSRCSEL & 0x03) {
00039c  4811              LDR      r0,|L1.996|
00039e  3084              ADDS     r0,r0,#0x84
0003a0  6800              LDR      r0,[r0,#0]
0003a2  f0000003          AND      r0,r0,#3
0003a6  b130              CBZ      r0,|L1.950|
0003a8  2801              CMP      r0,#1
0003aa  d010              BEQ      |L1.974|
0003ac  2802              CMP      r0,#2
0003ae  d029              BEQ      |L1.1028|
0003b0  2803              CMP      r0,#3
0003b2  d132              BNE      |L1.1050|
0003b4  e000              B        |L1.952|
                  |L1.950|
;;;614    			case 0:                           /* Internal RC oscillator => PLL0     */
;;;615    			case 3:                           /* Reserved, default to Internal RC   */
0003b6  bf00              NOP      
                  |L1.952|
;;;616    				SystemFrequency = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
0003b8  480a              LDR      r0,|L1.996|
0003ba  307c              ADDS     r0,r0,#0x7c
0003bc  6800              LDR      r0,[r0,#0]
0003be  b2c0              UXTB     r0,r0
0003c0  1c40              ADDS     r0,r0,#1
0003c2  4909              LDR      r1,|L1.1000|
0003c4  fbb1f0f0          UDIV     r0,r1,r0
0003c8  490d              LDR      r1,|L1.1024|
0003ca  6008              STR      r0,[r1,#0]  ; SystemFrequency
;;;617    				break;
0003cc  e025              B        |L1.1050|
                  |L1.974|
;;;618    			case 1:                           /* Main oscillator => PLL0            */
;;;619    				SystemFrequency = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
0003ce  4805              LDR      r0,|L1.996|
0003d0  307c              ADDS     r0,r0,#0x7c
0003d2  6800              LDR      r0,[r0,#0]
0003d4  b2c0              UXTB     r0,r0
0003d6  1c40              ADDS     r0,r0,#1
0003d8  4905              LDR      r1,|L1.1008|
0003da  fbb1f0f0          UDIV     r0,r1,r0
0003de  4908              LDR      r1,|L1.1024|
0003e0  6008              STR      r0,[r1,#0]  ; SystemFrequency
;;;620    				break;
0003e2  e01a              B        |L1.1050|
                  |L1.996|
                          DCD      0x400fc088
                  |L1.1000|
                          DCD      0x003d0900
                  |L1.1004|
                          DCD      SystemCoreClock
                  |L1.1008|
                          DCD      0x00b71b00
                  |L1.1012|
                          DCD      0x400fc1a0
                  |L1.1016|
                          DCD      0x00050063
                  |L1.1020|
                          DCD      0x042887de
                  |L1.1024|
                          DCD      SystemFrequency
                  |L1.1028|
;;;621    			case 2:                           /* RTC oscillator => PLL0             */
;;;622    				SystemFrequency = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
000404  4806              LDR      r0,|L1.1056|
000406  6800              LDR      r0,[r0,#0]
000408  b2c0              UXTB     r0,r0
00040a  1c40              ADDS     r0,r0,#1
00040c  f44f4100          MOV      r1,#0x8000
000410  fbb1f0f0          UDIV     r0,r1,r0
000414  4903              LDR      r1,|L1.1060|
000416  6008              STR      r0,[r1,#0]  ; SystemFrequency
;;;623    				break;
000418  bf00              NOP      
                  |L1.1050|
00041a  bf00              NOP                            ;617
                  |L1.1052|
;;;624    		}
;;;625    	}
;;;626    }
00041c  4770              BX       lr
;;;627    /**
                          ENDP

00041e  0000              DCW      0x0000
                  |L1.1056|
                          DCD      0x400fc104
                  |L1.1060|
                          DCD      SystemFrequency

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x05f5e100
                  SystemFrequency
                          DCD      0x003d0900
