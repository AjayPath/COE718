L 1 "Blinky.c"
N/*----------------------------------------------------------------------------
N * Name:    Blinky.c
N * Purpose: LED Flasher and Graphic Demo
N * Note(s): 
N *----------------------------------------------------------------------------
N * This file is part of the uVision/ARM development tools.
N * This software may only be used under the terms of a valid, current,
N * end user licence from KEIL for a compatible version of KEIL software
N * development tools. Nothing else gives you the right to use this software.
N *
N * This software is supplied "AS IS" without warranties of any kind.
N *
N * Copyright (c) 2008-2011 Keil - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N#include <stdio.h>   
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdio.h" 1
N/* stdio.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.9 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.        */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: sdouglas $
N */
N
N/*
N * stdio.h declares two types, several macros, and many functions for
N * performing input and output. For a discussion on Streams and Files
N * refer to sections 4.9.2 and 4.9.3 in the above ANSI draft, or to a
N * modern textbook on C.
N */
N
N#ifndef __stdio_h
N#define __stdio_h
N#define __ARMCLIB_VERSION 5060037
N
N/*
N * Depending on compiler version __int64 or __INT64_TYPE__ should be defined.
N */
N#ifndef __int64
N  #ifdef __INT64_TYPE__
S    #define __int64 __INT64_TYPE__
N  #endif
N  /* On some architectures neither of these may be defined - if so, fall
N     through and error out if used. */
N#endif
N
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STDIO_DECLS
N  #define __STDIO_DECLS
N
N    #undef __CLIBNS
N    #ifdef __cplusplus
S      namespace std {
S      #define __CLIBNS ::std::
S        extern "C" {
N    #else /* ndef __cplusplus */
N      #define __CLIBNS
N    #endif /* ndef __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__size_t)
X#if 0L || !0L || !0L
N /* always defined in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __size_t 1
N  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N/* ANSI forbids va_list to be defined here */
N/* keep in step with <stdarg.h> and <wchar.h> */
N#if !defined(__va_list) && (defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__va_list_defined))
X#if !0L && (0L || !0L || !0L)
N/* always defined in C++ and non-strict C for consistency of debug info */
N  #ifdef __clang__
S    typedef __builtin_va_list __va_list;
N  #else
N    typedef struct __va_list __va_list;
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __va_list_defined 1
N  #endif
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain compliant versions of the printf
N    * and scanf families of functions
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Ntypedef struct __fpos_t_struct {
N    unsigned __int64 __pos;
N    /*
N     * this structure is equivalent to an mbstate_t, but we're not
N     * allowed to actually define the type name `mbstate_t' within
N     * stdio.h
N     */
N    struct {
N        unsigned int __state1, __state2;
N    } __mbstate;
N} fpos_t;
N   /*
N    * fpos_t is an object capable of recording all information needed to
N    * specify uniquely every position within a file.
N    */
N
N#define _SYS_OPEN 16
N   /* _SYS_OPEN defines a limit on the number of open files that is imposed
N    * by this C library
N    */
N
Ntypedef struct __FILE FILE;
N   /*
N    * FILE is an object capable of recording all information needed to control
N    * a stream, such as its file position indicator, a pointer to its
N    * associated buffer, an error indicator that records whether a read/write
N    * error has occurred and an end-of-file indicator that records whether the
N    * end-of-file has been reached.
N    * Its structure is not made known to library clients.
N    */
N
N#if defined(__STRICT_ANSI__) && !__FILE_INCOMPLETE
X#if 0L && !__FILE_INCOMPLETE
Sstruct __FILE {
S    union {
S        long __FILE_alignment;
S#ifdef __TARGET_ARCH_AARCH64
S        char __FILE_size[136];
S#else /* __TARGET_ARCH_AARCH64 */
S        char __FILE_size[84];
S#endif /* __TARGET_ARCH_AARCH64 */
S    } __FILE_opaque;
S};
S    /*
S     * FILE must be an object type (C99 - 7.19.1) and an object type fully
S     * describes an object [including its static size] (C99 - 6.2.5).
S     * This definition is a placeholder which matches the struct __FILE in
S     * size and alignment as used internally by libc.
S     */
N#endif
N
N
Nextern FILE __stdin, __stdout, __stderr;
Nextern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S#define stdin  (__CLIBNS __aeabi_stdin)
S   /* pointer to a FILE object associated with standard input stream */
S#define stdout (__CLIBNS __aeabi_stdout)
S   /* pointer to a FILE object associated with standard output stream */
S#define stderr (__CLIBNS __aeabi_stderr)
S   /* pointer to a FILE object associated with standard error stream */
Sextern const int __aeabi_IOFBF;
S#define _IOFBF (__CLIBNS __aeabi_IOFBF)
Sextern const int __aeabi_IONBF;
S#define _IONBF (__CLIBNS __aeabi_IONBF)
Sextern const int __aeabi_IOLBF;
S#define _IOLBF (__CLIBNS __aeabi_IOLBF)
Sextern const int __aeabi_BUFSIZ;
S#define BUFSIZ (__CLIBNS __aeabi_BUFSIZ)
Sextern const int __aeabi_FOPEN_MAX;
S#define FOPEN_MAX (__CLIBNS __aeabi_FOPEN_MAX)
Sextern const int __aeabi_TMP_MAX;
S#define TMP_MAX (__CLIBNS __aeabi_TMP_MAX)
Sextern const int __aeabi_FILENAME_MAX;
S#define FILENAME_MAX (__CLIBNS __aeabi_FILENAME_MAX)
Sextern const int __aeabi_L_tmpnam;
S#define L_tmpnam (__CLIBNS __aeabi_L_tmpnam)
N#else
N#define stdin  (&__CLIBNS __stdin)
N   /* pointer to a FILE object associated with standard input stream */
N#define stdout (&__CLIBNS __stdout)
N   /* pointer to a FILE object associated with standard output stream */
N#define stderr (&__CLIBNS __stderr)
N   /* pointer to a FILE object associated with standard error stream */
N
N#define _IOFBF           0x100 /* fully buffered IO */
N#define _IOLBF           0x200 /* line buffered IO */
N#define _IONBF           0x400 /* unbuffered IO */
N
N    /* Various default file IO buffer sizes */
N#define BUFSIZ       (512)  /* system buffer size (as used by setbuf) */
N
N#define FOPEN_MAX _SYS_OPEN
N   /*
N    * an integral constant expression that is the minimum number of files that
N    * this implementation guarantees can be open simultaneously.
N    */
N
N#define FILENAME_MAX 256
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold the longest filename string
N    */
N#define L_tmpnam FILENAME_MAX
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold a temporary file name string generated by the
N    * tmpnam function.
N    */
N#define TMP_MAX 256
N   /*
N    * an integral constant expression that is the minimum number of unique
N    * file names that shall be generated by the tmpnam function.
N    */
N
N#endif
N
N#define EOF      (-1)
N   /*
N    * negative integral constant, indicates end-of-file, that is, no more input
N    * from a stream.
N    */
N
N#define SEEK_SET 0 /* start of stream (see fseek) */
N#define SEEK_CUR 1 /* current position in stream (see fseek) */
N#define SEEK_END 2 /* end of stream (see fseek) */
N
N    /*
N     * _IOBIN is the flag passed to _sys_write to denote a binary
N     * file.
N     */
N#define _IOBIN            0x04     /* binary stream */
N
N#define __STDIN_BUFSIZ  (64)  /* default stdin buffer size */
N#define __STDOUT_BUFSIZ (64)  /* default stdout buffer size */
N#define __STDERR_BUFSIZ (16)  /* default stderr buffer size */
N
Nextern _ARMABI int remove(const char * /*filename*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the file whose name is the string pointed to by filename to be
N    * removed. Subsequent attempts to open the file will fail, unless it is
N    * created anew. If the file is open, the behaviour of the remove function
N    * is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails.
N    */
Nextern _ARMABI int rename(const char * /*old*/, const char * /*new*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * causes the file whose name is the string pointed to by old to be
N    * henceforth known by the name given by the string pointed to by new. The
N    * file named old is effectively removed. If a file named by the string
N    * pointed to by new exists prior to the call of the rename function, the
N    * behaviour is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails, in which
N    *          case if the file existed previously it is still known by its
N    *          original name.
N    */
Nextern _ARMABI FILE *tmpfile(void);
Xextern __declspec(__nothrow) FILE *tmpfile(void);
N   /*
N    * creates a temporary binary file that will be automatically removed when
N    * it is closed or at program termination. The file is opened for update.
N    * Returns: a pointer to the stream of the file that it created. If the file
N    *          cannot be created, a null pointer is returned.
N    */
Nextern _ARMABI char *tmpnam(char * /*s*/);
Xextern __declspec(__nothrow) char *tmpnam(char *  );
N   /*
N    * generates a string that is not the same as the name of an existing file.
N    * The tmpnam function generates a different string each time it is called,
N    * up to TMP_MAX times. If it is called more than TMP_MAX times, the
N    * behaviour is implementation-defined.
N    * Returns: If the argument is a null pointer, the tmpnam function leaves
N    *          its result in an internal static object and returns a pointer to
N    *          that object. Subsequent calls to the tmpnam function may modify
N    *          the same object. if the argument is not a null pointer, it is
N    *          assumed to point to an array of at least L_tmpnam characters;
N    *          the tmpnam function writes its result in that array and returns
N    *          the argument as its value.
N    */
N
Nextern _ARMABI int fclose(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the stream pointed to by stream to be flushed and the associated
N    * file to be closed. Any unwritten buffered data for the stream are
N    * delivered to the host environment to be written to the file; any unread
N    * buffered data are discarded. The stream is disassociated from the file.
N    * If the associated buffer was automatically allocated, it is deallocated.
N    * Returns: zero if the stream was succesfully closed, or nonzero if any
N    *          errors were detected or if the stream was already closed.
N    */
Nextern _ARMABI int fflush(FILE * /*stream*/);
Xextern __declspec(__nothrow) int fflush(FILE *  );
N   /*
N    * If the stream points to an output or update stream in which the most
N    * recent operation was output, the fflush function causes any unwritten
N    * data for that stream to be delivered to the host environment to be
N    * written to the file. If the stream points to an input or update stream,
N    * the fflush function undoes the effect of any preceding ungetc operation
N    * on the stream.
N    * Returns: nonzero if a write error occurs.
N    */
Nextern _ARMABI FILE *fopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
N                           const char * __restrict /*mode*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * opens the file whose name is the string pointed to by filename, and
N    * associates a stream with it.
N    * The argument mode points to a string beginning with one of the following
N    * sequences:
N    * "r"         open text file for reading
N    * "w"         create text file for writing, or truncate to zero length
N    * "a"         append; open text file or create for writing at eof
N    * "rb"        open binary file for reading
N    * "wb"        create binary file for writing, or truncate to zero length
N    * "ab"        append; open binary file or create for writing at eof
N    * "r+"        open text file for update (reading and writing)
N    * "w+"        create text file for update, or truncate to zero length
N    * "a+"        append; open text file or create for update, writing at eof
N    * "r+b"/"rb+" open binary file for update (reading and writing)
N    * "w+b"/"wb+" create binary file for update, or truncate to zero length
N    * "a+b"/"ab+" append; open binary file or create for update, writing at eof
N    *
N    * Opening a file with read mode ('r' as the first character in the mode
N    * argument) fails if the file does not exist or cannot be read.
N    * Opening a file with append mode ('a' as the first character in the mode
N    * argument) causes all subsequent writes to be forced to the current end of
N    * file, regardless of intervening calls to the fseek function. In some
N    * implementations, opening a binary file with append mode ('b' as the
N    * second or third character in the mode argument) may initially position
N    * the file position indicator beyond the last data written, because of the
N    * NUL padding.
N    * When a file is opened with update mode ('+' as the second or third
N    * character in the mode argument), both input and output may be performed
N    * on the associated stream. However, output may not be directly followed
N    * by input without an intervening call to the fflush fuction or to a file
N    * positioning function (fseek, fsetpos, or rewind), and input be not be
N    * directly followed by output without an intervening call to the fflush
N    * fuction or to a file positioning function, unless the input operation
N    * encounters end-of-file. Opening a file with update mode may open or
N    * create a binary stream in some implementations. When opened, a stream
N    * is fully buffered if and only if it does not refer to an interactive
N    * device. The error and end-of-file indicators for the stream are
N    * cleared.
N    * Returns: a pointer to the object controlling the stream. If the open
N    *          operation fails, fopen returns a null pointer.
N    */
Nextern _ARMABI FILE *freopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
N                    const char * __restrict /*mode*/,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(2,3)));
N   /*
N    * opens the file whose name is the string pointed to by filename and
N    * associates the stream pointed to by stream with it. The mode argument is
N    * used just as in the fopen function.
N    * The freopen function first attempts to close any file that is associated
N    * with the specified stream. Failure to close the file successfully is
N    * ignored. The error and end-of-file indicators for the stream are cleared.
N    * Returns: a null pointer if the operation fails. Otherwise, freopen
N    *          returns the value of the stream.
N    */
Nextern _ARMABI void setbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
N                    char * __restrict /*buf*/) __attribute__((__nonnull__(1)));
N   /*
N    * Except that it returns no value, the setbuf function is equivalent to the
N    * setvbuf function invoked with the values _IOFBF for mode and BUFSIZ for
N    * size, or (if buf is a null pointer), with the value _IONBF for mode.
N    * Returns: no value.
N    */
Nextern _ARMABI int setvbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
N                   char * __restrict /*buf*/,
N                   int /*mode*/, size_t /*size*/) __attribute__((__nonnull__(1)));
N   /*
N    * may be used after the stream pointed to by stream has been associated
N    * with an open file but before it is read or written. The argument mode
N    * determines how stream will be buffered, as follows: _IOFBF causes
N    * input/output to be fully buffered; _IOLBF causes output to be line
N    * buffered (the buffer will be flushed when a new-line character is
N    * written, when the buffer is full, or when input is requested); _IONBF
N    * causes input/output to be completely unbuffered. If buf is not the null
N    * pointer, the array it points to may be used instead of an automatically
N    * allocated buffer (the buffer must have a lifetime at least as great as
N    * the open stream, so the stream should be closed before a buffer that has
N    * automatic storage duration is deallocated upon block exit). The argument
N    * size specifies the size of the array. The contents of the array at any
N    * time are indeterminate.
N    * Returns: zero on success, or nonzero if an invalid value is given for
N    *          mode or size, or if the request cannot be honoured.
N    */
N#pragma __printf_args
Nextern _ARMABI int fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes output to the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies how subsequent arguments are
N    * converted for output. If there are insufficient arguments for the format,
N    * the behaviour is undefined. If the format is exhausted while arguments
N    * remain, the excess arguments are evaluated but otherwise ignored. The
N    * fprintf function returns when the end of the format string is reached.
N    * The format shall be a multibyte character sequence, beginning and ending
N    * in its initial shift state. The format is composed of zero or more
N    * directives: ordinary multibyte characters (not %), which are copied
N    * unchanged to the output stream; and conversion specifiers, each of which
N    * results in fetching zero or more subsequent arguments. Each conversion
N    * specification is introduced by the character %. For a description of the
N    * available conversion specifiers refer to section 4.9.6.1 in the ANSI
N    * draft mentioned at the start of this file or to any modern textbook on C.
N    * The minimum value for the maximum number of characters producable by any
N    * single conversion is at least 509.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, but does not support floating-point formats.
N    * You can use instead of fprintf to improve code size.
N    * Returns: as fprintf.
N    */
N#pragma __printf_args
Nextern _ARMABI int printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fprintf with the argument stdout interposed before the
N    * arguments to printf.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, but does not support floating-point formats.
N    * You can use instead of printf to improve code size.
N    * Returns: as printf.
N    */
N#pragma __printf_args
Nextern _ARMABI int sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. A null character is written at the end of the characters written;
N    * it is not counted as part of the returned sum.
N    * Returns: the number of characters written to the array, not counting the
N    *          terminating null character.
N    */
N#pragma __printf_args
Nextern _ARMABI int _sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, but does not support floating-point formats.
N    * You can use instead of sprintf to improve code size.
N    * Returns: as sprintf.
N    */
N
N#pragma __printf_args
Nextern _ARMABI int __ARM_snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N#pragma __printf_args
Nextern _ARMABI int snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. The argument n specifies the size of the output array, so as to
N    * avoid overflowing the buffer.
N    * A null character is written at the end of the characters written, even
N    * if the formatting was not completed; it is not counted as part of the
N    * returned sum. At most n characters of the output buffer are used,
N    * _including_ the null character.
N    * Returns: the number of characters that would have been written to the
N    *          array, not counting the terminating null character, if the
N    *          array had been big enough. So if the return is >=0 and <n, then
N    *          the entire string was successfully formatted; if the return is
N    *          >=n, the string was truncated (but there is still a null char
N    *          at the end of what was written); if the return is <0, there was
N    *          an error.
N    */
N#endif
N#pragma __printf_args
Nextern _ARMABI int _snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, but does not support floating-point formats.
N    * You can use instead of snprintf to improve code size.
N    * Returns: as snprintf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * reads input from the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies the admissible input sequences
N    * and how thay are to be converted for assignment, using subsequent
N    * arguments as pointers to the objects to receive the converted input. If
N    * there are insufficient arguments for the format, the behaviour is
N    * undefined. If the format is exhausted while arguments remain, the excess
N    * arguments are evaluated but otherwise ignored.
N    * The format is composed of zero or more directives: one or more
N    * white-space characters; an ordinary character (not %); or a conversion
N    * specification. Each conversion specification is introduced by the
N    * character %. For a description of the available conversion specifiers
N    * refer to section 4.9.6.2 in the ANSI draft mentioned at the start of this
N    * file, or to any modern textbook on C.
N    * If end-of-file is encountered during input, conversion is terminated. If
N    * end-of-file occurs before any characters matching the current directive
N    * have been read (other than leading white space, where permitted),
N    * execution of the current directive terminates with an input failure;
N    * otherwise, unless execution of the current directive is terminated with a
N    * matching failure, execution of the following directive (if any) is
N    * terminated with an input failure.
N    * If conversions terminates on a conflicting input character, the offending
N    * input character is left unread in the input strem. Trailing white space
N    * (including new-line characters) is left unread unless matched by a
N    * directive. The success of literal matches and suppressed asignments is
N    * not directly determinable other than via the %n directive.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the fscanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early conflict between an input
N    *          character and the format.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf, but does not support floating-point formats.
N    * You can use instead of fscanf to improve code size.
N    * Returns: as fscanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fscanf with the argument stdin interposed before the
N    * arguments to scanf.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to scanf, but does not support floating-point formats.
N    * You can use instead of scanf to improve code size.
N    * Returns: as scanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int sscanf(const char * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf except that the argument s specifies a string
N    * from which the input is to be obtained, rather than from a stream.
N    * Reaching the end of the string is equivalent to encountering end-of-file
N    * for the fscanf function.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sscanf, but does not support floating-point formats.
N    * You can use instead of sscanf to improve code size.
N    * Returns: as sscanf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N/* C99 additions */
Nextern _ARMABI int vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N#endif
Nextern _ARMABI int _vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int _vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int _vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int __ARM_vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int __ARM_vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N
Nextern _ARMABI int vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, with the variable argument list replaced by arg,
N    * which has been initialised by the va_start macro (and possibly subsequent
N    * va_arg calls). The vprintf function does not invoke the va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int _vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to vprintf, but does not support floating-point formats.
N    * You can use instead of vprintf to improve code size.
N    * Returns: as vprintf.
N    */
Nextern _ARMABI int vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vfprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int vsprintf(char * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters written in the array, not counting the
N    *          terminating null character.
N    */
Nextern _ARMABI int __ARM_vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
Nextern _ARMABI int vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters that would have been written in the
N    *          array, not counting the terminating null character. As
N    *          snprintf.
N    */
N#endif
Nextern _ARMABI int _vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vsprintf, but does not support floating-point formats.
N    * You can use instead of vsprintf to improve code size.
N    * Returns: as vsprintf.
N    */
Nextern _ARMABI int _vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vfprintf, but does not support floating-point formats.
N    * You can use instead of vfprintf to improve code size.
N    * Returns: as vfprintf.
N    */
Nextern _ARMABI int _vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to vsnprintf, but does not support floating-point formats.
N    * You can use instead of vsnprintf to improve code size.
N    * Returns: as vsnprintf.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
N#pragma __printf_args
Nextern _ARMABI int asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N#endif
N#pragma __printf_args
Nextern _ARMABI int __ARM_asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int __ARM_vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N   /*
N    * dynamically allocates a buffer of the right size for the
N    * formatted string, and returns it in (*strp). Formal return value
N    * is the same as any other printf variant, except that it returns
N    * -1 if the buffer could not be allocated.
N    *
N    * (The functions with __ARM_ prefixed names are identical to the
N    * ones without, but are available in all compilation modes without
N    * violating user namespace.)
N    */
N
Nextern _ARMABI int fgetc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the next character (if present) as an unsigned char converted to
N    * an int, from the input stream pointed to by stream, and advances the
N    * associated file position indicator (if defined).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and fgetc returns EOF. If a read error occurs, the error
N    *          indicator is set and fgetc returns EOF.
N    */
Nextern _ARMABI char *fgets(char * __restrict /*s*/, int /*n*/,
Xextern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads at most one less than the number of characters specified by n from
N    * the stream pointed to by stream into the array pointed to by s. No
N    * additional characters are read after a new-line character (which is
N    * retained) or after end-of-file. A null character is written immediately
N    * after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int fputc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * writes the character specified by c (converted to an unsigned char) to
N    * the output stream pointed to by stream, at the position indicated by the
N    * asociated file position indicator (if defined), and advances the
N    * indicator appropriately. If the file position indicator is not defined,
N    * the character is appended to the output stream.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and fputc returns EOF.
N    */
Nextern _ARMABI int fputs(const char * __restrict /*s*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stream.
N    * The terminating null character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int getc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fgetc except that it may be implemented as an unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getc returns EOF. If a read error occurs, the error
N    *          indicator is set and getc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int getchar() { return getc(stdin); }
N#else
N    #define getchar() getc(stdin)
N    extern _ARMABI int (getchar)(void);
X    extern __declspec(__nothrow) int (getchar)(void);
N#endif
N   /*
N    * is equivalent to getc with the argument stdin.
N    * Returns: the next character from the input stream pointed to by stdin.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getchar returns EOF. If a read error occurs, the error
N    *          indicator is set and getchar returns EOF.
N    */
Nextern _ARMABI char *gets(char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * reads characters from the input stream pointed to by stdin into the array
N    * pointed to by s, until end-of-file is encountered or a new-line character
N    * is read. Any new-line character is discarded, and a null character is
N    * written immediately after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int putc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * is equivalent to fputc except that it may be implemented as aan unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int putchar(int __c) { return putc(__c, stdout); }
N#else
N    #define putchar(c) putc(c, stdout)
N    extern _ARMABI int (putchar)(int /*c*/);
X    extern __declspec(__nothrow) int (putchar)(int  );
N#endif
N   /*
N    * is equivalent to putc with the second argument stdout.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
Nextern _ARMABI int puts(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stdout, and
N    * appends a new-line character to the output. The terminating null
N    * character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int ungetc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * pushes the character specified by c (converted to an unsigned char) back
N    * onto the input stream pointed to by stream. The character will be
N    * returned by the next read on that stream. An intervening call to the
N    * fflush function or to a file positioning function (fseek, fsetpos,
N    * rewind) discards any pushed-back characters. The extern _ARMABIal storage
N    * corresponding to the stream is unchanged.
N    * One character pushback is guaranteed. If the unget function is called too
N    * many times on the same stream without an intervening read or file
N    * positioning operation on that stream, the operation may fail.
N    * If the value of c equals that of the macro EOF, the operation fails and
N    * the input stream is unchanged.
N    * A successful call to the ungetc function clears the end-of-file
N    * indicator. The value of the file position indicator after reading or
N    * discarding all pushed-back characters shall be the same as it was before
N    * the characters were pushed back. For a text stream, the value of the file
N    * position indicator after a successful call to the ungetc function is
N    * unspecified until all pushed-back characters are read or discarded. For a
N    * binary stream, the file position indicator is decremented by each
N    * successful call to the ungetc function; if its value was zero before a
N    * call, it is indeterminate after the call.
N    * Returns: the character pushed back after conversion, or EOF if the
N    *          operation fails.
N    */
N
Nextern _ARMABI size_t fread(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fread(void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * reads into the array pointed to by ptr, up to nmemb members whose size is
N    * specified by size, from the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully read. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate. If a partial member is read, its
N    * value is indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.
N    * Returns: the number of members successfully read, which may be less than
N    *          nmemb if a read error or end-of-file is encountered. If size or
N    *          nmemb is zero, fread returns zero and the contents of the array
N    *          and the state of the stream remain unchanged.
N    */
N
Nextern _ARMABI size_t __fread_bytes_avail(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
N                    size_t /*count*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads into the array pointed to by ptr, up to count characters from the
N    * stream pointed to by stream. The file position indicator (if defined)
N    * is advanced by the number of characters successfully read. If an error
N    * occurs, the resulting value of the file position indicator is
N    * indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.  The call will block
N    * only if no characters are available.
N    * Returns: the number of characters successfully read, which may be less than
N    *          count. If count is zero, __fread_bytes_avail returns zero and
N    *          the contents of the array and the state of the stream remain
N    *          unchanged.
N    */
N
Nextern _ARMABI size_t fwrite(const void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * writes, from the array pointed to by ptr up to nmemb members whose size
N    * is specified by size, to the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully written. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate.
N    * Returns: the number of members successfully written, which will be less
N    *          than nmemb only if a write error is encountered.
N    */
N
Nextern _ARMABI int fgetpos(FILE * __restrict /*stream*/, fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * stores the current value of the file position indicator for the stream
N    * pointed to by stream in the object pointed to by pos. The value stored
N    * contains unspecified information usable by the fsetpos function for
N    * repositioning the stream to its position at the time  of the call to the
N    * fgetpos function.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI int fseek(FILE * /*stream*/, long int /*offset*/, int /*whence*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream.
N    * For a binary stream, the new position is at the signed number of
N    * characters specified by offset away from the point specified by whence.
N    * The specified point is the beginning of the file for SEEK_SET, the
N    * current position in the file for SEEK_CUR, or end-of-file for SEEK_END.
N    * A binary stream need not meaningfully support fseek calls with a whence
N    * value of SEEK_END.
N    * For a text stream, either offset shall be zero, or offset shall be a
N    * value returned by an earlier call to the ftell function on the same
N    * stream and whence shall be SEEK_SET.
N    * The fseek function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fseek call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: nonzero only for a request that cannot be satisfied.
N    */
Nextern _ARMABI int fsetpos(FILE * __restrict /*stream*/, const fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * sets  the file position indicator for the stream pointed to by stream
N    * according to the value of the object pointed to by pos, which shall be a
N    * value returned by an earlier call to the fgetpos function on the same
N    * stream.
N    * The fsetpos function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fsetpos call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI long int ftell(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the current value of the file position indicator for the stream
N    * pointed to by stream. For a binary stream, the value is the number of
N    * characters from the beginning of the file. For a text stream, the file
N    * position indicator contains unspecified information, usable by the fseek
N    * function for returning the file position indicator to its position at the
N    * time of the ftell call; the difference between two such return values is
N    * not necessarily a meaningful measure of the number of characters written
N    * or read.
N    * Returns: if successful, the current value of the file position indicator.
N    *          On failure, the ftell function returns -1L and sets the integer
N    *          expression errno to an implementation-defined nonzero value.
N    */
Nextern _ARMABI void rewind(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream to
N    * the beginning of the file. It is equivalent to
N    *          (void)fseek(stream, 0L, SEEK_SET)
N    * except that the error indicator for the stream is also cleared.
N    * Returns: no value.
N    */
N
Nextern _ARMABI void clearerr(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * clears the end-of-file and error indicators for the stream pointed to by
N    * stream. These indicators are cleared only when the file is opened or by
N    * an explicit call to the clearerr function or to the rewind function.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int feof(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the end-of-file indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the end-of-file indicator is set for stream.
N    */
Nextern _ARMABI int ferror(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the error indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the error indicator is set for stream.
N    */
Nextern _ARMABI void perror(const char * /*s*/);
Xextern __declspec(__nothrow) void perror(const char *  );
N   /*
N    * maps the error number  in the integer expression errno to an error
N    * message. It writes a sequence of characters to the standard error stream
N    * thus: first (if s is not a null pointer and the character pointed to by
N    * s is not the null character), the string pointed to by s followed by a
N    * colon and a space; then an appropriate error message string followed by
N    * a new-line character. The contents of the error message strings are the
N    * same as those returned by the strerror function with argument errno,
N    * which are implementation-defined.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int _fisatty(FILE * /*stream*/ ) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
N    /* Returns 1 if the stream is tty (stdin), 0 otherwise. Not ANSI compliant.
N     */
N
Nextern _ARMABI void __use_no_semihosting_swi(void);
Xextern __declspec(__nothrow) void __use_no_semihosting_swi(void);
Nextern _ARMABI void __use_no_semihosting(void);
Xextern __declspec(__nothrow) void __use_no_semihosting(void);
N    /*
N     * Referencing either of these symbols will cause a link-time
N     * error if any library functions that use semihosting SWI
N     * calls are also present in the link, i.e. you define it if
N     * you want to make sure you haven't accidentally used any such
N     * SWIs.
N     */
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __STDIO_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__STDIO_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::size_t;
S    using ::std::fpos_t;
S    using ::std::FILE;
S    using ::std::remove;
S    using ::std::rename;
S    using ::std::tmpfile;
S    using ::std::tmpnam;
S    using ::std::fclose;
S    using ::std::fflush;
S    using ::std::fopen;
S    using ::std::freopen;
S    using ::std::setbuf;
S    using ::std::setvbuf;
S    using ::std::fprintf;
S    using ::std::_fprintf;
S    using ::std::printf;
S    using ::std::_printf;
S    using ::std::sprintf;
S    using ::std::_sprintf;
S    #if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S      using ::std::snprintf;
S      using ::std::vsnprintf;
S      using ::std::vfscanf;
S      using ::std::vscanf;
S      using ::std::vsscanf;
S    #endif
S    using ::std::_snprintf;
S    using ::std::_vsnprintf;
S#if !defined(__STRICT_ANSI__)
S    using ::std::asprintf;
S    using ::std::vasprintf;
S#endif
S    using ::std::__ARM_asprintf;
S    using ::std::__ARM_vasprintf;
S    using ::std::__ARM_vsnprintf;
S    using ::std::__ARM_snprintf;
S    using ::std::__ARM_vsscanf;
S    using ::std::fscanf;
S    using ::std::_fscanf;
S    using ::std::scanf;
S    using ::std::_scanf;
S    using ::std::sscanf;
S    using ::std::_sscanf;
S    using ::std::_vfscanf;
S    using ::std::_vscanf;
S    using ::std::_vsscanf;
S    using ::std::vprintf;
S    using ::std::_vprintf;
S    using ::std::vfprintf;
S    using ::std::_vfprintf;
S    using ::std::vsprintf;
S    using ::std::_vsprintf;
S    using ::std::fgetc;
S    using ::std::fgets;
S    using ::std::fputc;
S    using ::std::fputs;
S    using ::std::getc;
S    using ::std::getchar;
S    using ::std::gets;
S    using ::std::putc;
S    using ::std::putchar;
S    using ::std::puts;
S    using ::std::ungetc;
S    using ::std::fread;
S    using ::std::__fread_bytes_avail;
S    using ::std::fwrite;
S    using ::std::fgetpos;
S    using ::std::fseek;
S    using ::std::fsetpos;
S    using ::std::ftell;
S    using ::std::rewind;
S    using ::std::clearerr;
S    using ::std::feof;
S    using ::std::ferror;
S    using ::std::perror;
S    using ::std::_fisatty;
S    using ::std::__use_no_semihosting_swi;
S    using ::std::__use_no_semihosting;
N  #endif
N
N#endif /* ndef __stdio_h */
N
N/* end of stdio.h */
N
L 16 "Blinky.c" 2
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060037
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 17 "Blinky.c" 2
N#include "string.h"
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060037
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 18 "Blinky.c" 2
N#include "GLCD.h"
L 1 "GLCD.h" 1
N/******************************************************************************/
N/* GLCD.h: Graphic LCD function prototypes and defines                        */
N/******************************************************************************/
N/* This file is part of the uVision/ARM development tools.                    */
N/* Copyright (c) 2005-2011 Keil - An ARM Company. All rights reserved.        */
N/* This software may only be used under the terms of a valid, current,        */
N/* end user licence from KEIL for a compatible version of KEIL software       */
N/* development tools. Nothing else gives you the right to use this software.  */
N/******************************************************************************/
N
N#ifndef _GLCD_H
N#define _GLCD_H
N
N/*------------------------------------------------------------------------------
N  Color coding
N  GLCD is coded:   15..11 red, 10..5 green, 4..0 blue  (unsigned short)  GLCD_R5, GLCD_G6, GLCD_B5   
N  original coding: 17..12 red, 11..6 green, 5..0 blue                    ORG_R6,  ORG_G6,  ORG_B6
N
N  ORG_R1..5 = GLCD_R0..4,  ORG_R0 = GLCD_R4
N  ORG_G0..5 = GLCD_G0..5,
N  ORG_B1..5 = GLCD_B0..4,  ORG_B0 = GLCD_B4
N *----------------------------------------------------------------------------*/
N                            
N/* GLCD RGB color definitions                                                 */
N#define Black           0x0000      /*   0,   0,   0 */
N#define Navy            0x000F      /*   0,   0, 128 */
N#define DarkGreen       0x03E0      /*   0, 128,   0 */
N#define DarkCyan        0x03EF      /*   0, 128, 128 */
N#define Maroon          0x7800      /* 128,   0,   0 */
N#define Purple          0x780F      /* 128,   0, 128 */
N#define Olive           0x7BE0      /* 128, 128,   0 */
N#define LightGrey       0xC618      /* 192, 192, 192 */
N#define DarkGrey        0x7BEF      /* 128, 128, 128 */
N#define Blue            0x001F      /*   0,   0, 255 */
N#define Green           0x07E0      /*   0, 255,   0 */
N#define Cyan            0x07FF      /*   0, 255, 255 */
N#define Red             0xF800      /* 255,   0,   0 */
N#define Magenta         0xF81F      /* 255,   0, 255 */
N#define Yellow          0xFFE0      /* 255, 255, 0   */
N#define White           0xFFFF      /* 255, 255, 255 */
N
Nextern void GLCD_Init           (void);
Nextern void GLCD_WindowMax      (void);
Nextern void GLCD_PutPixel       (unsigned int x, unsigned int y);
Nextern void GLCD_SetTextColor   (unsigned short color);
Nextern void GLCD_SetBackColor   (unsigned short color);
Nextern void GLCD_Clear          (unsigned short color);
Nextern void GLCD_DrawChar       (unsigned int x,  unsigned int y, unsigned int cw, unsigned int ch, unsigned char *c);
Nextern void GLCD_DisplayChar    (unsigned int ln, unsigned int col, unsigned char fi, unsigned char  c);
Nextern void GLCD_DisplayString  (unsigned int ln, unsigned int col, unsigned char fi, unsigned char *s);
Nextern void GLCD_ClearLn        (unsigned int ln, unsigned char fi);
Nextern void GLCD_Bargraph       (unsigned int x,  unsigned int y, unsigned int w, unsigned int h, unsigned int val);
Nextern void GLCD_Bitmap         (unsigned int x,  unsigned int y, unsigned int w, unsigned int h, unsigned char *bitmap);
Nextern void GLCD_ScrollVertical (unsigned int dy);
N
Nextern void GLCD_WrCmd          (unsigned char cmd);
Nextern void GLCD_WrReg          (unsigned char reg, unsigned short val); 
N
N#endif /* _GLCD_H */
L 19 "Blinky.c" 2
N#include "LED.h"
L 1 "LED.h" 1
N/*----------------------------------------------------------------------------
N * Name:    LED.h
N * Purpose: low level LED definitions
N * Note(s):
N *----------------------------------------------------------------------------
N * This file is part of the uVision/ARM development tools.
N * This software may only be used under the terms of a valid, current,
N * end user licence from KEIL for a compatible version of KEIL software
N * development tools. Nothing else gives you the right to use this software.
N *
N * This software is supplied "AS IS" without warranties of any kind.
N *
N * Copyright (c) 2009-2011 Keil - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#ifndef __LED_H
N#define __LED_H
N
N/* LED Definitions */
N#define LED_NUM     8                        /* Number of user LEDs          */
N
Nextern void LED_Init(void);
Nextern void LED_On  (unsigned int num);
Nextern void LED_Off (unsigned int num);
Nextern void LED_Out (unsigned int value);
N
N#endif
L 20 "Blinky.c" 2
N#include "KBD.h"
L 1 "KBD.h" 1
N/*----------------------------------------------------------------------------
N* Name: KBD.h
N* Purpose: MCB1700 low level Joystick definitions
N* Version: V2.00
N* Note(s): Positioning of Joystick on MCB1700
N* Revised by: Anita Tino
N*----------------------------------------------------------------------------
N* This file is part of the uVision/ARM development tools.
N* This software may only be used under the terms of a valid, current,
N* end user licence from KEIL for a compatible version of KEIL software
N* development tools. Nothing else gives you the right to use this software.
N*
N* Copyright (c) 2008 Keil - An ARM Company. All rights reserved.
N*----------------------------------------------------------------------------*/
N#include <stdint.h>
N
N#ifndef __KBD_H
N#define __KBD_H
N#define KBD_SELECT 0x01 
N#define KBD_UP 0x08 
N#define KBD_RIGHT 0x10 
N#define KBD_DOWN 0x20 
N#define KBD_LEFT 0x40
N#define KBD_MASK 0x79 
Nextern uint32_t KBD_val; 
Nextern void KBD_Init(void);
Nextern uint32_t KBD_get (void);
Nextern uint32_t get_button (void);
W "KBD.h" 29 7 last line of file ends without a newline
N#endif
L 21 "Blinky.c" 2
N
N#include "redbull.c"
L 1 "redbull.c" 1
N/* GIMP RGB C-Source image dump (redbull.c) */
N
N#define REDBULL_WIDTH (100)
N#define REDBULL_HEIGHT (100)
N#define REDBULL_BYTES_PER_PIXEL (2) /* 2:RGB16, 3:RGB, 4:RGBA */
N#define REDBULL_PIXEL_DATA ((unsigned char*) REDBULL_pixel_data)
Nstatic const unsigned char REDBULL_pixel_data[100 * 100 * 2 + 1] =
N("\313Z\313Z\313Z\313Z\313Z\353Z\353Z\353Z\013c\014c\014c\014c\014c,c,c,c,cMkMkM"
N "kMkMkmkmkmkmk\216s\215s\216s\216s\216s\216s\216s\256s\256s\256s\256s\256s"
N "\256s\256s\256s\256s\256s\317{\317{\317{\317{\317{\317{\317{\317{\317{\317"
N "{\317{\357{\357{\357{\357{\357{\357{\357{\357{\357{\357{\357{\357{\357{\357"
N "{\357{\357{\357{\317{\317{\317{\317{\317{\317{\317{\317{\317{\317{\317{\256"
N "s\256s\256s\256s\256s\256s\216s\256s\256s\216s\216s\216s\216s\216s\216smk"
N "mkmk\014c\014c\014c\014c\014c,c,c,c,c,cMkMkMkMkMkmkmkmkmkmkmkmkmkmkmk\216s\216"
N "s\216s\216s\216s\256s\256s\256s\256s\256s\256s\256s\256s\256s\317{\317{\317"
N "{\317{\317{\317{\317{\357{\357{\317{\317{\357{\357{\357{\357{\357{\357{\357"
N "{\357{\317{\357{\317{\317{\317{\317{\317{\317{\317{\317{\317{\317{\317{\317"
N "{\317{\317{\317{\317{\317{\317{\317{\256s\256s\317{\256s\256s\256s\256s\256"
N "s\256s\256s\256s\256s\256s\216s\256s\256s\216s\216s\216s\216s\216s\014c\014"
N "c\014c,c,c,c,c,c,c,cMkMkMkMkMkmkmkmkmk\216s\216s\216s\216s\256s\256s\256s\317"
N "{\317{\317{\317{\317{\317{\317{\317{\357{\357{\357{\317{\317{\357{\357{\357"
N "{\317{\317{\317{\317{\317{\317{\317{\317{\317{\357{\357{\357{\357{\317{\357"
N "{\317{\317{\357{\357{\357{\357{\357{\317{\317{\357{\317{\357{\357{\357{\317"
N "{\317{\317{\317{\317{\317{\317{\317{\317{\256s\256s\256s\216s\216s\216s\216"
N "s\216s\216smkmkmkmkmkMkMkMk,c,c,c,c,c,cMkMkMkMkmkmkmkmk\216smkmkmk\216s\216"
N "s\216s\216s\216s\256s\256s\256s\256s\256s\256s\317{\256s\256s\256s\256s\256"
N "s\256s\256s\316{\317{\317{\317{\317{\317{\317{\317{\317{\317{\317{\317{\317"
N "{\317{\317{\317{\317{\357{\317{\317{\317{\317{\357{\317{\317{\317{\317{\317"
N "{\317{\317{\317{\256s\256s\256s\256s\256s\256s\216s\216s\216s\216s\216smk"
N "mkmkmkmkmkMkMkMkMkMkMkMkMkMkMkMk,c,c,c,c,c,c,cmkmkmkmkmkmkmk\216smk\216sm"
N "k\216smkmkmk\216s\216smk\216s\216s\256s\216s\256s\256s\256s\256s\256s\256"
N "s\317{\317{\317{\357{\357{\357{\357{\357{\357{\357{\357{\357{\357{\357{\357"
N "{\357{\357{\317{\317{\317{\317{\317{\256s\256s\256s\256s\256s\256s\256s\256"
N "s\256s\256s\256s\256s\256s\256s\256s\256s\256s\256s\256s\256s\216s\216s\216"
N "s\216s\216s\216s\216s\216s\216s\216s\216s\216s\216s\216s\216s\216snsmkmkm"
N "kmkmkMkmkmkmkMkMkMkmkmkmkmkmkmkmkmk\216s\216s\216s\216s\256s\256s\256s\256"
N "s\256s\256s\256s\257s\317{\317{\317{\317{\317{\317{\317{\317{\317{\317{\317"
N "{\317{\317{\317{\317{\317{\256s\256s\256s\256s\256s\256s\256s\216s\256s\256"
N "s\256s\256s\256s\256s\256s\256s\256s\256s\256s\256s\256s\256s\256s\256s\256"
N "s\256s\256s\256s\256s\216s\216s\216s\216s\216s\216s\216s\216s\216s\216s\215"
N "s\216s\216k\215kmkmkmkmkMkMkMkMkMkMk,c,c,c\014c\014c,c\014c\014c\013c\353Z\353"
N "Z\353Z\256s\256s\256s\256s\317{\317{\317{\317{\316{\016\214m\234\255\244\315"
N "\264\355\264\356\264\316\254\256\244o\234\017\204\317{\317{\317{\317{\316{"
N "\317{\317{\256s\256s\256s\256s\256s\256s\256s\256s\256s\256s\256s\256s\256"
N "s\256s\256s\256s\216s\216s\256s\256s\256s\216s\216s\216s\216s\216s\216s\216"
N "s\216s\216s\216smkmkmkmkmkMkMkMkMkMkMkMkMkMkMk,c,c,c,c,c\014c\014c\014c\014c\014"
N "c\353Z\353Z\353Z\353Z\353Z\313Z\313Z\313Z\313Z\313Z\313Z\313Z\313Z\313Z\312"
N "Z\252Z\252R\252R\256s\256s\256s\216s\216s\255{\314\203\214\244k\325\013\356"
N "K\366k\376k\376k\376l\366,\356\014\346\354\345\254\335\015\275M\224\356\203"
N "\317\203\317\203\256{\216{\216{\216{\256{\317{\317{\317{\317{\316{\256{\216"
N "{\216{\216{\316{\357\203\357\203\020\204\020\204\020\204\020\204\020\204\020\204"
N "\020\204\357{\357{\357{\317{\317{\317{\357{\357{\317{\317{\317{\316{\256s\256"
N "s\216s\216s\216s\215smkmkmkMkMkMkLkLk,k,c,c,c,c\014c\014c\014c\014c\013c\353b\353"
N "Z\353b\353b\353Z\313Z\313Z\313Z\313Z\313Z\313Z\312Z\312Z\312Z\312Z\252R\364"
N "\244\024\255\317\233Gj%{e\254G\315\250\345\010\356(\366)\366I\366I\366j\366"
N "j\376k\366+\366\013\356\353\345\013\346\353\345\314\335n\325\315\324\215\324"
N "\314\253*\203\311\202\012\213l\223l\233L\243K\253\013\263\312\272\251\272\211"
N "\302h\272\312\262\215\263\017\274\262\274\064\305\226\305\367\315Y\326\232\326"
N "\333\336\373\336\333\336\373\336\374\336\373\336\373\336\374\336\034\347<\347"
N "<\347<\347<\347<\347\374\336\373\336\373\336\273\326y\316\030\316\266\315U"
N "\315\263\314\060\304\256\303m\303M\263\216\273\357\273\357\263\020\274\317\263"
N "m\263,\263\353\262\211\262i\252(\252I\232\353\232\216\233\357\243\357\223"
N "\222\244\323\244\064\255U\255\226\265\226\265\266\265\267\265\226\265u\255"
N "]\357~\357<\347\224\245,dm|\215\204\306Kc\063\203C\243K\303[\343k#td\204\244"
N "\214\304\234\345\254\307\234't\306[\306K\306K\346K\346;\307\033\307\003\247\003"
N "\207\013\207\013\207\023\247\023\247\023\207\033\207#\207+\207+g+g#\207\033\207#"
N "\207\033\250#\310#\351#\012,K\064\214<\356D\356D\017E/M/M\017M\017MPUq]\221e\221"
N "eq]q]PUOM/M/M/M\017M\017U\316T\215TLT\312S\251SgC&CGC&K'S'K\006S\006[\346b\245r"
N "\245jejebej\246j\350j)c(S\212[-l\320|s\225\325\235\026\226\026\226\365\215\324"
N "\205\360\253\360\263\320\273\257\313\257\313\216\313N\303h\222\244q\243q\203"
N "\201\203\221\243\221dZf\023\207\013\207\013\247\013\307\013\310\013\310\003\350\003"
N "\350\003\350\003\310\003\350\003\310\003\310\003\310\003\310\003\310\003\350\003\350\003\010\004\010"
N "\004(\004(\004(\004\010\004(\004(\004\010\004(\004(\004(\004\010\004\010\004\010\004\010\004\010\004\010\004\010\004\010"
N "\004\010\004\010\004\010\004\010\004(\004(\004(\004(\004(\004(\004(\004(\004(\004(\004)\004(\004(\004(\004(\004(\004(\004"
N "(\004(\004(\004(\004(\004(\004(\004\010\004\010\004\347\003\347\003\347\003\347\003\307\003\307\003\347\003"
N "\347\003\307\003\347\003\307\003\347\003\010\004\350\003\347\003\347\003\307\003\212bJbIj\010r\310"
N "\201f\201f\231E\251\004\251E\301\307\331(\332\252\332M\323/\274\321\264\063\275"
N "\224\305\027\316y\316\067\256\256DK\034\213\034\213\034\214\034\213\034j\024)\004)\004"
N "\010\004\010\004(\004(\004)\004)\004(\004(\004(\004(\004(\004)\004I\004I\004I\004)\004)\004(\004(\004(\004)\004)\004)\004"
N ")\004)\004)\004(\004(\004(\004(\004(\004\010\004(\004(\004\010\004\010\004\010\004\010\004(\004(\004\010\004\010\004\010"
N "\004\010\004\010\004\010\004\010\004\010\004(\004(\004(\004(\004(\004\010\004\010\004\010\004\350\003\347\003\010\004"
N "\350\003\010\004\010\004\010\004(\004(\004(\004(\004(\004(\004\010\004\313Z\353Z\353Z\353Z\353Z\212"
N "R\212R\014kn{\021\224U\265\031\316\333\336=\347~\357\236\367\277\367\277\367"
N "\277\367\277\367\237\367\236\357}\347\236\357\236\357\236\357\236\357\\\337"
N "\364}PMPUPUq]PU\017Ej\014(\004\010\004\010\004(\004)\004(\004)\004)\004(\004)\004I\004I\004)\004)\004\010\004"
N ")\004(\004(\004(\004(\004\010\004\010\004\010\004\010\004\350\003\350\003\350\003\350\003\347\003\347\003\350"
N "\003\010\004\010\004\010\004\010\004\350\003\010\004\010\004\010\004\010\004\010\004\010\004(\004(\004(\004(\004H\004"
N "I\004I\004i\004i\004i\004\212\004\211\004i\004i\004i\004i\004i\004I\004H\004I\004I\004H\004\014c\014c\013c\014c"
N "\014c\353Z\252R\253Z\313Z\313Z\313Z\354Z-c\257s\060\204r\214\263\224U\245\226"
N "\265\030\306\233\326\034\337]\357~\357^\367=\367\035\367\034\367\334\366\273\366"
N "\233\366z\366z\366Y\366Y\366\063\275'S\006K\006K\006K\006S\006KG\063\310\003\350\003\350\003"
N "\350\003\010\004\010\004\010\004\010\004\010\004\010\004\010\004(\004(\004\010\004\010\004\010\004\350\003\350\003"
N "\350\003\350\003\350\003\010\004\010\004\010\004\010\004\010\004\010\004\010\004\347\003\347\003\010\004(\004"
N "(\004(\004(\004H\004H\004H\004I\004I\004H\004i\004I\004i\004I\004I\004I\004I\004I\004(\004I\004)\004(\004H\004H\004H\004H"
N "\004,c,c\014c\014c\014c\014c\014c\353Z\353Z\014c\014c\014c\014c\014c\014c\014c,c,c,cmk\216"
N "s\317{\060\204Q\214Q\224\263\244\364\274\364\314\324\324R\334\320\343M\353"
N "\353\362i\362\010\362\307\361e\351D\351D\351D\351D\351D\351d\331f\232\307r"
N "\306z\306\202\246\202\206\212\206\202\346J\310\003\307\003\307\003\307\003\307\003\307"
N "\003\350\003\350\003\307\003\307\003\307\003\307\003\307\003\307\003\307\003\347\003\347\003\307\003"
N "\350\003\350\003\350\003\347\003\347\003\350\003\350\003\350\003\347\003\347\003\010\004\010\004\010"
N "\004\010\004\010\004\010\004\010\004\010\004\010\004\010\004\010\004\010\004\010\004\350\003\350\003\347\003\350"
N "\003\350\003\347\003\350\003\350\003MkMkMkMkMkMkMkMk,c,cMk,c,c,c,cMk,c-c,c,c,cMkMkM"
N "k,c\353Z\353Z\353ZMk\216s\317\203\060\214r\234\263\254\065\305\065\325\364\334"
N "\222\344\020\344Q\344\323\344v\345\226\355\370\355Y\356Y\356Y\356Y\356Y\346"
N "\071\346\070\336x\266\066\216\263u\060U\356<k\034)\004\010\004\350\003\010\004\010\004\011\004"
N "\011\004)\004)\004)\004\010\004\010\004\010\004\010\004\010\004\010\004\010\004\010\004\350\003\310\003\247\003\250"
N "\003\250\003\250\003\250\003\247\003\247\003\250\003\250\003\250\003\250\003\247\003\247\003\247\003"
N "\247\003\247\003\247\003\247\003\247\003\247\003\247\003\307\003\247\003MkMkMkMkmkmkmkmkmkm"
N "kmkmkmkMkmkmkMkMkMkMkMkMkMkMkmkmkmkMkMkMkmk\216s\216s\216s\256s\020\204\060"
N "\204Q\214q\214\323\234U\255\327\265Y\306\333\326<\347~\357\236\357\277\357"
N "\337\367\337\367\337\367\337\367\337\367\337\367\337\367\337\367\236\347<"
N "\317w\226qe\315\064\213\034J\014I\004I\004I\004j\004j\004I\004I\004)\004)\004)\004)\004)\004\011\004\010"
N "\004\350\003\350\003\350\003\350\003\310\003\310\003\311\003\251\003\251\003\251\003\250\003\210\003"
N "\210\003\210\003h\003g\003G\003g\003g\003G\003G\003G\003G\003mkmkmkMkmkmkmkmkmkmkmkmkmkmkmkmkmk"
N "mk\216s\216s\216s\216s\256s\256s\256s\256s\256s\256s\317{\317{\317{\317{\256"
N "s\256s\256s\317{\317{\317{\317{\256s\317{\317{\357{\357{\020\204\060\204q\214"
N "\323\234U\255\327\275Y\316\273\326\034\347]\347\236\357\276\367\277\367\337"
N "\367\337\377\337\367\277\367\236\357\\\337\372\306\230\246\066\206\323mpM\355"
N ",\254\034\212\014I\004)\004)\004)\004I\004I\004I\004I\004I\004I\004I\004I\004)\004\011\004\011\004\351\003\351"
N "\003\350\003\311\003\311\003\250\003\210\003\210\003\210\003\210\003\210\003\210\003h\003h\003mkmkm"
N "kmk\216s\216s\216s\216smkmkmk\216smk\215s\215smkmkmkmk\216s\256s\256s\317"
N "{\357{\357{\357{\357{\357{\357{\357{\020\204\020\204\060\204\020\204\020\204\357"
N "{\357{\357{\020\204\020\204\020\204\020\204\020\204\060\204\020\204\020\204\020\204"
N "\020\204\020\204\357{\317{\317{\357{\060\204q\214\323\234\024\245v\255\327\275"
N "\071\306\232\326\373\336=\347]\357\236\357\276\367\277\367\277\367\236\357"
N "}\347<\337\373\316\230\256\026\216\223mPU\356<\214$*\014\011\004\011\004\011\004\011\004"
N "\011\004\011\004\011\004\010\004\350\003\350\003\350\003\310\003\310\003\310\003\310\003\250\003\250\003"
N "\250\003\250\003\250\003\250\003\216s\216s\216s\256s\216s\256s\216s\256s\256s\256"
N "s\256s\256s\256s\256s\256s\256s\256s\256s\256s\317{\317{\317{\317{\357{\357"
N "{\357{\020\204\020\204\060\204\060\204\060\204\060\204\060\204\060\204Q\214\060\204"
N "\020\204\020\204\020\204\060\204\060\204\060\204\060\204\060\204\020\204\020\204\020"
N "\204\020\204\020\204\020\204\060\204\060\204\060\204\060\204\020\204\020\204\357{\020"
N "\204\020\204\020\204\020\204\060\204q\214\222\224\323\234\024\245u\255\327\275"
N "\030\306z\316\273\326\034\337=\347]\347]\347\236\357~\357}\347<\337\332\306"
N "\230\256\324\205Q]\357Dk\024\011\004\350\003\350\003\350\003\310\003\310\003\310\003\350\003"
N "\310\003\310\003\310\003\310\003\310\003\310\003\310\003\317{\256s\256s\256s\216s\256s\256"
N "s\256s\256s\256s\256s\256s\256s\317{\357{\357{\317{\317{\317{\357{\357{\357"
N "{\020\204\020\204\020\204\020\204\020\204\020\204\020\204\020\204\020\204\060\204\060"
N "\204\060\204Q\214Q\214Q\214Q\214Q\214P\214Q\214\060\204\060\204\060\204\060\204"
N "\060\204\060\204\060\204\060\204\060\204\060\204\020\204\020\204\020\204\020\204\060"
N "\204\060\204Q\214Q\214\060\204\020\204\020\204\020\204\020\204\020\204\060\204\060"
N "\204\060\204\060\204\060\204\060\204Q\214q\214\222\224\262\224\323\234\064\245"
N "\266\265\370\275Y\316\232\326\272\326\374\336\374\336\373\326\332\306W\236"
N "\264}PU\315\064k\034*\014*\024\010\004\350\003\310\003\350\003\310\003\310\003\310\003\316s\317"
N "{\317{\317{\317{\317{\317{\317{\317{\317{\357{\357{\357{\357{\357{\357{\357"
N "{\357{\020\204\020\204\020\204\020\204\020\204\020\204\020\204\060\204\060\204\060\204"
N "Q\214\060\204Q\214Q\214\060\204\060\204\060\204\060\204\060\204\060\204\060\204Q\214"
N "Q\214Q\214Q\214Q\214Q\214Q\214\060\204\060\204\060\204\060\204\060\204Q\214\060"
N "\204\060\204\060\204\060\204\060\204\060\204\060\204\060\204\060\204\060\204\060\204"
N "\060\204\020\204\020\204\020\204\020\204\020\204\020\204\020\204\020\204\060\204\060"
N "\204\060\204\020\204\020\204\060\204\020\204\020\204\060\204\060\204\020\204\060\204"
N "Q\214\262\224\364\234u\255\226\265\327\265\030\276Y\306X\276X\266\026\236\026"
N "\236\223}\061]\255<L$\317{\317{\317{\317{\317{\357{\357{\357{\357{\357{\357"
N "{\020\204\020\204\020\204\020\204\060\204\060\204\060\204\060\204\060\204\060\204Q\214"
N "Q\214Q\214Q\214Q\214Q\214Q\214Q\214\060\204\060\204Q\214Q\214Q\214q\214q\214"
N "Q\214Q\214Q\214\060\204\060\204\060\204\060\204\061\204Q\214Q\214Q\214Q\214Q\214"
N "\060\204\060\204\060\204\060\204\060\204\060\204\060\204\060\204Q\214\060\204\060\204"
N "Q\214\060\204\060\204\060\204Q\214Q\214Q\214Q\214Q\214\060\204\060\204\060\204\060"
N "\204\060\204\060\204\020\204\020\204\020\204\020\204\020\204\020\204\020\204\020\204"
N "\020\204\020\204\020\204\020\204\020\204\357{\357{\357{\357{\357{q\214\222\224"
N "\222\224\363\234u\255u\245\326\255\317s\256s\317{\317{\317{\317{\357{\357"
N "{\357{\020\204\020\204\020\204\060\204\060\204\060\204\060\204\060\204\060\204\060\204"
N "\060\204\060\204Q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214q\214Q\214q\214"
N "Q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214q\214Q\214\060\204Q\214Q\214\060\204"
N "\060\204\060\204\060\204\060\204\060\204\060\204\060\204\060\204Q\214\060\204\060\204"
N "\060\204\060\204\060\204\060\204\060\204\060\204\060\204\060\204\060\204\060\204\060"
N "\204\060\204\060\204Q\214Q\214Q\214Q\214Q\214Q\214\060\204\060\204\060\204\060\204"
N "\060\204\020\204\020\204\020\204\020\204\020\204\020\204\357{\357{\317{\357{\317"
N "{\357{\357{\357{\357{\317{\256s\256s\256s\256s\317{\317{\317{\317{\317{\317"
N "{\357{\357{\357{\357{\020\204\020\204\020\204\060\204\060\204\060\204Q\214Q\214"
N "Q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214"
N "Q\214Q\214Q\214Q\214\060\204\060\204\060\204\060\204\060\204Q\214\060\204Q\214Q"
N "\214Q\214Q\214Q\214Q\214\060\204\060\204\060\204\060\204\060\204\060\204\060\204"
N "Q\214Q\214\060\204\060\204\060\204\060\204\060\204\060\204\060\204\060\204\060\204"
N "\060\204\060\204\060\204\060\204Q\214\060\204\060\204\020\204\060\204\060\204\060\204"
N "\060\204\060\204Q\214\060\204Q\214Q\214Q\214\060\204\060\204\060\204\020\204\020\204"
N "\020\204\020\204\357{\357{\357{\357{\357{\216s\216s\216s\256s\256s\256s\256"
N "s\256s\256s\256s\256s\317{\316{\317{\317{\317{\357{\357{\020\204\020\204\060"
N "\204\060\204\060\204Q\214Q\214Q\214Q\214Q\214Q\214\060\204Q\214Q\214Q\214Q\214"
N "Q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214\060\204\060\204\060\204"
N "\060\204Q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214\060\204\060\204Q\214"
N "Q\214Q\214Q\214Q\214Q\214q\214Q\214Q\214Q\214\060\204\014c\253R\354Z\010B)B\307"
N "\071\353ZMkLc\061\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214\060\204\060"
N "\204\060\204\060\204\060\204\020\204\017\204\020\204\357{mk\216smk\216s\256s\256"
N "s\256s\316{\317{\317{\317{\317{\317{\317{\317{\357{\357{\317{\357{\357{\020"
N "\204\357{\357{\017\204\020\204\020\204\060\204\060\204\060\204\060\204Q\214\060\204"
N "\060\204\060\204\060\204Q\214\060\204Q\214Q\204\060\204Q\214Q\214Q\214Q\214Q\214"
N "Q\214Q\214Q\214Q\214Q\214Q\214Q\214q\214q\214q\214q\214q\214q\214q\214q\214"
N "q\214q\214q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214Q\214\252Re)e\061\003"
N ")\040\000@\010@\020\000\010a\000\004\031\247\061\307\061\247\061\350\071(BIJiJ\353ZMkjJ\014"
N "[\060\204\060\204\060\204\357{\357{\060\204\060\204mk\216smkmk\216smkmkmk\216s"
N "\216s\256s\256s\256s\317{\317{\357{\357{\020\204\357{\357{\357{\020\204\357"
N "{\357{\357{\357{\357{\357{\357{\357{\357{\357{\020\204\020\204\020\204\020\204"
N "\020\204\357{\020|\357{\020\204\020\204\060\204\060\204\060\204\060\204\060\204Q\214"
N "Q\214\060\204Q\214\060\204Q\214Q\214Q\214Q\214Q\214Q\214Q\214q\214q\214q\214"
N "q\214q\214q\214\222\224\221\214\222\224\222\224q\214q\214q\214q\214q\214q"
N "\214\313RA\010b\020\244\020B\030c\000c\000C\000C\000\"\000\"\000\"\000\"\000\"\000\203\010b\010A\010"
N "$!\357{\212R\344\030%!!\000!\000!\000\216s\216s\256s\256s\216s\256s\256s\256s\256"
N "s\216s\256s\216s\216s\216s\216s\216s\256s\317{\317{\317{\357{\357{\357{\020"
N "\204\357{\020\204\020\204\357{\020\204\020\204\020\204\020\204\020\204\020\204\020"
N "\204\020\204\020\204\020\204\020\204\357{\020\204\020\204\020\204\020\204\020\204\020"
N "\204\357{\357{\020\204\020\204\060\204Q\214\060\204Q\214Q\214Q\214q\214Q\214q"
N "\214q\214q\214q\214q\214q\214\222\224q\214q\214q\214\222\224\222\224\222\224"
N "\222\224\222\224\321\234\014\265\345r\002R\006\264\353\354-\375k\303&Id\010d\010"
N "c\000C\000C\000C\000C\000C\000\203\020!\000!\000%!B\000B\000B\000B\000B\000\"\000\216smk\216s\216s\256"
N "s\256s\317{\317{\317{\317{\357{\357{\357{\317{\317{\317{\317{\317{\317{\317"
N "{\317{\357{\357{\357{\317{\317{\317{\357{\357{\357{\020\204\020\204\357{\357"
N "{\357{\357{\357{\357{\357{\357{\357{\357{\020\204\020\204\020\204\020\204\020\204"
N "\017\204\357{\357{\357{\357{\020\204\060\204\060\204Q\214\060\204Q\214Q\214Q\214"
N "q\214q\214\222\224\222\224q\214q\214\222\224\222\224\222\224\222\224\222\224"
N "\222\224\260\244$\203\200I\340Q\040Z`\213a\376E\376\307\375\352\372\210\242"
N "\204\010d\010d\010d\010d\010d\010\204\010b\010!\000c\010c\010d\010d\010d\000d\000c\000c\000MkMk"
N "mk\216s\216s\216s\216s\256s\256s\256s\317{\357{\357{\357{\357{\020\204\020\204"
N "\060\204\020\204\020\204\020\204\020\204\020\204\020\204\020\204\020\204\357{\357{"
N "\357{\357{\317{\357{\357{\317{\317{\357{\357{\357{\357{\357{\357{\357{\357"
N "{\020\204\020\204\020\204\357{\357{\357{\020\204\020\204\060\204\020\204\020\204\357"
N "{\020\204\020\204\020\204\020\204\060\204Q\214q\214Q\214q\214\222\224\262\224P"
N "\214\222\224q\224q\214\226\265\024\245\207\233\000\000\000\000\000\000\000\000\000\000`\233\000\376"
N "\301\365E\362\246\372(\302B\010A\000B\000B\000B\000B\010\000\000!\000c\010b\010c\010\204\010\204"
N "\010d\010\204\010\204\010\014cMkMkmk\216s\216s\256s\256s\256s\256s\256s\256s\256"
N "s\317{\317{\357{\357{\020\204\060\204\060\204\060\204\060\204\060\204\060\204\060"
N "\204\060\204\060\204\020\204\020\204\020\204\020\204\020\204\020\204\357{\357{\357"
N "{\357{\357{\357{\020\204\357{\357{\020\204\020\204\020\204\020\204\020\204\020\204"
N "\020\204\060\204\020\204\020\204\020\204\020\204\020\204\020\204\020\204\020\204\020"
N "\204\020\204\020\204\020\204\020\204\060\204\060\204\060\204Q\214q\214q\214\347A"
N "\202\030\242\030!z\000\000\000\000\000\000\000\000\000\000\200Y\340\374\341\222\302\030\004!$!\004!e"
N ")\206\061\343\030\000\000\040\000\040\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000@\020\000ImkMkMkmk"
N "mkmk\216s\215k\216s\256s\256s\256s\317{\317{\357{\357{\357{\357{\020\204\020"
N "\204\020\204\060\204\060\204\060\204\060\204\060\204\060\204\060\204\060\204\060\204"
N "\020\204\020\204\020\204\020\204\020\204\020\204\020\204\020\204\357{\357{\357{\317"
N "{\020\204\020\204\020\204\020\204\020\204\020\204\357{\357{\020\204\020\204\357{\020"
N "\204\020\204\020\204\020\204\020\204\020\204\020\204\357{\020\204\020\204\020\204\020"
N "\204\020\204\020\204\020\204\060\204\060\204Q\214\017\204d\253\000\000\000\000\000\000\000\000\000"
N "\000\340\201\240\373\240\211\040\070@PaHa@\201\070\000\010\242\020\005!A\010\040\000\004\031"
N "\354Z\314Z\253R\350\071b\010b\010Aj\200\344\256s\256s\317{\317{\317{\317{\357"
N "{\357{\357{\020\204\020\204\020\204\020\204\357{\357{\357{\020\204\357{\357{\020"
N "\204\357{\357{\020\204\357{\357{\357{\357{\017\204\020\204\020\204\020\204\020\204"
N "\020\204\020\204\020\204\357{\357{\357{\020\204\357{\357{\357{\317{\256s\317{"
N "\316s\317{\317{\317{\317{\317{\317{\317{\317{\317{\317{\357{\357{\357{\357"
N "{\357{\357{\357{\357{\317{\216s,cMk-c\014[-cmk\254\213!j\040\010\000\000\040\010\040"
N "A\200\352`\372`\321\240\250A\371#\371\245\371\007\372G\272\000\000\000\000\000\000\000\000\000"
N "\000A\010\000\000\000\000\000\000\000\000\040\000a\010!\061\215smkmk\216s\256s\256s\357{\357{\357"
N "{\357{\357{\357{\357{\317{\357{\357{\020\204\020\204\020\204\020\204\020\204\357"
N "{\357{\316{\256s\256s\256s\256s\256s\256s\256s\317{\317{\317{\317{\317{\317"
N "{\317{\317{\317{\317{\317{\317{\256s\256s\317{\256s\256s\256s\317{\317{\317"
N "{\317{\317{\317{\317{\317{\317{\317{\317{\317{\317{\313Z\347\071\010BE)a\010"
N "%!\206\061\004!\243\020\202\020b\010b\010\350\071HR\"b\342\201C\262\202\342`\310\300"
N "\320\001\371\243\371d\371\305\371\010\373&\322ibA\010\347\071IJ(B\347\071\246\061"
N "e)$!\004!\303\030\242\020Mkmkmk\216s\256s\256s\256s\317{\317{\357{\020\204\020\204"
N "\357{\357{\357{\357{\357{\357{\357{\357{\357{\357{\357{\357{\357{\357{\256"
N "s\256s\256s\256s\256s\216s\256s\256s\256s\216s\256s\256s\256s\216s\256s\256"
N "s\216s\256s\256s\317{\317{\317{\256s\256s\216s\256s\256s\256s\256s\317{\317"
N "{\256s\317{\317{mk\014[\242\020\040\000\242\040e\061\303\030\242\020\303\030!\000\000\000"
N "\040\020e\061$)D)d\061\243\030\242\020\202\020A\010\004)\303x\204\231b\272\245\372\245"
N "\371%\373\007\372H\304A\010\256sQ\214Q\214Q\214Q\214q\214Q\214Q\214Q\214Q\214"
N "\014c\014c,c,cMkMkmkmk\216s\216s\256s\317{\357{\357{\020\204\020\204\020\204\020"
N "\204\357{\317{\357{\357{\357{\357{\357{\357{\020\204\020\204\357{\357{\357{"
N "\357{\357{\317{\317{\317{\256s\317{\317{\317{\317{\256s\256s\216s\256s\216"
N "s\216s\216s\256s\256s\256s\256s\256s\256s\256s\216s\256s\216s\256s\014c\010"
N ":\350\071\307\071\303\030\000\000\040\040\242(%)A\010e)\357\243l\344\321\364\227\336"
N "t\346\204\325B\354\000\364\200\262\000y\040\040\000\000a\010\344\030\204aE\373%\353E\373"
N "\346\371f\242\352b\060\204\060\204P\214Q\214Q\214Q\214Q\214Q\214Q\214MkMkmk"
N "MkMkMk,c,c,cMkmkMkmk\216s\216s\256s\317{\317{\357{\357{\317{\317{\317{\256"
N "s\256s\317{\357{\317{\357{\357{\020\204\357{\357{\020\204\020\204\020\204\020\204"
N "\357{\357{\317{\317{\317{\357{\357{\317{\317{\317{\317{\357{\317{\252R\306"
N "AIJ\212R\216s\216s\256s\256s\216s\307\071f)f)f)$!\000\000b\020\247\061f)\303\030\310"
N "j\216\243\256\213Ijo\224\321\315P\275d\243\240\375\200\364A\333E\302\242\040"
N "\000\000A\010\301\040\351\304${\344\252\344\373\204\373\205\343GR\357{Q\214Q\214"
N "Q\214Q\214\060\204\060\204\060\204,cMkmk\216s\216s\216s\216s\216s\216s\216s\216"
N "s\216s\216s\216smkmk\216s\256s\256s\256s\256s\216s\256s\317{\357{\317{\317"
N "{\317{\317{\317{\357{\357{\020\204\020\204\357{\357{\317{\357{\317{\317{\357"
N "{\317{\357{\317{\317{\317{\357{\357{\357{\317{e)\040\000\000\000A\010\014c\317{\317"
N "{\317{\212RE)%!%!%!E)A\000\350\071-cb\010a\030\004!'\061i\061\303\030\004!IZ(JI\243`\374"
N "\345I\004!%!\040\000A\010f)E)fr\247\262\306\071\005\363\004\373D\372\302\353\350\071\357"
N "{\262\224q\214Q\214Q\214Q\214Q\214Mkmkmkmkmkmkmk\216s\216s\216s\256s\256s"
N "\317{\317{\317{\357{\357{\317{\357{\357{\357{\357{\357{\317{\357{\357{\357"
N "{\357{\357{\317{\317{\317{\357{\317{\317{,c-c\317{\357{\020\204\357{\317{\317"
N "{\317{\317{\317{\317{\317{\317{\357{mk\252R\206\061\242\020\252R,cMkMk\010B\246"
N "\061\307\071\010B\344\030U\255f)\010B\010BA\010A\010\000\000\000\000\214A\245\040+z\212\232"
N "Ir\205\221`\312\015cr\214\243\020B\000!\000A\010\040\000A\010\040\000\040\000\241\030\302A\""
N "\313B\372\343a\267\265\257s\216s\360{\216snk\256s\353Z\353Z\014c,c\014c,c,c"
N "MkMkmkmk\216s\216s\216s\256s\256s\317{\317{\317{\317{\357{\357{\020\204\020"
N "\204\020\204\020\204\020\204\020\204\060\204\060\204\060\204\317{\256s\216snk\216"
N "s,c\350\071\253Rnk\357{\357{\357{\357{\357{\357{\317{\317{\256s\256s\256s\317"
N "{\014cMk\357{\357\203\317\203\216s\004!\343\030\343\030\343\030a\010\226\265\212"
N "R\203\020\203\010!\000\000\000\040\000A\010\040\000\253b\205r\304r\307\071\343@\342Pf)\207"
N "\061\243\020\345\030\345\030\202\020a\010\202\020A\010A\010A\010\344\030\243\020!\223"
N "\200\030IJr\214\010B\010B\247\061\206)f)\215s,c\013c\353Z\353Z\353Z\014c,c,c,cM"
N "kMkMkmk\216s\216s\216s\216s\256s\256s\256s\256s\317{\317{\317{\317{\317{\317"
N "{\216s\253R\010B\010B\350\071\307\071\307\071$!A\010\343\030f)\350\071\213R\020\204"
N "\020\204\020\204\020\204\020\204\020\204\020\204\357{\357{\317s\253R\350\071\247"
N "\061IJ\212R\213R\014c\354Z-cnk\313Z\212R\354b\212Rij\247\061\345QeA$\071$\061\004"
N ")\307\071\214{\203\071\242\030Hz\306IE)E)%!\243\020\344\030\207\061\004!\242\020!\000"
N "a\010E)%A\344\060aPA\010\242\020\303\030\303\030)B\350\071\307\071\247\061\276\367"
N "\236\367}\357\034\347y\316\027\306\225\265\024\245\322\224\060\204\316{mkLk,c"
N ",cMkmkmk\216s\216s\256s\256s\216s\216s\216s\216s\256smkIB\206\061\206\061f)"
N "f)f)E)\005!A\010\040\000\343\030$!\303\030\212R\256s\256s\216s\216s\357{\060\204\020"
N "\204\020\204\313Z\303\020\202\020\000\000\000\000\000\000\000\000\000\000\206\061\015c\021\204\014k-"
N "k\216{\024\255Q\224R\224\317s\350\071\310\071\207\061f)\307A\344\030\203\020\202"
N "\020\004!\004!\040\000A\010\242\020\202\020\005!\247\061\247\061\004\031\303\020\004!jjIR\010b\247"
N "A\206)%!\303\030\000\000\040\000b\010\202\020\343\030\337\377\337\377\337\377\337\367"
N "\337\377\337\377\277\367\277\367\276\367\236\367\236\367\236\367<\347\232"
N "\326\367\275\226\265\024\245\262\224P\214\317{mkLkMkmkmkmkmkIBF)E)E)%!%!%!"
N "%!\004!\202\020A\010\242\020\202\020\040\000e)\020\204\357{\317{\256s\256s\256s\020\204"
N "\060\204\347\071A\010A\010\000\000\000\000\000\000\000\000\206\061\015c\355Z\253R\206\061\247\061"
N "JJ\354Z\314ZjJ\310\071F)\344\030\202\020\303\030\300(e)\000\000\040\000a\010\000\000\040\000"
N "A\010\202\020\004!f)\247\061\247\061\206)\307\061\350\071\010:\247\061%!f)%!\307\071"
N "\350\071\011:\350\071\242\020\040\000\000\000=\357=\357\035\367=\367=\367=\367\034\367"
N "\374\366\034\367\334\366\273\366z\366\232\366\232\366z\366z\366\071\366\030\366"
N "\030\366Y\366\070\366Y\356\030\336\070\316\266\275\226\265\317{E)\004!\004!\004!\004!"
N "\004!\004!\004!\344\030\040\000a\010A\010\040\000\040\000$!\357{\357{\317{\317{mkMkmk\256s\252"
N "Ra\010A\010\000\000\000\000\000\000%!\213R\213jM\323,\313\312\302jzjJ\213R\011Bf)\304\030"
N "a\010IJiJ\010B\204\071e)\000\000A\010\000\000A\010\343\030$!%!E)E)E)E)E)\004!f)\370\275r\214"
N "\010Bq\214\222\224\253R\256s\307\071jJ\216k%!!\000\310\023g\063\306Zer\345\221\345"
N "\251d\271\343\320\302\320\201\340\202\350\242\350\242\350\302\350\303\360"
N "\303\350\343\360\343\360\003\361\004\361D\361E\361E\361\246\371\347\371\212\372"
N "\010Z\004!\344\030\344\030\344\030\344\030\344\030\344\030\344\030\202\020\000\000A\010\040"
N "\000\000\000\000\000A\010,c\216s\256s\317{\256s,c\014cMkMk\004!$!\303\030\303\030$!)BJJ\253"
N "\202L\353l\373\252\252*J\350\071f)\005\031b\030!@\040p\014s\347\071\010Bc\071\004!\000\000"
N "A\010\040\000\344\030\004!\004!\004!%!\005!\004!\004!\344\030\203\020\004\031$)a\010iJ!\000\004!\212"
N "R$!$!\347\071\243\020\344\030\313Z\007\004(\004(\004(\004(\004(\004(\004\350\013G+\006KebEr\304"
N "\211C\251\003\311\343\330\343\330\343\340e\341Y\366\373\376\333\376\232\376"
N "\070\376\367\375\262\324\344\030\303\030\303\030\243\020\303\030\303\030\303\030\303"
N "\030\202\020A\010\000\000A\010\000\000\000\000\040\000b\010\347\071\347\071\010BIJiJiJ\010Be)$!$)"
N "A\010!\000\202\020\350\071jJnk\014[\216k\015cJJ\310\071E)\344\030\004)\343p\303\200E"
N "a\347\071(B\212R\242\020\303\030\202\020\000\000\202\020\344\030\004!\004!\344\030\344\040"
N "\004!\343\030\344\040\243\020\243\020\246\061A(\040@\040\010!\000e)\313Z\212J\246\061\347"
N "\071\242\020\344\030\004!(\004(\004(\004\010\004(\004(\004(\004(\004(\004H\004(\004(\004I\004H\004(\004\350\013"
N "\207#\006C,d\066\226\271\266<\327\236\357\337\367\337\377\323\224\303\030\242"
N "\020\243\020\242\020\243\030\243\020\243\020\303\030\202\020\040\000\040\000\040\000\000\000\000"
N "\000\000\000\000\000(BQ\214\357{\020\204\256s\263\224Y\316]\357\373\336\272\326\246\061"
N "\040\000\206\061-c\216sMc\354Z\257s\354Z\310\061\344\040\040\000\040\000\000\000\000\000\000\000\000"
N "\000\000\000A\000a\010\243\020%!\242\020\040\000\303\030\303\030\343\030\343\030\343\030\303"
N "\030\303\030\303\030\344\030\004!(B\302\040\000\010\000\000\000@\242\020\347\071e)IJE)iJiJM"
N "c\010B(\004(\004(\004(\004(\004(\004(\004(\004(\004(\004H\004I\004I\004I\004I\004I\004I\004\212\004\212\004\212\004"
N "\211\004i\004\351\013\307\022\350\"\346!\202\020\202\020\202\020\202\020\202\020\202"
N "\020\202\020\202\020b\010\303\030A\010\000\000\040\000A\010\000\000\000\000\242\020)k\014\214\022\255"
N "\326\275\364\234\357{MkIJ\252R-c\307\061-c\360{\020|\263\224r\214-c\247\061\005"
N "!A\010\040\010\040\000\040\000\040\000\040\000A\010\040\000\040\000\000\000\040\000a\010A\010\040\000\243\020"
N "\243\020\303\030\243\020\303\030\303\030\303\030\243\030\243\020\307\061(Bb\030\303"
N "\030\202\010\040\020\040\040a\010A\010\242\020\000\000\040\000A\010!\000\000\000(\004(\004(\004(\004(\004("
N "\004\010\004\010\004\010\004\010\004)\004)\004I\004)\004I\004I\004I\004I\004I\004I\004I\004\350\003\201\010\000\000F"
N "\022\343\010a\010b\010a\010a\010\202\020a\010\202\020a\010!\000E)\040\000\000\000\000\000A\010\000\000"
N "\000\000\302\030\345I\305AEZ%R\245\071Q\214\222\254\061\254\216\253/\274\312Z\354"
N "Z\354Z\253R\021\204LkH\243\304\030A\010\040\000\000\000\000\000\000\000\000\000A\010A\000\000\000\000\000\040"
N "\000\000\000\000\000\000\000A\010\202\020\242\020\242\020\242\020\242\020\242\020\243\020\242\020"
N "\202\020\247\061\246\061\202\030a\010A\010\000\000\000(\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
N "\000(\004I\004I\004I\004I\004I\004I\004)\004(\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004I\004I\004'\003a\010A"
N "\010&\032A\010A\010A\010A\010A\010A\010A\010a\010a\010\040\000E)\000\000\000\000\000\000\000\000\000\000\000\000"
N "a\020\011k\206b\242\020E)$!\242\020\303\030\303\030\004!\257{\020\204\025\245\025\245"
N "\061\204\015cf)e\232\246Af\061\246\061\004!\040\000\040\000\040\000\000\000\000\000\040\000\040\000\000\000"
N "A\010\000\000A\010A\010\202\020\202\020\202\020\202\020\202\020\202\020\202\020\242\020\202"
N "\020Mk\202\030A\010\040\000@\000\040\000\000(\040\000\040\000\000\000\000\000\040\000\040\000\000\000a\010\010\004"
N "\010\004\010\004\010\004\350\013\350\003\010\004\010\004(\004(\004(\004(\004(\004(\004\010\004(\004(\004(\004(\004"
N "H\024\250TD*\004!\014cfZ\040\000\040\000\040\000\040\000\040\000\040\000\040\000A\010A\010A\010\004!\000\000"
N "\000\000\000\000\000\000\000\000\000\000\201\020I{\210ZA\010\306\071\343\040\")\302\030\346Y+\344\214"
N "\203jJIB\311r\011\253\010\313\303\241\300\070\000\000\000\000\000\000\040\000\040\000\040\000\040\000"
N "\040\000\040\000\040\000A\010A\010\202\020\040\000\000\000A\010a\010a\010a\010a\010a\010\242\020b\010"
N "\243\020%!e)\040\010\040\000\040\000\000\000\040\000\000(\040\000\000\000\000\000\000\000\040\000\040\000\000\000A\010"
N "\347\003\307\003\307\003\350\003\010\004\010\004\010\004(\004I\004)\004I\004I\004I\004i\004i\004i\004\211,+e"
N "\254\255L\356\255\376b\061\307\071\206\061\005J\000\000\040\000\040\000\000\000\000\000\040\000\040\000"
N "\040\000\040\000\202\020\202\020\000\000\000\000\000\000\000\000\000\000\000\000a\010\251\213\007sD)\304A%RI"
N "J\251b\007\345\007\377\007\377\307\366\207\356H\356\351\372\245\371@\370\040\240"
N "\040\020\040\000\040\000\040\000\040\000\040\000\040\000\040\000\000\000\040\000\000\000\040\000\040\000\040\000\000\000"
N "\040\000A\010A\010A\010A\010A\010\247\061Ib\354j(B\202\020A\010\040\000\340\030\000\000\040\000"
N "\000\030\000\020\000\000\000\000\000\000\040\000\000\000\040\000\242\020\350\003\350\003\011\004)\004)\004)\004)\004\011"
N "\004(\014i\034j,\312D\012]l\205\314\265M\346\215\366\255\376\254\376\254\376\252"
N "\335\000\000\000\000\000\000\243\071\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\202\020a\010\000\000"
N "\000\000\000\000\000\000\000\000\000\000\000\000\040\000\040\000A\010A\010\040\000@\020\006\275G\377G\377G\377G"
N "\377&\377\343\376B\373`\360\040\320\040p\000\000\000\000\000\000\000\000\040\000A\010\202\020a\010"
N "\202\020a\010\000\000\000\000\000\000\000\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000$!\014\223\252"
N "\212\353ZE)\040\010\040\000\201\061\301\030\040\000\000\020\040\040\000\000\000\000\000\000\040\000\000\000"
N "A\010\303\030\350\003\307\003\307\003\307\003\310\003\350\003\350\003\247\003\004\214\344\304"
N "E\325\006\356G\376h\376\211\376\211\376\211\376\252\376\253\376\253\376\347"
N "\223\000\000\000\000\000\000\304A\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000a\010A\010\000\000\000\000"
N "\000\000\000\000\000\000\000\000\040\000`\000\241\000\201\010\040\000a\010\005\224F\377F\377F\377F\377E"
N "\377\342\376\040\376@\353\200\300@\230\040H\000\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000"
N "\040\000A\010A\010\202\020A\010A\010\000\000\000\000\040\000\040\000\040\000\040\000\040\000\243\020\253z"
N "\246a\004!\303\030\040\010\040\000\201BB\061\040\000\000\020\040(\000\000\000\000\000\000\040\000\000\000\242"
N "\020\242\020\307\003\307\003\350\003)\004)\004)\004J\004)\004\351\003\210\003\210\003g\003F\013\005\023"
N "$+dK\304c\004|\004\224C\254\302A\000\000\000\000\000\000DZ\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
N "\000\000a\010\243\020\004!\206\061\246\061db#)\000\000a@\004\201Eq\003I\000\000\241A\346\376E\377"
N "F\377F\377%\377\342\376@\376\200\374\240\311`\210\040(\000\000\000\000\000\000\000\000\000\000"
N "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000b\010\303"
N "\030$!!\000\247\061\040\010\040\000\201)b\010!\000\000\030\040\040\000\000\000\000\000\000\040\000\000\000\202"
N "\020\040\000\254\064\315<\254\064\254\064\213,J$J\034*\024\011\014\011\004\010\004\011\004\010"
N "\004\011\004\011\004\011\004)\004\011\004\211+\305\231\040\010\000\000\000\000\000\000\343p\000\000\000\000\000\000"
N "\000\000\000\000\000\000\000\000b\010%!e))BMk\263\224*s\252\264Q\214\313Z\206I\004\201\242\240"
N "\202\220\000\000c\305%\377%\377%\377$\377\342\376`\376\340\374\040\343\240\221"
N "\040\020\000\000\000\000\000\000\040\000A\010\202\020\202\020\303\030\303\030\243\030\242\020\202"
N "\020A\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000b\010\242\020%!!\000A\010\000\000\000"
N "\000\301\020\243\020A\010\000\060\243(b\010\040\000a\010a\010\040\000\040\000!\000\277\367\277\367"
N "~\357~\357=\347\277\367\277\377\277\377\337\377\337\377\277\377\277\367~\357"
N "\236\357\235\357}\347\235\347}\357\236\367U\275\000\000\000\000\000\000\040\000\212\242A"
N "\020\000\000A\010\000\000!\000\303\030\313R\364\234\247\061-c\253R\313Z\252R\342Y\212R\206"
N "\061\310\071)B\247\071e\061\350\071E{$\377$\377$\377$\377\002\377\200\376\000\355\301"
N "\252\"\202D\061\303\030E)f)\206\061\253R\323\234\222\224E)\222\224\307\071\253"
N "R\011B\206)f)E)\342Q\242\020\040\000\000\000\000\000\000\000\000\000\000\000\000\000A\010\202\020f)!\000\303"
N "\030\000\010\000\000A\010\303\020\040\000\040\060b\020\242\020\202\020a\010A\010A\010a\010a\010\277"
N "\377\277\377\277\377\277\377\277\377\277\377\277\377\277\377\277\367\277\367"
N "\337\377\337\377\337\377\337\377\337\377\337\377\337\377\337\377\337\377\262"
N "\224A\010\202\020\000\000\004!\266\265(B\000\000A\010\040\000a\010jJ\014c\347\071\353ZMk\222"
N "\224V\255\253{I{Mc\246\061\004!\202\020A\010A\010%!\305\335\345\376)\315\250\345"
N "\342\376\240\376`\355\301QD\061\004!\242\020\202\020\004!\344\030\243\020\344\030r\214"
N "\307\061\303\030\313Z\212RmkjJ\065\245\263\224\014c\"\264\003R%!\344\030b\010\000\000"
N "\000\000\000\000\000\000A\010!\000\242\020A\010e)\202\020\000\010\040\000\040\000\040\000\040@\202\020a\010"
N "A\010A\010a\010\242\020b\010\242\020\277\367\277\367\277\367\277\367\237\367\236"
N "\367\277\367\236\367\236\367\236\367\236\367\236\367\236\367\236\367\277\367"
N "\236\367\277\367~\357~\357\363\234\000\000$!\000\000f)E)\303\030\000\000\040\000b\010\350\071"
N "\010Bf)\247\061\004!\344\030\004!\243\020$!\307\071\004!\344\040\004!f)E!\243\020\004!\204"
N "\071\344j\003s#{\242j\241A\201\020\202\020a\020A\010a\010\202\020\004!\004!%!E)z\316Q\214"
N "r\214\307\071\374\336\307\071\014c\222\224nkIJa\071`\020\317{\263\224\061\204E)"
N "b\010\040\000\000\000A\010A\010a\010A\010\000\000\040\000\000\010\000\000\040\000\000\000AH$!\303\030b\010\202"
N "\020\202\020a\010\040\000A\010\273\326y\316\030\306\267\265U\255\024\245\363\234\363"
N "\234\363\234q\214Q\214\357{\216s\216s,c\353ZiJ\010B\010B\307\071A\010a\010\040\000"
N "\000\000\000\000A\010A\010A\010a\030b\040\242\030\303\070\343H\303\040\344\040%Q\004QEi\344H"
N "\343\060\303\060\303\030\344\030\004!%!f)\004!\202\020\202\020E)\242\020b\010a\010\243"
N "\030\242\020a\010A\010A\010b\010\243\060\242(\243\020\303\030\344\030%!\004!IJ\350\071"
N "\350\071\222\224\317sv\255\342Q\201z\202\020nkE)\202\020A\010a\010\040\000!\000\040\000"
N "\040\000\040\000\000\000\000\000!\030\000\000A\010a\070a(\202\020\303\030\202\020\040\000\000\000\000\000\000\000"
N "\040\000\307\071\206\061\246\061\246\061\206\061\206\061\206\061\246\061\307\071\307\071"
N "\347\071\307\071\347\071\246\061\206\061\246\061\206\061\206\061\246\061\206\061\306"
N "\071e)\246\061\246\061e)e)\303\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
N "\040\000A\010a\010A\010b\010\242\020\343\030a\010A\010\040\000\040\000!\000A\000A\010b\010b\010\202"
N "\020\202\020\242\020\243\020\343\030\344\040eyDy\242@\004i\004i\344\070\344\030\303(\303"
N "\040\202\020A\010A\000A\010b\010b\020E!,cA\010a\010A\010\000\000A\010a\010\040\000\000\000\000\000\000\000"
N "\000\000\243HaH\202P\040\000\000\000\000\000\000\000\000\000A\010\242\020\004!\206\061\307\071\307\071e"
N ")\206\061\347\071\307\071\246\061\307\071\246\061\246\061\246\061\307\071\206\061\206"
N "\061\206\061\206\061\246\061\347\071\010B\010B\010B(B(BIJ(B\010B\347\071\004!\000\000\000\000"
N "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$!IJ\347\071e)\004!A\010!\000A\010A\010!\000\040"
N "\000\040\000\040\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000A\010A\010A\020a\010A\010"
N "A\010a\010A\010\202\010\243\040\242(\202\060A\010a\020A\020A\010\040\010\000\000\040\000A\010"
N "\040\000\000\000\000\000\000\000a\010A\010\040\000\040\000\202\020a\010\242\020\303\030\004!\206\061\347"
N "\071\212RiJ\313Z\347\071\347\071\010B\010B\307\071\347\071\347\071\307\071\307\071\347"
N "\071\246\061\307\071\247\061\347\071\347\071\347\071\010B\347\071\010B\347\071\347\071"
N "\010BHJ(B(BiJiJ\010B\206\061\202\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000a\010E)$!E"
N ")E)e)E)E)\004!\343\030\303\030\303\030\303\030\242\020\303\030\242\020\242\020\242\020"
N "\202\020a\010A\010A\010\040\000\000\000\000\000\000\000\000\000\000\000\040\000\040\000\040\000\040\000A\010A\010A"
N "\010a\010A\010a\010a\010\000\000\040\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\246\061A\010"
N "a\010\307\071(BiJ\212R\252R\252R\353Z\353Z\353Z\353ZIJ(B(B(B(B\010B\010B\010B\347"
N "\071\010B\010B\010B\347\071\347\071\347\071\010B\010B\010BIJ(B\212RiJ\010B\010B\347\071"
N "\206\061e)\343\030\242\020a\010a\010a\010a\010A\010A\010A\010A\010A\010A\010a\010\202\020"
N "\242\020\303\030\303\030\303\030\303\030\343\030\343\030\343\030\343\030\303\030\343"
N "\030\303\030\242\020\242\020\202\020a\010a\010a\010A\010A\010A\010A\010a\010a\010A\010a\010"
N "a\010a\010\202\020\202\020\242\020\242\020\303\030\242\020\242\020\243\020\040\000\000\000"
N "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000a\010\004!E)\010BiJ\212R\252R\014c\313Z\312Z\353"
N "Z,c\353ZIJIJ(B(BIJ(B(B\010B\347\071\010B\010B)BiJ\212RIJiJ\212RIJ\010B\347\071\307"
N "\071\307\071e)$!\004!\303\030\202\020a\010a\010A\010a\010a\010a\010a\010\202\020\202\020"
N "\242\020\242\020\303\030\303\030\343\030\004!$!$!$!$!$!$!\004!\004!\343\030\303\030\303"
N "\030\242\020\202\020a\010a\010a\010\202\020\242\020\303\030\303\030\303\030\303\030\343"
N "\030\343\030\004!\343\030\343\030\004!\004!\343\030\343\030\303\030\242\020\202\020a\010A"
N "\010A\010\040\000\040\000\040\000\040\000\040\000\040\000A\010A\010\202\020\343\030\206\061\347\071"
N "IJIJ\212R\212R\252R\353Z\313Z\313Z\014ciJIJiJIJiJIJ\212R\212R\252R\252R\313"
N "Z\313Z\313Z\353Z\353Z\252R\313Z\252R\313Z\252R\212R\252RIJIJ\010B\347\071\246"
N "\061\206\061E)$!\004!\004!\303\030\303\030\303\030\202\020a\010\202\020\202\020\202\020"
N "\202\020\202\020\242\020\242\020\202\020\242\020\202\020a\010\202\020a\010a\010a\010a"
N "\010a\010a\010\202\020\202\020\202\020\202\020\242\020\242\020\303\030\303\030\303\030"
N "\303\030\343\030\303\030\303\030\303\030\303\030\302\030\303\030\242\020\242\020\242"
N "\020\242\020\242\020\242\020\242\020\242\020\303\030\343\030\004!E)\246\061\307\071\347"
N "\071(B(BiJiJ\313Z\353Z\313Z\014c\353Z,c\014c\353Z\014ciJiJ\252R\252R\313Z\313"
N "Z\313Z\252R\252R\353Z\353Z\353Z\353Z\353Z\353Z\353Z\014c\014c\014c\353Z\014c\353"
N "Z\014c\353Z\014c\014c\353Z\313Z\313Z\313Z\313Z\252R\252R\252R\252R\313Z\313Z"
N "\252R\212R(B\347\071\347\071\307\071\246\061\206\061e)e)e)e)$!e)E)E)e)e)e)E)E)"
N "$!\004!\004!E)\206\061\246\061\246\061\246\061\246\061e)e)\206\061\246\061\246\061\246"
N "\061\246\061\307\071\307\071\246\061\246\061\307\071\347\071(B(BiJ\252R\252R\252R"
N "\313Z\313Z\014c\252R,c,c,c\014c,c,c,c,cmkMk\252R\313Z\252R\212R\252R\252R\313"
N "Z\313Z\313Z\313Z\353Z\313Z\313Z\353Z\353Z\313Z\014c\014c\014c\014c,c\014[\014c\014"
N "c\014c\014c\014c,c,c,c\014c\014c,c\014c\353Z\252R\313Z\252R\313Z\313Z\313Z\353Z"
N "\353Z\014c\313Z\353Z\353Z,c\014c,cMkMkMk\014c\353Z\253R\212R\212R\313Z\014cMk"
N "\256smk\216s\256s\317{\216s\216s\216s\256s\317{\317{\357{\256s\256smk\216"
N "smk\216s\256s\317{\317{\216s\216smk\216s\216smk\256s\216smkmkmk\216smk\216"
N "s\216s\256smk\216s\212R\252R\252R\313Z\313Z\252R\313Z\353Z\353Z\353Z\353Z"
N "\353Z\353Z\014c\014c,c\014c\014c\014c,c\014c\014c,c\014c,c\014c\014c,c\014c\353Z\313"
N "Z\313Z\313Z\313Z\312Z\313Z\313Z\014c\353Z,c\014c,k,cmkMkmkMkMkMk,c\014c\353Z"
N "\313Z\253R\353Z\354b\014cnkmk\216s\317{\020\204\317{\020\204\020\204\020\204\357"
N "{\317{\256s\357{\357{\317{\317{\357{\357{\256s\316{\317{\256s\216s\216s\256"
N "s\256s\317{\256s\256s\216s\256s\216smkMk\216smkmk\216smkmkmk,c\014c\313Z\313"
N "Z\313Z\313Z\353Z\353Z\353Z\353Z\353Z\353Z\014c\014c\353Z\014c\354Z\014c\014c,c"
N "\014c\014c,c\014c\353Z\353Z\252R\353Z\353Z\353Z\014c\313Z\313Z\353Z,c\014c\353"
N "Z,c,c,cmkmkmkmk,cMkmkmk\256s\256s\216s\256s\216s\317{\317{\256s\256s\216s"
N "\216s\256s\357{\357{\357{\317{\256s,c\252RjJ)B\212R,c\256smk\256s\216s\256"
N "smk\216s\216s\216s\216s\256s\216s\216smk,cmkMkmkMkmkMk\216smkMk,c\014c\014c"
N "\353Z\353Z\014c\252R\313Z\353Z\353Z\353Z\313Z\313Z\353Z\353Z\353Z\313Z\353"
N "Z\353Z\353Z\353Z\313Z\353Z\313Z\313Z\252R\313Z\252R\313Z\014c\014c\014c\014c,"
N "cMkMk\216s\216sMkmkMkmkmk\256smk\256s\216sMkmk\216s\216s\357{\256s\317{\317"
N "{\317{\317{\357{mkMkMk,cmk\014c\014cMk\256s\256smk\354Z\313Z\353Z,cMkmk\216"
N "smk\216smkmk\216sMkMkMkmkmkMkMkmkmkmkmkmkmkMkmkMk,c,c\014c\014c\014c\014c\014c"
N "\014c\353Z,c\313Z\252R\252R\252R\252R\313Z\252R\252R\252R\212R\252R\212R\252"
N "R\252R\313Z\313Z\313Z\313Z\313Z\353Z,c,cmk\216smk\216s\256smk\256s\216s\256"
N "s\256s\216s\216smk\256smk\216smk\317{\256s\357{\317{\317{\357{\357{\317{\256"
N "s\317{\216s\256s\357{\317{\216sMkmk\216s\256s\256smk\216s\216s\216s\256s\216"
N "s\216s\216s\216s\216s\216s\216s\216s\216smkmk\216s\216s\216s\256s\216smk\216"
N "smkmkMkMkMk\014c\014c,c,c,c,c\353Z\014c\353Z\014c\014c\014c,c\212R\212R\212R\212"
N "RiJiJ\212R\212R\252R\252R\212R\252R\313Z\313Z\014cMk,c,c,c\353Z,c,cMkMkmk\216"
N "s\256s\216smk\256s\256s\216s\216smk\256s\216s\256s\256s\357{\317{\317{\317"
N "{\256s\317{\256s\256s\256s\317{\256s\216s\256s\317{\317{\216s\256s\216s\216"
N "s\256s\216s\256s\216s\256s\256s\256s\216s\256s\216s\216s\216smk\216s\216s"
N "\216smk\216s\216smk\216smk\216smkmkmk,cMkMkMkMkMkMkMkMkMk,c,c\014c\014c\353"
N "Z\212RiJIJiJiJ\212R\252R\252R\313Z\313Z\014c,c,cMk,cmkmkmkMkMkMkmkmkmk\216"
N "s\216smk\256s\256s\216s\256s\216s\317{\317{\357{\317{\357{\020\204\357{\357"
N "{\317{\317{\256s\317{\256s\256s\256s\256s\317{\317{\256s\256s\256s\216s\317"
N "{\216s\256s\216s\216smk\216smkmkmk\215s\216smk\216smk\216sMkMkmk\216sMkmk"
N "mk\216smkmkmk\216s\216smkmkMkMk,cMk,c\014c\014c\313Z\252R\212RiJiJiJ\212R\313"
N "Z\353Z\014c\313Z\353Z\014c\014c,c\014cMkMk,cMk,c,c,cmkmkmkmk\216s\256s\256s\216"
N "s\256s\317{\256s\317{\256s\317{\020\204\357{\357{\357{\357{\256s\317{\357{"
N "\317{\317{\357{\256s\317{\317{\256s\256s\256s\317{\256s\216s\216s\256smk\216"
N "smkmkMkmkMkMkMkmk\256s\216s\216s\216smk\216s\216s\216s\216sMkmkmkmkMkmkmk"
N "mkmkMkMkMkMkMk,c\014c\353Z\313Z\212RiJiJ\212R\313Z\313Z\014c,c,c,c,c,c,c\014"
N "c,c,c,c\014c,c\014cMkMkLkmkMkmk\216s\216s\256s\317{\256s\256s\317{\256s\256"
N "s\216s\317{\316s\256s\317{\256s\317{\317{\357{\317{\317{\256s\256s\256s\317"
N "{\317{\256s\256s\317{\216s\256s\216smkmkmkmkmk\216smk\216s\216s\256s\256s"
N "\256s\256s\256s\256s\216s\216smkMkMk,c\014c,cMkmkmkmkMkMkmkmkMkMk,c\014c\353"
N "Z\252R\252R\212R\252R\252R\252R\353Z\014cMkmkmkLcMkLk,cMk\014c\014c\014c\014c\353"
N "Z,c,cMkMkmkMkmk\216s\216s\216s\256s\317{\317{\256s\216s\256s\256s\256s\216"
N "s\317{\256s\317{\317{\256s\256s\317{\256s\317{\256s\216s\316{\317{\256s\317"
N "{\317{\317{\256s\256s\256s\216s\216s\216s\216s\216s\216s\317{\256s\216s\216"
N "s\215smk\216s\216smkMkMkMkmkMkMk\216s\216smkmkmkMkmkMkMk\014c\014c\353Z\212"
N "RiJiJ\212R\212R\252R\252R\353Z\014cMkmkMkMkMk\014c\014c\014c\014c\353Z\313Z\353"
N "Z\353Z\353Z\353Z\353Z\353Z\313Z\313ZMk\215sMkmkmk\216s\256s\216s\216smk\216"
N "s\216s\216s\216s\256s\216s\216s\216s\256s\256s\256s\256s\256s\256s\317{\317"
N "{\256s\317{\317{\256s\256s\256s\216smkmkmkmkMkmk\216s\216s\216s\216s\216s"
N "\216s\216s\216smk\216smkMkmkmkMkmkmkmkmkmkmkMk,c\014c\353Z\313Z\212RiJIJ(B"
N "(BiJ\212R\252R\313Z\353Z\014c\014c\014cMkMk\014c\353Z\353Z\353Z\353Z\353Z,c\014"
N "c\353Z,c\353Z\313Z\313Z\353Z\014c\353Z\353Z\313Z\353Z\353ZMkmkmkmk\216s\216"
N "smkmk\216smk\216s\216s\216s\256s\256s\256s\256s\256s\317{\256s\256s\256s\216"
N "s\216s\216s\216smkMkMkMkmkmkmkmkmk\216s\216s\256s\256s\216s\216s\216smkMk"
N "MkMkMkMkmkmkMkMkMk,c,c\014c\353Z\313Z\253R\212RiJiJiJ\212R\212R\212R\212R\252"
N "R\252R\313Z\353Z\014c\014c,c,c,cMkMk,c,c,c,c,c\014c\014c\014c\353Z\353Z\353Z\353"
N "Z\014c\014c\353Z\014c\014c\014c\353Z\313Z\353Z\313ZMkmkmkmkmkmkmk\216s\256s\216"
N "s\216s\256s\256s\256s\216smkmkMkMkMk,c,cMkMkMkMkMk\216smkmk\216s\216s\216"
N "s\216s\215s\216smkMk,c,c\014c,c,cMk,c\014c,c\353Z\353Z\313Z\313Z\252R\252R\212"
N "R\252R\212R\212R\212RiJ\252R\212R\252R\313Z\353Z\353Z\353Z,c,c,cMkMk,c,c\014"
N "c\353Z,c\014c\014c\014c\353Z\014c\014c,c,c,c,cMkMk,cMkMk,c\014c\014c,c\014c\313Z\313"
N "Z\252R\313ZMkmkmkMkmkMkmkmkMkMk,cMk\014c\014c\014c,c,c,c,cMkMkMkmkMkmkMk\216"
N "smkmkMkmk,c,c,c\014c\014c\353Z\353Z\353Z\313Z\313Z\313Z\252R\252R\252R\313Z"
N "\252R\313Z\313Z\353Z\353Z\313Z\252R\252R\252R\252R\313Z\353Z\353Z\014c,c,c"
N ",c,c,c\014c\014c\353Z\353Z\014c\014c\014c,c,cMkMkmkMkmkMkMkmkmkmkmkmkmkmk,c,k,"
N "c\014c\014c\014c,c\014c\353Z\014c\353Z\353Z,c,c,c,c\014c\353Z\353Z\353Z\353Z\353"
N "Z\014c\013c\014c\014c,c,cMkMkMkMkmk,c,c\014c\353Z\353Z\353Z\313Z\313Z\313Z\252"
N "R\252R\212R\252R\252R\252R\252R\313Z\353Z\353Z\014c,c,c\013c\353Z\014c\014c\313"
N "Z\353Z\353Z\014c\014c\014c\014c\014c,c\014c\353Z\014c,c,c\353Z,c,cMkMkMkmkmk\216"
N "smkmkMkmkmkMkmk\216smkmkMkMk,c,c\353Z\313Z\252R\252R\252R\313Z\313Z\353Z\313"
N "Z\313Z\252R\212RiJIJ(B(B\252R\252R\252R\252R\313Z\313Z\313Z\353Z\353Z\014c"
N "\014c,c,c,c\014c,c,c\014c\353Z\313Z\252R\212R\212R\212RiJiJ\252R\252R\313Z\313"
N "Z\313Z\313Z\353Z\353Z\014c,c\353Z\353Z\313Z\014c\353Z\014c\353Z\353Z\014c\014c"
N "\014c\014c\014c\014c\014c\014c,c,c\014c,cMkMkMkMk\216smk\216smk\216smkMk\216smk\216"
N "smkmkMkLk,c\014c\353Z\353Z\313Z\252RiJIJIJ(BIJIJ\212R\252R\252R\211JIJIJ(B"
N "(B(B\010B(B(B(BIJ\313Z\313Z\353Z\014c\353Z\353Z\014c\014c\353Z\313Z\313Z\252R"
N "\212R\212RiJiJiJiJiJ\212R\252R\353Z\353Z\353Z,c\014c,c\014c\014c\014c\353Z\353"
N "Z\014c\353Z\014c\353Z\313Z\353Z\353Z\313Z\252R\313Z\353Z\014c\353Z\014c,c,c,c"
N "Mkmkmkmkmkmk\256s\216s\216s\216s\216s\216sMkmk,c,c,c,c,c\353Z\313Z\313Z\252"
N "R\212R\212RIJIJ(B(BIJiJiJ\212R\212RiJIJIJIJ(B\010B\010B(BIJIJIJIJiJiJIJIJIJ"
N "\353Z\313Z\313Z\252R\212R\212RiJiJiJ\212R\252R\252R\252R\313Z\353Z\014c,c,"
N "c\014c,c,c\014c\014c\353Z\353Z\252R\313Z\252R\252R\252R\252R\252R\353Z\353Z\353"
N "Z\353Z\014c,cMkMkMkMkMkMkMkMk,c,cMkmkLcMkMkmkMkMk-cMk,c\014c\014c\353Z\353Z\252"
N "R\313Z\313Z\212R\212RiJiJiJiJiJiJiJiJiJiJIJIJ(B(B(B(B(BIJIJiJiJIJIJiJIJiJ"
N "IJIJiJIJ(B\010BIJIJIJiJ\252R\252R\252R\353Z\353Z\353Z\353Z\353Z\353Z\353Z\313"
N "Z\353Z\313Z\353Z\353Z\353Z\353Z\353Z\014c\014c\014c\014c\014c,c,c,c,cMk,c,c,c\014"
N "c\014c\014c\014c\014c\014c,c,c\014c,c,cMk,c,c,c,c\014c\353Z\014c\353Z\313Z\312Z\252"
N "R\252R\212RiJ\212R\212R\212RiJiJiJiJiJiJIJIJIJIJ(BiJiJ\212R\212R\252R\252"
N "R\252R\252R\212R\212R\313Z\252R\212RiJiJ\212RiJIJIJ(B(BIJiJ\212R\252R\252"
N "R\252R\313Z\313Z\313Z\353Z\353Z\353Z\313Z\353Z\353Z\313Z\353Z\353Z\014c\014"
N "c\353Z\353Z\353Z\353Z\313Z\313Z\313Z\252R\252R\313Z\313Z\353Z\313Z\313Z\313"
N "Z\252R\313Z\353Z\353Z,c\014c\353Z\014c,c\014c\014c\014c\014c\353Z\014c\353Z\014c\353"
N "Z\353Z\353Z\313Z\353Z\313Z\313Z\252R\212R\212R\211RIJ(B(BIJIJ(BIJIJIJiJiJ"
N "iJiJ\212R\212R\212R\252R\252R\212R\212R\212R\212RiJIJIJIJiJiJIJiJ\212R\212"
N "R\252R\353Z,c\014cMk,c,cMk,c\313Z\313Z\313Z\252R\313Z\212R\252R\252RiJiJiJ"
N "IJiJIJ(BIJIJiJiJ\212R\212R\212R\252R\212R\212R\252R\252R\312Z\313Z\353Z\014"
N "c\014c\014c\014c\014c\014c\014c\014c,c,c\014c\014c\014c\014c\014c\353Z\353Z\014c\014c\353"
N "Z\252R\252R\212R\212RiJIJIJ(B(B(BIJiJ\212R\212R\212R\212R\212R\252R\252R\312"
N "Z\252R\252R\252R\212R\212RiJiJiJ\212R\252R\312Z\313Z\353Z\014c\014c,c\014c,c"
N ",cMkmkMk,c,c,c,c\014c\353Z\014c\014c(B(B(B(B(B(B\010BIJIJIJiJIJiJ\212RiJ\212R"
N "\212R\212R\212R\252R\313Z\252R\353Z\353Z\014c\353Z\014c\014c\353Z\353Z\353Z\353"
N "Z\014c\014c\353Z\313Z\353Z\014c\014c\014c\353Z\353Z\313Z\252R\252R\252RiJiJIJI"
N "J(B(B(BIJiJiJ\212R\252R\212R\252R\252R\252R\313Z\313Z\212R\252RiJ\252R\252"
N "R\252R\252R\313Z\313Z\353Z\014c\014c\014c\014c,c,c,c,cMk,c,c,c,c\014c\353Z\353"
N "Z\353Z\353Z\313Z\252R\252R\313Z\252R\313Z\313Z\313Z(B(BIJ(BIJiJIJiJiJ\212"
N "R\212R\252R\252R\313Z\252R\313Z\353Z\353Z\353Z\353Z\353Z\353Z\353Z\014c\353"
N "Z\313Z\252R\313Z\313Z\313Z\313Z\353Z\353Z\353Z\353Z\353Z\313Z\313Z\212R\212"
N "RiJ\211R\212RiJiJ\212R\212R\212R\212R\212R\212R\212R\212R\212RiJiJ\252R\252"
N "R\252R\212R\252R\252R\212R\313Z\313Z\353Z\014c\014c,cMk,c,c\014c\353Z\353Z\353"
N "Z\014c\014c\353Z\313Z\353Z\353Z\353Z\353Z\313Z\313Z\353Z\014c,cmk\256s\020\204"
N "Q\214\222\224\364\234\065\245v\255\327\275\370\275\071\306IJiJiJ\212R\252R\252"
N "R\252R\252R\313Z\313Z\313Z\313Z\353Z\353Z\313Z\353Z\313Z\313Z\353Z\252R\252"
N "R\252R\313Z\313Z\353Z\353Z\014c\353Z\313Z\252R\212R\212RIJIJ(B(B(BIJIJIJiJ"
N "iJiJiJ\212RiJ\212R\252R\252R\313Z\252R\252R\313Z\212R\252R\312Z\313Z\353Z"
N "\353Z\313Z\353Z\014c\353Z\353Z\353Z\353Z\313Z\353Z\353Z\353Z\014cMkMk\216s\317"
N "{\020\204q\214\222\224\364\234U\255\267\265\370\275\071\306Z\316z\326\232\336"
N "\034\347]\357^\357~\357~\357\236\367\236\367\277\367\277\367\237\367\236\367"
N "\236\367\236\357~\357\212R\212R\212R\252R\252R\313Z\313Z\313Z\313Z\313Z\313"
N "Z\252R\313Z\252R\353Z\252R\313Z\353Z\353Z\313Z\313Z\252R\212RiJiJ(B\010B\347"
N "\071\347\071\347\071\307\071\010B\347\071\010B(BIJIJiJ\212R\252R\252R\252R\313Z\313"
N "Z\252R\252R\252R\313Z\313Z\353Z\353Z\353Z\353Z\014c,cMknk\256s\360\203\061\204"
N "\222\224\364\234\024\245U\255\226\265\327\275\070\306Y\316z\326\232\336z\346"
N "Z\346\370\345\330\345\226\345\065\345\364\344\323\344r\344\360\343\217\343"
N "-\343\354\342\313\342j\332(\332\253\342\257\343r\344\324\344v\345\071\356\333"
N "\356\035\357=\357]\357]\357]\357]\357^\357\312Z\252R\313Z\313Z\252R\313Z\313"
N "Z\252R\252R\313R\252R\212RiJIJIJ(B\010B\010B\347\071\307\071\246\061\307\071\347"
N "\071\307\071\347\071\010B\010B\010BIJiJiJ\212R\212R\212R\252R\252R\313Z\353Z\353"
N "Z,cMk\216s\317{\020\204r\214\323\234\024\245u\255\226\265\367\275\030\306Y\326"
N "Y\326Y\336\071\336\370\345\227\345U\345\364\344\323\344r\344\021\344\317\343"
N "\257\343N\343N\343\314\342\253\342I\342)\342\307\341\307\341\206\341\246\341"
N "\247\341\246\341\246\341\246\341\246\341\246\341\246\341\246\341\246\341\246"
N "\341\246\331\246\331\246\331\246\341\246\341\206\331\206\331\246\331\307\331"
N "\010\332J\332\253\332\015\333n\333\360\333R\334\212R\212R\212RIJIJ(B\010B\347"
N "\071\307\071\307\071\246\061\206\061\206\061\206\061\246\061\246\061\246\061\307\071"
N "\347\071\010B(BIJ\212R\253R\014cMknk\257s\360{Q\214\222\224\364\234U\255\267"
N "\265\370\305Y\316z\316\031\326Y\336\031\336\071\336\031\346\330\345v\345\025\345"
N "\222\344\360\343\217\333M\333\313\332\212\342I\342\010\342\350\341\307\341"
N "\307\341\307\341\307\341\307\341\306\341\246\341\246\341\246\341\246\341\247"
N "\341\247\341\307\341\246\341\246\331\206\331e\331e\341e\341e\331\206\331\206"
N "\341\246\331\246\331\246\341\246\341\307\341\246\341\246\341\246\341\246\341"
N "\246\341\246\341\246\331\246\331\246\331\246\331\246\331\206\321\206\321\206"
N "\321\206\321\246\321\246\321\206\321\206\321\206\061e)e)\206\061f)\246\061\307"
N "\071\347\071(BjJ\253R\353Znk\317{Q\214\222\224\363\234\065\245\267\265\030\306"
N "Y\316\232\326\333\336\374\336=\347=\347]\357~\357~\357]\347\236\367\236\367"
N "\236\367\237\367\236\367\236\367=\357v\345\324\344\021\334\257\333M\333\313"
N "\332I\332\010\332\307\331\246\331\246\341\246\341\246\341\246\341\246\341\246"
N "\341\246\341\307\341\307\341\307\341\307\341\307\341\307\341\307\341\307\341"
N "\307\341\307\341\307\341\307\341\307\341\307\341\307\341\307\341\307\331\307"
N "\331\246\331\206\331e\331E\331$\331\003\321\343\330\343\330\004\321$\321$\311"
N "e\321\206\341\246\341\206\341\206\331\206\331\206\331\206\331\206\331\205"
N "\331\206\331e\331e\321e\321e\311e\301e\261\020\204\222\224\024\245v\255\330"
N "\275\071\306\232\316\273\326\374\336\034\347=\347]\347]\357~\357~\357~\357~"
N "\357\236\357\236\357\236\367\236\357\236\357\236\357\236\367\236\367\236\367"
N "\236\367\236\367\236\367\236\367\236\367\236\367\236\367\236\367\236\367\236"
N "\367\236\367\236\367\236\367\236\367~\357~\357]\357\034\357\333\346Y\346\327"
N "\345U\345\263\344R\344\020\344n\333\015\333\253\332I\332\350\331\307\331\246"
N "\331\246\321\307\331\307\331\307\341\307\341\307\341\307\341\307\341\307\341"
N "\307\341\307\341\246\331\246\331\307\341\247\341\246\331\246\331\246\331\246"
N "\331\246\321\246\331\206\321E\311\004\301\303\270\202\250\242\240\343\220$\221"
N "$\221e\211e\201eq\205a\245Q\306A\346\061\006*\006\"\006\022&\012G\012]\357]\357^\357"
N "]\357~\357~\357~\357~\357~\357^\357^\357~\357~\357~\357~\357^\357^\357~\357"
N "~\357~\357~\357~\357~\357\236\357\236\357~\357\236\357\236\357~\357~\357~"
N "\357~\357~\357~\357~\357~\357~\357~\357~\357~\357~\357~\357^\357~\357]\357"
N "\236\367~\357~\357~\357~\357}\357]\357=\357=\357\374\346z\346\030\346V\345"
N "Q\344\014\343)\332\246\321\246\321\246\311\206\311\206\301\206\271e\251e\241"
N "E\221e\211$yDqeaeQ\205I\245A\245\061\305)\306!\346\031&\022'\022G\012g\012\207\002"
N "\207\002\207\002\250\002\250\002\247\002\310\002\350\002\350\002\350\002\310\002\250\002\310\002\310"
N "\002\310\002]\347]\347=\347]\347]\357]\357]\357]\357]\357]\357]\357]\357]\357"
N "]\357]\357]\357]\357]\357]\357=\347\034\347\034\347=\347]\357]\357]\357]\357"
N "]\357]\357]\357]\357]\357~\357~\357~\357~\357~\357~\357~\357~\357~\357~\357"
N "~\357~\357~\357~\357~\357~\357]\357=\347\374\336\273\326z\316\030\306\266\255"
N "\064\235\262\204Q|\316cLS\211B\305)\006\032\006\022\006\022G\012F\012\207\002\207\002\207"
N "\002\207\002\247\002\310\002\350\002\350\002\011\003\011\003\011\003)\003)\003)\003)\003)\003)\003)\003)\003)\003"
N ")\003\011\003\011\003\011\003\011\003\011\003\010\003\350\002\310\002\350\002\010\003\010\003\010\003\034\347"
N "\034\347=\347=\347=\347=\347=\347=\347=\347]\347=\347]\347]\357]\347]\357]"
N "\357]\357]\357]\357]\357]\357]\357]\357]\357]\357]\357]\357]\357]\357]\357"
N "]\357=\347<\347\374\336\333\336\273\326\273\326z\316\071\306\327\265u\245\024"
N "\235\222\204\060t\357k\316cmS+K\012K\350J\010K(K\307:\307*\310\032\207\002\310\002"
N "\350\002\350\002\011\003)\003)\003)\003\011\003)\003I\003j\003j\003I\003j\003j\003j\003j\003i\003j\003J\003J\003J\003"
N "J\003I\003I\003I\003)\003I\003I\003I\003I\003I\003I\003I\003I\003)\003)\003\011\003\011\003\010\003\011\003\350\002\350"
N "\002\350\002");
N
L 23 "Blinky.c" 2
N#include "merc.c"
L 1 "merc.c" 1
N/* GIMP RGB C-Source image dump (merc.c) */
N
N#define MERC_WIDTH (100)
N#define MERC_HEIGHT (100)
N#define MERC_BYTES_PER_PIXEL (2) /* 2:RGB16, 3:RGB, 4:RGBA */
N#define MERC_PIXEL_DATA ((unsigned char*) MERC_pixel_data)
Nstatic const unsigned char MERC_pixel_data[100 * 100 * 2 + 1] =
N("\347\252\354z\357B\357\062\357\062\317\062\360\062\357\062\316:K:\310)h\031\252"
N "\021-\032n\"N\"-\",\"\251!F!e\061\010Jos\021\204\321\203\214j*b\254Z\254J*:F\031"
N "\203\010!\000A\000b\010\343\030e)\246\061e)$!\004\031\004\031F!&\031&!\005!\005\031\304\030\303"
N "\030\344\040\004)\303(A\030!\000!\000!\000A\010b\010\243\020\207\061.s\022\224S\224S\224\325"
N "\234\227\265\371\275\331\305w\305\066\305V\275\325\274P\273(\271\013\262\062"
N "\264w\275\270\275\270\305w\275\066\275\324\254\264\244s\214\322sLB\305\030c"
N "\010B\010b\010A\010A\010!\000A\010\243\020\004!%!\004!$!\244\071f\232\212j\316B\357\062\357"
N "\062\320\062\320\062\317\062\316:K\062\311)h\031\252\021-\032o\"M\"\014\"\353!\250"
N "!%!%\071\307Y\314jNs\016s\251a\251aJZ*Bg!\203\010A\000!\000A\000\202\010\003!D\061e\061"
N "D)\004!\004!\344\030\303\020\243\020\243\020\202\010\243\020\304\020\344\020\005\031\004!\303"
N "\030b\010!\000!\000!\000A\010b\010\203\020\345(\352i\016\233O\243p\243\261\243\022\254"
N "t\264\224\274\224\274t\274S\274\321\273,\262\245\260H\261\356\262\362\263"
N "\022\264\062\274S\274S\264\224\264\264\254\223\254S\234\260\203\311\071\244\020"
N "\243\020\303\020\202\020A\010A\000A\010\243\020%!E)$)$)\243\071\347a(R\254J\356B\317"
N "\062\317\062\317\062\357\062\316\062K\062\311)h\031\313\021-\032o\",\"\312)\250)f)"
N "E\071DQ\305yH\202\212r)RGY\351i\213b*B&!c\010A\000b\010\202\020\242\020\343\040\003"
N "\061$\061\003!\003!\004!\004!\344\030\243\020\243\020\243\020%\031f!\207!f!\005\031\244\020B"
N "\010!\000A\000!\000b\010b\020\202\020\203(\244`\305\220'\231\211\231\251\241i\251\211"
N "\251\252\251\013\262\013\262\353\261'\261\245\260c\260\204\260'\261h\251i\261"
N "\211\261\312\261\352\261\352\251K\252\356\262o\263\315\222\012b&)F!F!\344\030"
N "\201\020\242\030\302\030\004!e)\246\071\205\071$)C)\307A\307IjR\315J\357\062\357\062"
N "\357\062\357\062\316:\254:\012*\211\031\313\031-\032n\"\013*\207\061\205I\344q\004\222"
N "C\252\243\302G\313K\243\212j\351Y.{s\224\022|\310)\203\010\243\020\343\040\004\061"
N "$\061$\061\003\061\003\061\343(\004\061%\071%\061%!\344\030\344\030E!\350\061):):\310)%\031"
N "\243\010B\010A\000!\000A\000b\010\202\020\203\020\303(\304hd\220\244\230\345\230\305"
N "\230D\240d\250d\250d\250\205\250\204\250c\260C\260C\260C\260C\250C\250d\260"
N "d\270d\270c\260c\250d\250\305\260'\261g\241gqg\071\207\061\247\061e\061$\061#\061"
N "d\061e\061\246\061\306A\246\071e\061\003\031\247\071)R\254Z\316B\356\062\357\062\357"
N "\062\017;\322K\225lTd\317\062\313\031\015\032-\"\012:\205I\003\222\303\302\004\323c\343"
N "\304\343\214\344\321\314\021\234\320\213\324\244\370\275\270\265\260kG\031\344"
N "\030e\071\205IeIDA#\071\003\061\343\060\004AfI\206A\246\071E)f)\347\071jBjBJ:\350\071"
N "E)\303\030b\010A\010A\010\242\020\004!%!\004!F\061\311i\251\221G\221g\211h\221\210\231"
N "\352\241\012\252\351\251\311\261\251\251\346\250c\250\245\260'\261\210\251"
N "\211\251\352\251\013\262\251\271\346\260\204\250\204\250\244\260\204\260\204"
N "\240\305xgI\310A\350A\306I\346Q\006R\347I\347A\347A\347A\307A\246\071$!\017St"
N "t\326\204\363c\020;\357\062\017;PC\266ly\215\231\225UlN\"\015\032,*\011B\006r\205"
N "\252E\323\246\333\245\333(\344\060\345\225\325V\265\025\245\330\275\273\326"
N "z\316\325\234\351\061f\061\347Q\307YeQ#\071\003\061\343\040\343(\004\071\206I\347I\010"
N "B\347\071\307\071(BJB*B)B\347AE\071\343(\202\020A\010\243\020d)'R'R\307\071\351\071"
N "\355jO\213\213\212J\202\355\212o\233\321\233\361\243\217\253n\263\355\252"
N "*\252\306\250H\251\315\252\261\263\362\253\022\254\224\274\224\274\322\273"
N "\316\262l\252\215\252l\262\012\252\251\221\310Y\011B(RGbhjhb(R(B\007B\347I\007J"
N "\306\071$!\226l\372\245\372\255\265|PC\357\062\356:/CSl\067\215\067\225\064tM*"
N "\354\031\013*\011Jhzi\253l\314l\314\312\313\352\313\321\314U\305\227\265w\265"
N "\370\305Z\316\370\275s\214\012:\307A(Z\010Z\205A$\061\343(\303\030\303\030\344"
N "(E\061\247\071\307\071\307A\307A\347I\247A\247\071\307A\247IeI\343\060b\020b\010"
N "\343\030\347I\311z\250r(R*B\315Zo{\015\203\354\202n\203\361\223R\234\061\234"
N "\360\243\256\253M\253\254\242h\241\012\252\321\253\264\264\264\254\324\264"
N "w\275\330\305\227\305\025\265S\244R\244S\254S\254\260\233\214r\010J(RhbhjGZ"
N "(J(B\007B\007J\007J\306\071\344\030\327t\032\256\331\255S\204\356R\255:\254:\253B\015"
N "S\260k\321{/c,\062\353!\352)\310AHj\213\233\216\274\257\304\015\264*\243\316"
N "\243\364\254\227\265\267\275\226\275\065\265r\234\355b\010JiZ\252jib\010B\307"
N "\071\206\071%\061\344\040\004!%)\206\061\206\061\206\071\246I\306QEI\247Q\010Z\350Y"
N "fQEI\343(\243\020%!HR\311zhr\307I\350\071\213J\355j\213z\253\202\015\203N\203"
N "\260\213\257\223\216\233\014\233\353\232j\222'\241+\242\321\243\264\244\062"
N "\234\022\244\324\254\227\275\370\275\267\265\264\224R\214\062\214R\214\021\214"
N "\354j\350I\347I\007R'b\007J\347A\347\071\347A\347I\010J\307\071\303\030\363c\224\214"
N "\021\214\014{\312z\352r\353Z-C\354:\213J\315J\221C\262C/[\213R\350A\347I+\203"
N "n\264\216\274\314\243\251\202,\203\263\244\226\265\267\275\324\264\217\223"
N "Jb\350QIj\211jib\010B(BIR\010Z\347Y\246I\206\071\307\061\347\061\307\071\206\071"
N "\307I\306Q\347ajr\354z\314\202\212\202\252\202\253zIZ\307\071jZ\253rHjIZjJ"
N "\254Z\254j\253z-\213\217\213.\203\015\203-\213,\213\252\222\211\222\307\201"
N "\345\220\250\231N\213\361\203O\203/\223\220\233s\254V\265\066\245\062\204/c"
N "\356Z\315R\254R\011J\246A\347I\007J\007Z\347Q\307A\307\071\306\071\307A\007J\306\071"
N "\343\030\355b\314z\212z\211\222\011\233)\233K{\216Kp+\221#\065$\367,\067U\224"
N "|\256\203\212b\010Jib\013\203\316\233l\223\211z,{\263\234v\265V\265\222\254"
N "M\213jr\010jIr\211r\306I\205\061\347A(ZHr'r\306Y\347I\007J\007B\246\061e\071\246A"
N "\307I(j\353\202\317\233\320\243\320\253\061\264\020\254n\213\212Z\212Z\314r"
N "\212r\252r\015kNs\260\203\021\224\324\244\065\255r\244M\223+\223+\223\210\222"
N "g\232\006\232%\211F\201kr\254b*J\011Zkr.\213\061\234\061\214Nk\011Bf)&!&!$\061\206"
N "A\010JHR'b'j\007R\347\071\246\061\206\071\347A\246\071\343\040\353z\251\202\012\223"
N "k\243j\263i\253K\213N[Q#\364\013\330\004\272\015\372Uw\215\060\224\013s\212R\253"
N "b\260\203s\244\021\234N\213\015{\021\224\263\244r\244\317\223-{jj\350a\347a\307"
N "YE\071\004\061E\071\205I\245Q\245Q\205QeA\205\071e\061e\061E\061\246I\307Q\010b\013\203"
N "\357\243\222\274\263\274\263\304q\264n\213\212bIZ\253j\252z\252z\354z\217"
N "\203R\224\024\245\267\275\370\305\323\274\356\253\010\253\307\252\306\262\244"
N "\312\304\312%\242\206q\307a\307Q\306I\007J(Rjj,\213M\203\313j\307I\307A\247"
N "\071\246\061E\061\307AiZ\252bhjHzHb\347I\246\071\205\071\245IeI\003\071\251\202\351"
N "\222\253\243\315\253J\243\350\232\250\212jZ\257\062\263\023\330\004\273\005\272"
N "%\027m\320\203\313r)J\315bT\224\027\255\264\244o\203jj\354zn\213n\213\354zj"
N "Z\247A%\061E\071eA$\071\344\070\004\071\004\061\004)\004)\004)\003\061\003\061\004)E\071\246I\347Q"
N "\347a'jhz\215\223q\264\263\274Q\264n\233\253z\010b)bij\211rIrir-\203\061\224"
N "\024\245\267\275\327\305\323\264\214\263\245\302\245\302\305\312\344\332\247"
N "\343\014\314*\223\006j&rg\202gj\211b\311jK\213m\223\313z\010ZIZ\312Z\312ZhRiZ"
N "\311Z\251bhbGj'b(R\007J\006R\245id\211D\201Gz\351\232\253\243\254\243+\233\250"
N "\212Gz\347a*J\020;U,\327$\370,u<O[)Z\310I\255bT\214\027\245t\224\213Z\206A\010"
N "R\014{\257\213\320\203kJ\345\030\243\020\004)EAeQ\004\071\303(\344\040E)\206\061E\061"
N "\004\061\003\071DA\206I\347Q'b\346Y\345i\345i\251z\316\243\357\253m\233\211\202"
N "\007r\350a(j(b\007b\007bIj\354z\256\203Q\224\263\244\222\254\020\254\310\262C\272"
N "c\272\244\302\344\322\311\323\260\304\321\264I\233\007\243g\263\210\253I\203"
N "*\203\315\223\263\254\364\264\360\213,kMkmkLk\012c\251ZGJ\007J\245I\305I'J\251"
N "Z\251b'z\345\231%\252'r\210\202J\223\213\233K\223\251\202Gj\347a\347Q\213"
N "RoS\362KU\064\364\033q;kR\350Q\315j\063\224\224\224\261\203(R\306IIJ\021\204\025"
N "\245\025\235\362s\312\061\203\020\344\040$\071EI\343\060\202\020\344\030\206\061\247"
N "\071\347I\206A\206I\206Q\347a\347a\205I\205Q\245Q\245Q\006b\251\202\312\202i"
N "z\010jIjjjIj\347Q\206I\307I\314b\217{\360\213\360\213\217\213-\213\353\222"
N "f\232\003\252#\252$\242e\242J\243\220\244\220\264\013\274\310\303\310\313\310"
N "\273i\223k\203\060\234v\275\371\315W\265\320{Mk\256s\317smc\252J\245\061d\061"
N "$\061$\061\306\071\251Z\012k\210r&\212\250\232(Zhb\012s\351\202\311\202Hj\007Z\246"
N "I\206A\307IJR\315Z\061;\263\033\323;O[\314jN\203\063\224S\224n{gjHb\353b\020\204"
N "U\255v\255s\204+B\244\020\303\030\004\061\004\071\302\040b\020\202\020\005!\207\061\247"
N "\071\350I)b\007j\307qfY\004A\206I)ZIZ'Z'bHb\010Z\253j\016s\355j\212b\010R\307A)B\254"
N "R\320{R\214\320\203-{\313zi\212G\222\344\231\303\221\244y\305qHrl\203\314"
N "\243\252\263\311\303\310\303\251\263j\213L{\256\203\263\244w\275W\265\021\214"
N "\313bMk\061|\021lNKf!\303\030\303\030\243\020\004!\211Rk{K\203*\213\315\233\010J\007"
N "B\010B\347Q\245Q\246A\206\071E\061%\061F\061\310\071*:\316\062\322C\063\\\361so{\360"
N "\213s\234s\234\217\203Hj\347YIZMs\357\203\320{.k\311\071\304\030\344\040\004)\004"
N "\061\343\060\303(\202\030\303\040%\071\011J\254Z\014{Iz\206\201\305p\006ikj\220{\257"
N "\203m\203\012s\312j\213R\016c\261so{\014{\251\202\251zJR\255J\320s\061\214\021"
N "\214\257\203-{jz(\202&\222\345\221\304\201\204q\306y\251\222\011\243\010\253"
N "\007\253I\243\255\223\256\203M{-{\217\213s\234\321\213\253j\350QIR\217k\062l"
N "\220S\351)\243\020\243\020\243\020\344\040HJl\203\356\233.\244\217\254(RHJ\246"
N "\071\004!\344\040%!&)&)\005!%)f)\310\071\314Z\360{r\214s\214\061\214r\224\364\244"
N "\365\244\062\224-{\354rjZ\247A\246A\307A\350A\247\061f\071fA\350QJb\307Y\004A\343"
N "\060$AeIJb\253b\014{)z\345pd\200H\221/\223t\234\324\244\222\244p\234\016\214"
N "\257{OcPc.s\312z\350\222\010\233\312\202*B\016c\317\203\020\214\257\203-s\253"
N "jJji\202\210\232F\252\006\242'\252\250\272\250\272\350\302\012\243\216\213\021"
N "\214\360\213-{\212r\212j\213b\011JfAEA\246AjR\216k\015S\310)\344\030\343\030\004"
N "!E)(Jl\203.\244O\254p\254Ij\010b\206A\005)\005!F)F)\005!\004!E\061\206\071\307A\212j"
N "\257\213Q\234\061\234\060\234Q\234\066\255w\265\026\255\224\234\021\204\217s\011"
N "B%)E\061\350A\253Z\253b\254j\217\203s\234R\234\212z\306a\347i\007r\252z\253j"
N "\212j\206Y\344`\346\220\251\221/\223t\234\264\234q\234\220\244\220\234Q\214"
N "\361s\017[JR\006j\205\222\206\222\007b\250\061kZM{\257\213\257\203-s\314b\213Z\314"
N "j\256\243l\303\351\312\311\312\250\312\246\332\011\323\216\263\320\233\062\214"
N "\320\203\313j\347Q\307Q\307A%!\344\030f\061\011JJZ\354r-s\213Z\246AeA\206A\206"
N "\071\010J\353r\315\233\255\213,{\010j\307a\206I\207\071\307I\307If\061\344\040%"
N "\061eA\206Q\206QIj\216\213\222\244\322\254\017\234n\213\224\244W\265\067\255"
N "\224\224\021\204Ok\011B%)e\071\253ZNsN{o\203\365\254\371\305\227\275R\244IrH"
N "zHzHz(r\307Y$\061\004AEa\350q\354z\260\203\320\203\256\203l{\017\224\221\234\262"
N "\224Nc\250\071eA\245Y\346a\247A\310\071kZ\014{m\203n{-s\355j\314j-sr\264\222"
N "\314\060\324K\323\311\322%\322g\302n\253\021\224\022\204\354b\246A\343(\343\040"
N "\303\030\203\020\243\020\351\061\220s\063\214\265\234\365\244\025\245\061\214\312"
N "j\347Y\246AIZM{\017\224\014s)ZfI\247Q\307A\350I\010Z\010b\206IE\071\205I\306a\245"
N "aEQ\010b\256\213\363\244\362\244/\224M{\321\213\265\244\265\244\261\203\016"
N "kJRF\061e\071\247I\313rn{N{N{\025\255{\316Z\316\025\265\354\202(r\007j\007r(r\246"
N "Y\004\061$\071\204Q\346aHb\313jNsn{\313jL{\261\244\063\255P\214IB\247\071\307I\350"
N "AK:KBkZ\212jM{\216\203-s\015{\253z-\203\061\244q\274\357\303l\303\352\272\245"
N "\241\306\221\354z\217s\015[)J\343(\242\030a\020b\010b\010\210)\316Ru\224x\265\331"
N "\275:\306:\306V\255,s\347I$\061(Z\216{r\234\216{\354r\350YIb)R\350I\010Z\347"
N "a\307Q\246A\246Q\245YdY$I\010ZMs\221\224\261\234\016\204\353jn{\062\234\023\224"
N "\315r\350Q\350Q\350Q\307Q\347Y\253z\354z\314\202N\213\324\244:\306Z\316V\255"
N "-\203\307YeI\307a\007r\306Y\004\061\003)$\071dI\245IiZ\257{\021\204Ns\256\203\261\244"
N "\022\245P\214\353J(:\010BjB\254:\214BkZ\212jM{\216{M\203\014\203\253zjj\314r"
N "\320\233\216\243\353\242\211\232\306\201\206YjZ\254R)BE\061\303\040\202\020b"
N "\020b\020\243\030\351A\221sX\255\332\275\032\276{\316:\306\026\245\355b\343\040"
N "\242\030\206\061\015c\364\234r\224\360\203jrij(RIJ\355j\315j\351Q\206\071\206"
N "AeIEA\004\071e\071(J\313b\013s\312jib\014{\320\223\260\223\354z\253r.{\260\213-"
N "{ij)b\212r\252\202\014\213R\244\270\275:\306\227\265\320\213\307YEA\247Y\007"
N "j\246Y\004\061\344($\061\004)$!\011BNc\021\204\361\203\061\214\262\224\362\234\060\204"
N "mcI\062):\253:\354:\214:*BjRns\260{\220\203\260\203o{\355j.sR\234\062\244\354"
N "\212\007z\246a\246Y\347Q\350I\207\061\004!\344\040\343\040\303\030\302\040DA(bo\203"
N "\366\254x\265\331\275\372\275\026\245\321{\250\061\243\020\203\020&!\314Z\224"
N "\224s\214R\214Ir(j\010J\356Z\064|T\214Os\250AE\061E\061%\061$)\004)E\071\205I\205"
N "Q\205Q\346Y\211r\215\223\257\223M\213N\203\062\224\265\244R\234\354r(ZIbij"
N "\252rn\213\264\244w\265W\265s\234)j\247Y\310Q\011Z\350QgAf\071E\061$)\004)f\061"
N "\253R\257{\062\214\224\234\323\234\263\234\357{\015SjB)B\212J\213:K\062\012:J"
N "J.c\260s\261s\063\204t\224S\214\264\224\026\255\026\255S\234)b\205Q\245Q\246"
N "I\207\071\011:\310\071\206\071f\071\206A\246I\306a\007j\212z\260\213\224\234\067\255"
N "\026\245\362\203JJF)\304\030\243\020F)\254R\260sok\320{\246i$\071F\061\316Z\064"
N "\214t\224\220\203Jb\206I\206AE\071$)%\061eI\305i\204aDADA\347a\352\202l\223"
N "l\213\217\213s\224\026\255t\234\015sIZ\010Z\010R\010RIR.ks\224\325\244\021\234j"
N "\202\310q\352aLZ,Z\011Z\350Y\307Q\206IE\071E\071\010R\354r\061\214\324\234\264"
N "\244\222\234\357\203\354ZIJ(R(R)J\012:\351\071jJ\015cPk\220kT\214\265\234t\214"
N "\366\234\271\275\271\275\265\244\253r\306I\246Ie\071\250\061\315Ros\313j\253"
N "j\257\203M{\252r\346a\347i\313\202\217\213\022\224\022\214KZ\207A\207\071%)\004"
N "!E\061\307\071\351A\247\071\314Z$\201\343@%\061Kbp\203\261\203\016{JrIr\347Y\246"
N "I$\071EA\246a\006z\305q\003\061\202\020\003\061\347Y\312zL\203\260\203\362\203T\214"
N "\362\213.{\212j\010Z\347Qf\061f)\207)\254R.{\313\212'\232\307\221\352\211Mj"
N "\215j\212rir\010b\307Q\206IEA\010Z\353r\357\213r\224\222\234\020\224Ms\253R("
N "J\347Q\307Q\307I\310A\350AjR\014k\016ko{\321\203\321\203\321{t\224x\255x\265"
N "\361\213\212j\007Z\306If\061\351\071\260{\223\234\257\213\361\223\263\244\263"
N "\234\256\203Hb\347a\212z-\203\260\203p{kZ\011R\011ZjZ(Rf\071E\061\004)\343(\206"
N "\071\205\221\350q\314rN\203\016\203o\203\320\223\257\213\253zIj\306YfI\247Y"
N "\007zh\212HzD\071B\010\202\020E\061\010Z-\203\260\213\261{\261s\221kOs\253r(j\306"
N "Q%)\344\020\344\030F)\247Q\306\201\243\251\304\251\010\232Kr\213jjjIb\010Z\307"
N "Q\307I\206\071\246AiZLs\357\213M\203\313rIZ\010B\206\071eAfI\206A\206A\307Ij"
N "Z\313j\212j\212r\014{\015s\355b\362\203\224\224\063\224.sIj\010Z\307I\310A\254"
N "Z\220{\260\203.{\257\213\066\255V\255r\224\251bij\313\202-\203o\203Os\355b"
N "\253b\313rMs\015c\350A\004)\243\040\242\040\343((\222n\223\264\254\026\265\325\254"
N "\325\254\264\244r\234\354z)r\307aJb\254r\314\202\217\233R\244Os\005!\203\020"
N "\345\040\250A\254j.{psP[\261c\261{\015sir\246Y\004\061\243\020\344\030F\061fQd\201"
N "A\241\302\261'\212\252b\252b\010J\347I\350I\350A\011B\011:\307\061e\061\306\071"
N "\007J)Z)b\350Qg\061F)\005\061%\061E\071e\071\246IiZ\252r(j\350i\347a\350Y\310Q\355"
N "r\220\203/s\254b\010Z\307Q\307Q(R\253j\015s\355rJj\354zR\234\324\244\317\203"
N "\252jIb\253r\014\203n\203Ns.c\014c\216c\060l\257c*:\344\030\242\030\242\040\242"
N "\030j\242s\264\331\315\032\316\271\305\231\305\366\254R\224\016s\310a\351ap\203"
N "\362\213\063\234\325\254\270\305w\265\016k&)\005)F\061*R\355j\016k.c\321s\321{."
N "kJb\206Q$\061\304\030%)\247A\307a\204\211!\231\203\221\007b\211R\211R(J(J\010J"
N "\010J)B):\307\061E!$!\306AIZIbjZ*J\012B\012:\210\061\206\061E\061\307AiZib\307Q\206"
N "QfIfI\206I)ZkbkZ*J\351I\247Q\347a(j\211r\253r\350a\247a)zn\213\320\223,{I"
N "j(Zjj\353\212M\213-s\015c,SmK\317S\256S\350\061\243\020\303\030\303\030\202\020"
N "j\242t\304\371\315:\316\271\305\027\265T\234p{KZ\310Y\254jT\214\326\244\027"
N "\255\331\305\233\326Z\316\224\234*R%\071%\071\247A\213ZOs\220{\220{\361\203"
N "\022\204Os\250A%)\345\040F)\307I\010r\306\201C\211dy\346YHRhRHZibjb\010R\307A"
N "\347A\206\061\004!%!\307\071\212b\354jnsOkq[\020S\317BK:%\061\246AIZiZ\347Q\206"
N "I%\071\004\061\004\061E\071\247I\351Q\351Q\250A\247Q\306a'jGz'z\246i\245q\006\212\352"
N "\232,\223\313\202(j\307Y(r\212\202\014\203\314j\313Z\353Z\353R\013S\352Z\206"
N "\071\344\040\344\040\304\040\202\030\213\242\062\264\270\305\371\305X\265\063\224"
N "\015kjZ)Zij.s\063\224\366\254\067\265\271\305\233\326Z\316\365\244\015{\307Yf"
N "I\206\071\314Z\062\204s\224S\224\325\244\066\255\325\234\356Zg)&)F)\247\071\350"
N "Q\307i\205ieYeI\205I\347Qib\312z\313r(R\207\061\247\071\247\061F\031\004!\307\071"
N "jRns\020\204R\204\322k\261kP[\214J\307A\347I\252j\353rIj\347Y\004\061\243\040\303"
N "\040\344(%AgaGq&afQ\206Q\307Y'\202&\232\344\241\344\251$\262f\262\012\243\013"
N "\213\211z\007j\347i(zizjz\011b\350Y\010b\010b\347a%I\344(\344\040\303\040\202\030"
N "-\223R\244w\265\331\275\026\245\220\203\213b\354r\253r\211r-{\321\213R\224"
N "R\234\025\265\330\275\270\265t\224\355r\350a\247Q%\061\316Rt\204W\255W\255\270"
N "\275\371\275w\255ps\210\061F\061G\061g)\207\071\247A\206AeAE\071\206\071\347Q\211"
N "j\013{,k\314J\214*\356*O+\213\"\247\031%)\347AIJ\354R\253\306k\347\014\327\215"
N "\306\313\224\012t\316\234\317\244O\224,\203\211rEA\343\060\004\071$\071\004A\005i\345"
N "\210\345\210fa\246Y\307YH\222f\262d\312B\322C\322\246\312L\253\257\233-{\007"
N "Z\206I\307Y(r\350y&i\005a%a&i%i\304P\244\060\303\040\243\040\303(\324\244\026\255"
N "X\255\231\265\026\245\362\223\062\234\263\244\061\224,\203\014\203.\203n\203,"
N "\213\357\233\223\234s\224\321\203\315rJrJb\207\071+:\022|\027\245x\255\230\265"
N "\270\275\365\254os\207\071f\071\246\071\006:\345JE[\206R\206\061F)\206\071\347Ih"
N "j\353jn[\320C\363#T,\325,\062$\355\"f!\206\071\303\030A\010\040l\240\235@\256\240"
N "\276\000\317`\337\241\347\304\357\350\224\312R\014cek$AeYeYEY%q\005\211%\221\206"
N "y\307a(ji\212\246\302\304\332\341\352\302\342\010\303\062\244\230\265W\255\254"
N "bE\071eA\247aFq\204hcX\244`\344`\304h\204X\203@\243\060\303(\004\061\267\275\230"
N "\265x\245\231\255w\265\366\254\230\275\371\305\330\305R\234\355zN\203.{\314"
N "\202-\203\320\213\362\213\362\213\220\203\321\213S\224\062\214\316b\315b\063"
N "\214\026\245W\265\365\254R\234o{JR\010J\006[Dt\342\214b\245\203\204dJ%)\206A\346"
N "YGj\252bNC\022,\225,\325,\265,\062$\213\"f)\247\071.k\264\224\022|\216k\255k\310"
N "R\002\031\341)c[\242[a!`\010`\010\201\204\205Q\246i\306y\246y\206y&\201F\221\247"
N "\221I\202I\202h\222\347\312%\343#\353\345\322\013\243\223\234\371\275\331\265"
N "\361\203\247I\307Q\307qFydhc`\204`\244`\304h\005q\304X\304P\005I\310Q\370\275"
N "\330\265w\255\230\255\271\265\330\275Z\316\274\326{\316\365\254\261\213\322"
N "\213\322\213\261\213\063\224\265\234\067\255\027\255\026\255x\265\032\306\031\306"
N "\366\244\356r\016{S\224\324\244r\244\061\234\360\203\217{Ks\351\203\304\214"
N "\241\255\240\255\301\224bBD\061dA\304Y\345a\347I\213Bo\063\022,\022$/#\355\"\307"
N "!E!JJ\021\204\331\265\067\245\325\234\365\234\021|\004\031\004!\317{\256{\353jIZ'"
N "Z'Z\246a\347\201'\232'\232\306\231E\231\210\241J\232\314\212\014\213\353\232"
N "\255\313-\344\312\343\011\273\354\222S\234W\265\026\255\021\224\217\213\252\202"
N ")\212\207\201\305p'q\345`\005iFq\246qfq\005aFa)j\364\244\025\245\025\245W\255\331"
N "\275\371\275Z\316\233\326Z\316W\265\262\233\363\233u\244\266\244\030\245y\245"
N "\332\265\033\276;\276|\306\274\326{\316w\265.{Ijn\203\317\213\317\223\060\224"
N "q\224\061\214\317\203,\214F\214A\214@\204\040c\242\061#\061dI\204Q\204QEA\010J"
N "\253B\315*\314\"\350\031E\031\303\030$)\314Z\223\234\270\265W\255\224\224\264"
N "\234nk%!\247\061\021\204\014k\212ZIZ(b\347a\206a\307\211\010\232H\252\007\252\206"
N "\241\215\262S\274\224\244\361\223\062\234v\315\031\336U\325\021\254\217\223\321"
N "\213s\234\224\244\264\254\223\254\014\223\010zFy\311\211/\223\214\202gq\307"
N "q(z\010r\206i\247iIr,s\320\203r\224\365\244w\255\270\265\330\275\371\275\330"
N "\275\366\254q\233\322\253u\254\030\245\232\245\232\245\333\255[\276\274\316"
N "\234\316|\306\371\265\224\224JZ\207Q)bir\252\212m\223\020\224\317\213Ns\354"
N "jhZ\304Q\242Ic\071$\061e\071eADA\003\061\004\071\206I)B\213*j\032\307)\343(\303\040\004"
N "\061IZ\061\234\364\254s\234\217\203\354j\344\060\243\040\350\071\062\204\353b\205"
N "\061\004!E\061EI%YF\201\246\231'\252\007\252)\262\022\304\270\315\371\305\230\265"
N "\270\275\233\326\273\336z\316V\265\264\244\026\255\067\265\227\275\330\305\330"
N "\305\360\223Iz\010z\254\212\264\254\223\244\016\203*r\212zIr)j\010b(j\307I\212"
N "jn\203\062\224\264\234\025\245\324\244\365\254\365\254S\234\356\232\316\232"
N "\363\243\030\245\071\225\227\204\267\214\272\255|\306|\306\271\255\363{\351"
N "I%\071\004)$\061eQ\206yG\242\352\232\212r\011J\250\061F)\344(\344(\344($)\206A\246"
N "QeI\004\071\344(EA\246A\350)\010\062\347Q\205I\343\060\004\061\247I\354zo\233\351\211"
N "\345x\305\200\204\210\306\230\207\211\220\243\361s%!\243\020\343\040\004\071\004"
N "Q\244\200\344\220%\241\247\251\314\262\224\274\371\305:\316\071\306\031\306"
N "{\316\233\326Z\316:\306\031\306\331\275\031\306{\316{\326\267\275r\244\014\213"
N "\252\212\216\213\065\255V\255\224\234\261\213\320\223\260\213o\203jbIjE\061"
N "(Z\354z\217\213\361\213\061\224\360\233\320\223\321\213\220\213\254\212*\212"
N "\221\223\266\234u\214Qs\016k\367\234\032\276\032\276\326\234\315b\206IE\071\343"
N "\040\242\030\344@e\201\305\241\205\211$Q\004!\304\030\244\020\243\030\304\040\304"
N "\040\005)fQ\247y\246y\206qEQE\071E\061f)\307\071\010J\346Q$\061\004)$\061\350ib\040\000"
N "\000\000\000\040\000\000\000\040\010\040\020\304Hl\242\263\224\207)\303\040\344\070\244P\203"
N "x\204\230&\251j\262\216\263\223\264\227\275\371\275\330\275\227\265w\265\227"
N "\265\371\275\032\306[\316[\316{\316\274\326\234\326\227\275q\244m\233\012\213"
N "l\213\263\234\066\255\326\244\326\244\225\244\365\254S\224o{\313r\004\061\307"
N "QIj\313r\015{\216\213N\213\355\202\315\202l\212\351\221\351\221\315\242\362"
N "\243\022\214\315b\011Z\022\214\027\255\067\255\321\213)Z\246IeA\004)\004)%\071\307i"
N "i\212)z\004\071\303\030\344\040\004)\004\061\004\061\344\040\304(\005Y\206\211\246\231\246"
N "\221\207ifI\307AF\031g!R\064Y\066\365Tr\214\350I\202(\000\000\000\000\000\000\040\000\000\000\040"
N "\000\000\000\000\000\040\010\016\243\324\214E\061\344@\304`\204\210\305\240\351\261L\263"
N "P\274\364\264\026\265V\255\365\244R\234\320\223R\234\026\255\330\275\032\306"
N ":\306{\316\233\326:\316\227\275Q\244l\223*\213\352zms\360\203\264\244\366"
N "\254\366\254W\255\325\234\022\224\021\224DAeI\206Q\206I\350Y\213z\314\202\254"
N "\202\312\211\211\231\210\241\210\251L\252/\243\260\213-{\354r\021\214\224\234"
N "\022\214\213b\246I\246Ae\071\247\061\214R\255bN{\021\224s\224\355b\207AfI\246"
N "QfQEIEI\004A\005QE\201\205\221\306\231\207q\247Y\253b\257kR\204\071\216]\207\273"
N "\216\324\224\011Z\000\010\000\000\000\000\040\000\040\000\000\000\040\000\040\000\000\000\000\000\203H\321\213"
N "\320s\303\060\303H\345xF\211\011\232\255\253\017\234nc\360s\224\234\361\213M"
N "\203\313\202\014\203\361\223W\265\270\265\230\265w\265\371\275V\265\365\254"
N "\020\234K\223\011\223\247z\251jn\203\021\224\224\244\265\244\067\245\067\235\366"
N "\244\026\255\204j\204Q\003\071\343(%\071\310a\014\213-\233\253\252\011\262\350\251"
N "\011\252l\252\220\243\360\223\357\223Q\224\222\234\222\224\354bf\061$)$!\207"
N ")/cS\214\265\234\026\245\330\275\031\306\066\255o\203irHz(j\007j\007j\306a\247aI"
N "rjr\253jiZIR\252R-c,[\352R\214[otn\204\306Z\003:#:D:B!\040\000\040\000\040\000\040\000\000"
N "\000\000\000\040(*z\062t\061|\320s\253RjJ)J)J\212R\350\071%!\015k\015s\212r\212rjr\015"
N "\203\022\224\022\224\260\203\062\234s\234\223\234r\234\256\223j\243'\243\346"
N "\232\210z\252z-\203\217\203\062\224\224\224\067\225x\245\230\255${\244Q\344"
N "(\304\040E\071\010bM\223\017\264\356\273\013\253\212\242n\243\061\254\323\254\262"
N "\244\262\244\023\255\064\255\222\224\314Z%!\343\020\004\031*:\024\204x\255\331\265"
N ":\276\274\326\334\336Z\316\224\244\312zhjhbgj\207r\250rHJ\005!\253J\360s\062"
N "|\320kNc\257s\324\224\065\235\065\235\066\235\324\224\323\234\320s-[\212J\007:"
N "FB\344\061\006:(B\344\030\000\000\040\040\243P\010:\314R\217c\020tr\204\064\235\030\266"
N "ncjB\217cR|r\204\217c\247\061\246\061\010:)B)J\350I)Z\253bNs.{\354\202)\233g"
N "\263G\253\311z\253j\254j\355j.{Os\022|\030\215X\235\205j\206Q%AFI\310Qn\203"
N "\257\223q\264\017\254\353\222\313\212\357\223\024\255U\255\323\244q\234q\234"
N "\262\234\360\203\213Z)Jf!f)\315Z\265\224x\255\230\255\032\276\274\326\375\336"
N "[\316\224\234\353jGRGRFR\250b\312b\257kR|-[)B\247)\206)E!\246\061\010:\014[\311"
N ")h!\214J\016[\360s\062|\360s\361s\320k\253J\350\061\303\020e)IB\350I)bb\010A\010"
N "A\010a\010a\010\202\010\252B\014S\257k\324\224\334\326\227\255\035\337\071\276*B"
N "\233\306\031\266\350\071nc\324\224\350\071\247\061\253R\253R\205\071\245I\245I"
N "\307A\247\071\011BjJ\213b\212b\314bOc\260s\205Q&Yhq\351\201)r\350I\014cQ\214"
N "q\234)j\350Yn\203\262\234\322\234\357\213\353r\253r\253j\212b\015k\217s\015"
N "[\214Ros\265\234t\224\362\203\067\245[\316\274\326\032\306\325\244\320{\211"
N "R&B\005B\250RLcI:\202\020A\000\202\020\004\031\243\020\344\030\004\031\303\020\343\020E!\012"
N "\062\315JNc\015[\350\071E!$!%!\206)\350\071jB\320k\260k\310\061\303\030\212JMc\314"
N "J\260cr|-[\364\214\313J\324\214\270\255ok\011:\061|~\357R\204~\347]\347\025\225"
N "\066\235\273\326\310\071\314R\333\316=\337jJ\247\061\324\214\232\306z\306\025"
N "\225f)\"S\302J\313R\320k\320;JZ\250a\312\201K\212\213z\253r\257\203\257{\360"
N "{\025\245JZibm\203\216\203\313r(Z\246Q\207Q\310Y\015s\257{\317{o{\320\213R\224"
N "O{\214bs\224\331\275:\306\032\306\227\275\324\244\020\204\250R\344R\311s.\204"
N "\004\031A\000\010:\327\265R\214\206\061jJr\234\323\244\320\203\350\071Nc\217c\247"
N ")\202\020@\000@\000\040\000\040\000\040\000\040\000\040\000\343\030\216k\357s\226\245\062|f)$!\020"
N "|\065\245\351\071\364\224\350\071\313R\253Rnc\066\225\374\316Z\306s\204\236\357"
N "\364\224~\347\034\327\327\265kB\232\306:\276\034\337\324\224\247)]\337\374\326"
N "\270\245\224\204\210!*\062m[s\204\327e\034_\021|\062|s\204\062\204NkjR\216s\323"
N "\234r\214\061\204\267\265\252bhr\012\203\352zHb\252Z\061l\320[\320crt\364\204"
N "\264\214\263\244\223\234-{Jb\220\203\026\245w\265\230\275W\265V\265\323\244"
N "K\204\244\214G\245M\255\205)A\000\344\030\065\245\324\224-[\260c\021\204u\265\065"
N "\275\065\265-[\313R\302\020\342R'\235K\255N\234jt,dP|\013Sd!`\010\040\000\040\000iJ"
N "\363\224\061|\303\030\206))BjB\303\030\307\061f)\350\071Nk\314R\350\071\216k\024"
N "\235\247\061\020|]\337V\245\233\306\071\276\267\255\273\316\035\337\260cx\235"
N "\371\255\233\316\223\214\213c+\225\320s\025uz^\272vNcOc\217c\217k\254JF!\202"
N "\010\202\020HB-cT\245v\255\311\202*\223\012\213Hb\246\071):\360k\021t\260cN[f!"
N "F!jJnk\253b.s\022\214\224\234S\224\062\234\263\254\221\234\214\224\005\235F\255"
N "k\265\314{a\010A\010\253J\321k\061|\066\225\270\245\330\255v\245\263\234\015[\006"
N "\062\203)\244\306\351\326\352\326&\266)S\252[\252c\214|\255|A\010\302\030\243"
N "\020A\010@\000\313Rnc\344\030):\206)b\010\202\020\303\030\243\020\343\040$!\004!\004!E)"
N "f)\206\061\247\061\307\061\011:\247\061F!F!\351\071\207)F!F!%!\005\031\004\031C!\004\031"
N "\344\030\004\031\010:\314R\355Z\015[\015[\314RJB\250\061\303\020\040\000\004\031\060\204\024"
N "\235\017\234\011\223\251z\307Q$)b\010b\010a\010a\010\343\030a\010\202\020\302\030\343"
N "\020\020t\062\204S\214S\214s\224R\224\061\234\317\223\312\213f\224\346\244\313"
N "\254Kk\303\020!\000\206).Snc\065\235\324\214\026\215\325\204.[\314J\312JE!\202"
N "\204\304\306e\276\245knk\017tq\204\020|\317{$!\303\030E)\206)\247)A\000\242\020"
N "\004\031\247)f)\243\020\303\020f)\303\020a\010!\000\040\000A\010a\010a\010a\010a\010\202\020"
N "\242\020\303\030\303\030\344\030\344\030\004\031E!\206\061\307\071\247\061\307\071\010"
N "BiB\020D\317#$\021kJ\213J\314R\314R\314R\254R\213J\247\061a\010@\010+c\020|Ls\311"
N "\212\007bE\061\304\030\004!\004!%)\344\030\247)%\031\202\010a\010\246\061ncR|s\204R|\021"
N "|\022|\062|R\204\222\204\257\214\216\224o\234\020|JB\242\010\350\061\223\214R\204"
N "V\235\267\245V\235v\235\213J\350J\302:B\062\"d`\215!\205$:\347I\007:hB\210J\007"
N "J(B\303\030*B\355J\261[JBA\000\202\020\303\030\206\061\213J\253J):f!\303\020$!$!"
N "\004\031\004\031\303\030\343\030\343\030\343\030\343\030\343\030\004\031$!$!\343\030\242\020"
N "a\010@\000\040\000\040\000\040\000@\010\242\020nc\217kjJkJ\213J\254R\254R\314R\354R\011B"
N "\243\020a\010\353Z\252Rmk\211r\010Z\206\071\005!\344\040\344($\071\307\071\217kkJj"
N "B\350\071\213B\314RkBkJ\213J\015[NcNcNc\260k\021|r\204r\204\021t\351\061\004\031-"
N "[\213B\250)\311)\350\061$!\013l):\306J\202S\201:\001K\241k\241c\202|!\205\001\256"
N "\344\224\307Z\306\071\307ZE!\263\224S\204\063t\321c\040\000\040\000b\010%!\015S\224"
N "|\325\204\066\225\066\225N[\202\010A\010A\010A\010A\010@\010@\010\040\000\040\000\040\000\040"
N "\000\040\000\040\000A\010a\010\202\020\302\030D)\007RHZ\007JE)\357sJBjJ\213J\213J\213J\253"
N "R\014[\207\061\202\020D)\352Z\307\071\353bHjij\010R\206AeAEI$A\014c\310\061F)\350"
N "\071\310\061JBkB\213J\214J\254J\254J\314R\314R\354R\254JkJkB\014SiJ\343\020\004"
N "\031oc\015[\071\276\324\214E!\201\010$!I:\305\071J\213A\010A\000A\010A\010A\010`\010!"
N "B\301s\343\214\342\214\242cE!\257sR\204\224\204\354R\040\000\040\000A\010%!k:/K\221"
N "[\362k\022lSt\062t\004\031\344\030\202\010\040\000\040\000\040\000\040\000\040\000@\010a\010\242\020"
N "E)\212J-k\313j\252r+\223l\233l\243+\223\251jJB*BJJjJjJ\213R\313R\014c\344\030"
N "\205)e)(B$!(B\007Z(rHj'b\007j\006rHj\015[f!f!\213J\212J\015S\355R\254JkBkBkJkJ\213"
N "J\214J\254R\314R\320k\223\204\212J&:\213B\227\245\320kR|\062|g!\202\010F!)B"
N "\003!m\274\353\222\303\040A\010A\010A\020\242\040\342\060\342\040\002\031\300\235!S%\031"
N "g\031g!\247)\242\020a\010\202\010\243\020\307\061K:J\062\315Jo[s|\021t\014[\212B\015"
N "SjB\243\020A\010\201\010\303\020f)jJ\220k\365\234\371\275\031\306\364\254m\203"
N "\313j\353zl\233l\233\013\213\347Q\010\062IBIJjJjJ\212R\354Z\253R\243\020HJE)\205"
N "\061\343\030\246\071\246Q\246Y\245Q\007bHz\210\202L{\257k,[\252J\353Z\014c,[Mc\317"
N "s\360s\061|r\204\324\214\264\214\223\204\062t\062|\365\214\270\245\254B\351)"
N "kB\361kMc\065\235\267\265\273\316\031\266\223\204\263\214\016t\311s\351\213\344"
N "Z\241B\242R\242b\302Zb\061\241\030\"!\341)\345\061JB.[\314J\213B\005\031\313J\011"
N "\062\350\061\314JK:\254BjB\317k\246\061\343\030\206\061\020t\222|\323|\024\205\263"
N "|\223t\226\225\366\224\026\235\026\235\271\255\371\275\330\275\323\234\014k\312"
N "Z\252b\252z\251\202(j$)\212J)BIBIJjJ\212R\354Z)B\004\031\307\061\307\061\003!\202"
N "\020\205\071eI$\071\003\061\245Qhz\352\202iR\242\020a\010A\010\040\000\040\000\040\000\040\000"
N "\040\000a\010\202\020\242\020\302\020\303\030e)\212J\061|\227\235\267\245U\225T\225"
N "\063\215\022\225mc\062|w\245V\245s\204p[\220c\011:\347\061mklc\355{\006S\007K\247|"
N "&BD!b!\240\010\003\031.[.[\213J\253J\206\061)B\212J\354RN[oc\021t\353Z\242\020\302"
N "\020a\010A\010\212J\212J\061|Q\204\222\214\014[jB\220k\366\224\026\235\331\265\331"
N "\265\270\265r\214\353b\312Z\253b\252r\212r\206A\246\061\313Z)B)BIBIJ\212J\014"
N "c\206)a\010a\010\306\071\343\030\202\020\246\071eA\343(\343(\205AHjm\213)B@\010\040"
N "\000@\000@\010\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\303\020N[\226\235\267"
N "\316\027\337\027\337\027\327\027\337\325\367p\245U\276\327\316\327\316\226\306"
N "T\266\365\255\062t.[\061t\223\204\267\255\330\265v\245\223\204\217co[g:\302"
N "\020\004\031&\031\247)F!F!\243\020\350\061J:\213BR\204\370\265\014[\242\020\010:\004\031"
N "a\010\202\020\343\030%!\011:.[\260k\361s\021t\021t\022|R\204\324\224W\245\230\265"
N "\223\224\354jMs\320{-s\353rE)\354Zmk\010B\010B)B)B\212J\313R\004\031\040\000\303\030"
N "e)D!%!\007B\014c\212R\212R\354bms\360\203nc\313J):*:):\011:*:JBjB\213J\213J):"
N "JBjB\010\062\212Br\204\071\276Z\306\232\316z\316\371\326W\306\322\214\330\326"
N "\370\326\370\326W\347\325\367\027\327\232\306z\306\071\276\364\224R|\257k\015"
N "SjB\010:\010:)\062\254B\012\062*\062\251!\251!g!b\010\011:n[oc\264\214Q\204D!e)I:"
N "\344\030%\031g)\310\061\351\061JB\254J\355R\015[.[Ncocok\260kr\204\223\214\021\204"
N "\361\213s\224\365\234\360{\307\071IJ\014[nk\350\071\350\071\010:\010BIJ\011B\344"
N "\030@\000\343\030\242\020A\010\202\010A\000b\010\302\020\202\020\202\010\202\010\202\010"
N "\202\020\202\010\202\020\202\020\201\010a\010\202\020\242\020\243\020\303\020\242\020"
N "\201\010@\010\040\000\242\010\015T\071\266z\306\233\316\232\316z\316{\316\370\265"
N "\025\235Z\306z\306z\316Y\306\327\265v\255\327\265Y\306\071\276\324\224\015S\206"
N ")\004!\303\020\243\020\303\030$!\350\061\354R\307\061jJIB\350\071\303\020e)\014[Q\204"
N "\364\224\216k\303\030\307\071\304\030%\031\247)\351\061\011\062\011:*:J:kB\213B\213"
N "J\254J\314R\355ZNc\021|\025\235s|\066\245\331\275\270\265\354Z\207)JB\355R.["
N "\307\061\307\071\350\071\350\071)Bf)\246\061\242\020\343\030a\010\347\071\247\061\014"
N "cf)a\010\303\020E!\253Jnc\061|\354RMc\307)\040\000b\010E!\246)\343\030@\010\040\000\040"
N "\000@\010\242\020\206)\267\255Z\276Z\276{\306\273\316\374\326\035\317Z\266\370"
N "\255:\276Z\276z\276:\276s\205h:\206)\216k\323\224v\245\223\204\004\031\202\020"
N "A\010A\010A\010a\010a\010\302\020\246\061\242\020a\010\242\020\302\030\302\020\303\020"
N "$!iJIBa\010\003\031\344\030g)\310\061\350\061\011\062\011:\011:\011:):J:JBkBkJ\254RMc"
N "\320s\263\214\071\276\232\316[\306\260s\307\061*:jB\213B\213J\247\061\247\061"
N "\247\061\307\071\010B\303\030iJ\202\020\343\030\040\000\040\000e)\211JQ\214\257s\014cI"
N "B\206)\202\010\343\030\246\061Mc\216k\206)\303\030\243\020f)\202\010\040\000\000\000\000"
N "\000a\010\247\061ncz\316\232\306\035\317\276\337\337\337\337\347\337\347\236\307"
N "\236\327]\307\374\316\071\276\330\255t\215\004\023@\000@\010\003!\211J\061\204\217c"
N "\354R\354RjB):\202\010\004\031\243\020\040\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\003\031\343"
N "\030a\010\303\020%!\207)\310\061\310\061\310\061\351\071\350\071\351\071\011:\011:):"
N "JBJB\212JMcNc\223\204y\306\015[\224\224\350\071jB\310\061\011\062):*:f)\206)\206"
N "\061\247\061\206\061\202\010\306\061\242\020\201\020\040\000\040\000A\010\201\020\252R\020"
N "\204-k-k\257s)B\010:\307\061%!A\010\040\000a\010\246\061\212JMc\257k\354R\314R\247"
N "\061\247)\227\245\233\316\233\316<\327\236\337\236\327\276\317\276\317\236"
N "\307<\317Z\276\071\276\330\265\330\255-[\303\020\303\020\343\030a\010\040\000@\000\343"
N "\030E)\307\061\252J\317{\360{\024\235r\204\344\030\040\000\040\000\040\000\000\000\040\000\000\000"
N "\000\000$!\201\020@\010\242\020F!\207)\250\061\310\061\310\061\310\061\310\061\350\071"
N "\350\071\350\071\010:)BIB\212J-c\253J\263\214\262\224\247\061\247\061IB\310\061"
N "\247)\350\061\351\061\351\061E)E)E)f)%!a\010D!\242\020A\010\040\000\040\000A\010a\010$!"
N "msjR\247\061\004!\202\020b\010\010:\020|\247\061\040\000\040\000\040\000\040\000\040\000a\010\303"
N "\030$!(B\360kZ\306\233\316z\316z\306:\276:\266:\266\227\245\270\255\071\276"
N "Z\276\370\265\330\265r\214%!\004\031%!\343\030a\010\040\000A\010A\010a\010a\010\307\061"
N "\247\061\242\020e)iJ\360sNc\314R\247)!\000\040\000\000\000\000\000\205\061\201\020a\010\303"
N "\020F!\207)\247\061\247\061\307\061\310\061\310\061\350\071\350\071\350\071\010:)B)"
N "B\212R\015[JB\024\245Mk\350\071f)\010\062f!\207!\310)\310\061\310\071\004!%!%!E!\243"
N "\020\242\020\343\030\202\020@\000\040\000\040\000a\010@\010\202\020\004!\202\020\303\030E)\004"
N "\031\004!IJ\262\214\307\061@\010\000\000\000\000\000\000\040\000\040\000\040\000\040\000\246)\330\255\273"
N "\316{\316Z\276\032\266\371\265\032\266\071\266\066\225\071\266Z\276\031\276\031\276"
N "\324\224)B)B\314R\314R\253R\213JjBa\010@\010\202\020\040\000\040\000HB\253J\004\031@\010"
N "@\000\202\020$!\010:nc\354R\213Jf!E!@\000\242\020\344\030E!\207)\247\061\250\061\250"
N "\061\307\061\310\061\310\071\350\071\350\071\350\071\010B)B\253R\354Z):\263\224\010"
N "B\350\071f)\350\061&!\207)\250\061\310\061\310\061\344\030\344\030\004\031\004\031b\010"
N "\242\020\202\010a\010\040\000@\000A\010a\010a\010$!(J\353j\211b(B\004\031\004\031\004!mk\307"
N "\061a\010\040\000\040\000\040\000\040\000\040\000\000\000@\000\061t\232\316z\306\273\316\374\326\035"
N "\327\374\326Z\276\031\266\330\265Z\276\071\266\031\276\025\235\206\061\303\030\242"
N "\020\302\020\343\030\004!D!e)\343\030\344\030\350\071\206)%!%\031\202\020IB\011:%!E!"
N "f!\206)f)\303\020\242\020\206)f)\040\000\303\020\004\031E!\206)\207\061\247\061\247\061"
N "\310\061\307\061\310\071\310\071\350\071\350\071\010B)B\253R\313RJB\253R\343\030\303"
N "\020\307\061\206)%!\206)\247\061\247\061\310\061\303\030\303\030\303\030\303\020A\010"
N "\343\030a\010a\010\040\000\040\000\040\000@\010@\000\252ZM{ibGZ\205)E!\344\030\303\030(B\247"
N "\061\202\020\040\000@\010\040\000\040\000\040\000\040\000\307\061\330\255\273\316Z\276Z\276Z"
N "\276z\276\034\337=\337z\306\071\276\370\265\370\265\025\235\247\061b\010a\010a\010"
N "\242\020\242\020\242\020a\010@\010a\010\040\000\040\000@\000A\010A\010A\010\040\000\004!Nc\247)"
N "a\010a\010a\010A\010A\010A\010\343\030\040\000\202\010\004!%!\206)\206)\207\061\247\061\247"
N "\061\247\061\307\071\307\061\307\061\350\071\010:\010B\212R\253RJJJJ\350\061A\010f)"
N "%!%!\206)\247\061\247\061\247\061\242\020\243\020\243\020\202\010\040\000\343\030A\010"
N "A\010\040\000\040\000@\010a\010\202\020\246\071(JIRiR\011:\350\061%!\344\030\247\061\307"
N "\061\202\020A\000a\010\040\000\040\000\040\000a\010\320kY\276:\266\371\255\331\255\371\255"
N "\071\276:\276:\276\031\266\370\265\270\255\065\235\350\071\303\020\344\030\202\020"
N "\243\020\343\020$\021\246\021\307\031\202\010\040\000\040\000a\000I\002\246\001A\000a\010\242\020"
N "\040\000@\010(B)B\040\000\040\000\040\000\202\010%!\242\020\000\000\202\010\004!E!f)f)\206)\206"
N "\061\247\061\247\061\247\061\307\061\307\061\307\071\350\071\350\071\212R\212J\313"
N "ZIB\213Ja\010\004\031\344\030%!f)f)\207\061\207\061\201\010\201\010\201\020a\010@\010"
N "\003!A\010\040\000\040\000\040\000\040\000\040\000@\000@\010a\010\201\020\242\020\344\030\004\031f!\247"
N ")\310\061\307\061\247)\250)\247)F!E!%!jB\066\225z\316Z\276Z\276\233\306\333\326"
N "\374\326\374\326\330\255\227\245\227\245\066\235\253J\344\030%!\010:\343\020$"
N "\011(\022\347\021\307\021(\032\302\020\040\000@\000\343\000\317\003\320\003\257\003I\002\343\000"
N "\040\000\040\000\040\000a\010\247\061\303\030\000\000A\010A\010\201\010a\010\303\020\004\031%!f)f"
N ")f)\206)\206)\206\061\247\061\307\061\247\061\247\061\307\071\350\071jJ):\216kMc"
N "\247\061%!\303\030\303\020%!f)f)\206)\206)a\010a\010a\010a\010\201\020\303\030a\010"
N "A\010A\000A\000A\010A\010A\000!\000\040\000\040\000\040\000\040\000\040\000@\000\040\000@\000@\010@\000a\010a\010"
N "\202\020\201\010\202\010\257c\267\255z\306\331\245\271\245\031\266\071\276\371"
N "\265w\245w\245\227\245\065\235\257k\207\061\344\030\343\030\211\"\307\021\303\020"
N "\344\030\303\030\202\020\003!\242\020\040\000\040\000a\010\202\010\307\001m\003\256\003\256\003"
N "e\001A\000@\010\242\020@\010\343\030\004\031A\010A\010a\010\343\030\243\020\004\031%!E)E)E)f"
N ")f)f)f)IBjB\313R)B\350\071)B\247)\317s\014[E)\206)\303\030\303\020$\031E!E!f)f"
N ")A\010a\010\243\020\304\020\304\020\005\031\005\031&\031f!f!F!F!F!&\031%\031%\031%\031E\031"
N "%\031\243\020\243\020\303\020\004\031E!\307\061\350\061JB\350\061\247)\324\214z\306"
N "\233\306z\306{\306\273\316z\306\371\255w\235\227\245V\235\021|\350\071b\010\303"
N "\020\004!\343\020\344\020\343\030\303\020\303\030\242\020\303\030\303\030@\010a\010\242"
N "\020b\010A\010A\000\246\001m\003\014\003(\002e\001@\000\242\020A\010@\010@\000a\010@\010\202\020\202"
N "\020\004\031%!%!%!E!E)E!E)E)\344\030$!\247\061\015c\307\061\350\071%!McjJ\246\061\347"
N "\071\303\020\243\020\004\031%!%!%!E)%!f)\207)\247)\011:oc\355Z\213J\254R\254R\314"
N "R\254J\217cR\204\315R\355R\016[.[\015S\304\020&\031\245\010\204\010c\000b\000A\000\040"
N "\000\040\000jB\025\225\330\265\270\255v\245\227\245V\235\066\235\330\255\031\276V"
N "\235\061|jB\213J\350\061\314R\242\020\212BE!@\000@\010a\010\242\020\004\031\004\031E!\247"
N "\061\247\061E!\243\020a\010a\010\202\010H\002M\003\353\002\307\001A\000\202\020a\010@\000a\010"
N "\040\000\201\010\202\010\344\030\004!\004!%!%!%!%!%!%!E!E)\350\071\223\214\354Z\206\061"
N "\303\020Lc\350\071E)\205\061\303\030\202\020\344\030\004!\004!\004!%!E)F)f)e)\004\031\212"
N "J\004\031\202\020\202\020\202\010\343\030\343\030E)\307\071$!\350\071\011:\354R\011B\243"
N "\020jJ\021|R|\062t\220c\356J+\062\351)\317kv\245\071\306\371\275\371\275\227\245"
N "W\235V\235w\245V\235\223\214jJ\344\030\260s\307\061\003!\246\061\014S):@\000a\010a"
N "\010\040\000\040\000@\010\242\020\004!\206)\010:\212J-[jJ\011:\206)\010\032\353\012i\002\347"
N "\001a\000\201\020a\010a\010\040\000\242\020b\010\303\030\344\030\344\030\004!\004!\004!\004!\004!\004"
N "!\004!E)\010B\365\234\253R%!\202\020\216k\247\061\202\010\004!\202\020\202\020\303\020"
N "\344\030\344\030\344\030\344\030a\010A\000A\000b\010\243\010J:\310)\005\021&\031&\031\207"
N ")\304\020\310\061\212J\243\020\242\020\202\010\202\010\243\020!\000\202\010\344\030F"
N "!\243\020f!)B\212J\320s\324\224\031\276\031\306\232\316W\245w\255\270\255\227"
N "\245w\245r\204\207)%!\004\031\206)\004\031%!\247\061):\247\061\303\020\242\020a\010e"
N ")\303\030\242\020@\000\040\000\040\000@\000@\000A\010\303\030$!\206)\246\061\307\061IB(:\347"
N ")\004!a\010a\010\040\000\242\020b\010\303\020\303\030\344\030\344\030\344\030\344\030\344"
N "\030\344\030\344\030\344\030\206\061\212R\324\234IB\004\031b\010Lk\004!a\010\242\020\201"
N "\010\202\010\243\020\243\020\303\030\303\030\303\030\314J\021t\220cs\204r\204s\204"
N "\024\235r\204s\204\324\224r\204\213JjB\011:\011:*BJB\213J\350\071\344\030\310)"
N "-S\260k\320s\217k.[\354Rnk\267\255\330\275W\255\065\255\066\265\066\235\030\276"
N "\227\255\264\214jB\206)\247\061\217k\320k\062|S|\022t\320k\220co[.[JB\015c-c-"
N "c-c\212JIB\350\071\206\061\343\030A\000\040\000@\000\040\000\040\000\040\000\040\000@\000\201\020A"
N "\010A\010\040\000a\010a\010\243\020\243\020\303\020\303\020\243\020\303\020\303\020\303"
N "\020\303\030\303\030\247\061\313Zr\214\310\071\303\030a\010\356s\344\030a\010\202\020"
N "\201\010a\010\202\020\202\020\243\020\243\020\243\020\242\020\242\020\201\020a\010\202"
N "\020@\010@\010@\010@\000\347\061A\010E)\253J\213J\212J\206)\206)\350\071\004\031\243\020"
N "\303\020\303\020\304\020\304\020\005\031F!F!\217k\227\255\223\214S\204\224\214\025"
N "\245\030\316\030\306\066\235\213J\004\031%!\303\020b\010\343\030f)\350\071)B\212J\354"
N "RNc\257kncU\255\061\204Q\204\021|\360{\317{\257snknk\216kMc\253R\246\061\202"
N "\020\040\000\040\000\040\000\040\000\040\000@\010\040\000a\010A\010\202\020\242\020\202\020\242\020"
N "\242\020\242\020\243\020\242\020\242\020\243\020\350\071\212R\253R\206\061\243\020"
N "\202\020\215k\307\071\010B\202\020\201\010a\010a\010\202\010\202\020\202\020\242\020"
N "$!E!E!\307\061\351\061\011:\011:)\062f!\005\031\303\020\344\030\004\031F!\310\061\355R\260"
N "kocN[Oc\260k\320koc\355RkJ\011:jBR\204\321s\207)\310\061\321s\217k\223\214\264"
N "\224\213J\247)F!\303\030)B):\355R.[J:%\031\304\020b\010A\000A\000$!a\010a\010\003\031\246"
N "\061iJ\353Z\064\235\065\245\061\204\061\204\020\204\317{\257sMk\313Z\010BE!a\010@"
N "\000@\000@\010a\010A\010a\010a\010\201\010\201\020\201\010\201\010\201\020\201\020\201\020"
N "\303\020\010:\206\061\206\061\011:\350\061IB\017|$)$!a\010a\010A\010a\010a\010a\010\201"
N "\010a\010\201\010\201\010\242\020\242\020\242\020\302\020\303\030\343\030\303\030\343"
N "\030%!f)\010:(:\350\071I:JB\314R\313J\213J):\010:\010:IBIB\307\061\253J\360s\310"
N ")\344\030\247\061\217cN[oc\320s\344\030jJ\020|.ckB\243\010a\010\242\020\206)\212"
N "J\314R\015S*:f!\212J\310\071f)$!\344\030\303\020e)\206)\202\020\004!\347\071\312Z"
N "\357{Q\204\061\204\020|\216sMk-c\212J%!\242\020a\010@\010a\010a\010a\010a\010a\010a"
N "\010a\010a\010a\010\303\030IB\206)\350\071\354Z.[\014[\215kf)\343\030\202\020\201\020"
N "@\010A\010a\010a\010a\010a\010a\010a\010a\010a\010a\010A\010@\010A\010@\010@\000A\010A\010a\010"
N "a\010a\010\201\010\202\020\202\020\202\020\201\020\201\010a\010a\010a\010\201\020\242"
N "\020\302\030\343\030\004!E!\307\061(B\252R,c,c\212JjB\307\061\247\061\253Rr\204\217"
N "c\314J\250)\004\031E!\303\020$!E)iJ,cMc\314RjJ\011:\253R\061\204\307\061E!\303\030"
N "\242\020a\010\343\030\306\061\256sv\255\020\204\317{Mk-c\313RE!A\010A\010A\010A\010"
N "A\010a\010a\010a\010A\010A\010\343\030\253J\310\061IJNc\320sD!(B)B\010:\004\031\201\020"
N "@\000@\010@\010A\010a\010a\010\040\000\040\000\040\000\040\000\202\020A\010a\010\303\030\202\020\201"
N "\010\201\010\004!\243\020\343\030$!\343\030\303\030\242\020a\010a\010a\010A\010A\010a\010"
N "a\010a\010a\010a\010a\010\201\020\201\010\201\020\201\010\201\020\242\020\302\020\343"
N "\030\205\061\353R)B\011:IB\216k\223\204\320k\314J\247)\207)f)\010:\206)\243\020"
N "\343\030\246\061\010:IB\354Z\216kz\306v\245\062|Nc\247\061E!\350\071\242\020\246"
N "\061\313Z\257snk\354Z-c\011B\243\020@\010@\010@\010@\010@\010A\010@\010@\010\004\031\314"
N "RjJ\014[\014[\212Jb\010\344\030\350\071\011:%!\201\010\040\000@\000@\010@\010@\010@\010\040"
N "\000\040\000\040\000\040\000\242\020\040\000\040\000\014[Nc):E!a\010b\010A\000\206)\307\061\350\071"
N "\347\071\201\010\040\000\040\000\040\000@\010a\010A\010\201\010\040\000@\000@\000a\010a\010A\010a\010"
N "a\010A\010a\010a\010a\010\201\010\302\020D)IB)B\314R\217k\021|r\214s\204\260k\021|"
N "nc\320sN[\253J):E!\202\010a\010E)(B\317s\263\224\030\266\227\255\330\265\314"
N "R\005!\202\020\242\020\306\071\014[\253RIJ\212J\247\061a\010\040\000@\000@\010@\010@\010@"
N "\000$!e)\303\030\010:\015[\242\020b\010\344\030\313R\253Rf)\201\010\040\000\040\000\040\000"
N "@\000@\000@\010\040\000\040\000\040\000\040\000\242\020@\000a\010U\245Y\306\360s\313R\247\061\206"
N ")E!e!\247\061\247\061\247\061a\010\040\000\040\000\040\000a\010a\010\201\010\202\020\040\000A"
N "\010A\010@\010\040\000\000\000\000\000\040\000\040\000\000\000\040\000a\010@\000A\010a\010a\010\201\010\202"
N "\020\242\020\343\030D!\307\071\212J\252RMc\061|\021|r\204\061\204\320s\021|\355RJ"
N "B\247)\303\020a\010\003!\246\061Mc\323\224\025\235s\204\355R%\031\202\020\004\031e)\350"
N "\071ncj:\010\032A\000\040\000\302\010\243\021@\000e)\350\061\206)\247\061\004\031A\010\202\020"
N "e)\350\071\010:\247\061a\010\040\000\040\000\040\000\040\000\040\000\040\000\040\000\000\000\040\000\040\000"
N "a\010\201\010\252J\370\275\030\276\327\265\061|-[\350\061E!%!E)E)f)a\010\040\000\040"
N "\000\040\000A\010a\010a\010\242\020\201\020\343\030a\010A\010\040\000@\000\040\000\040\000\040\000\000"
N "\000\000\000A\010\000\000\000\000\040\000a\010a\010a\010a\010\201\010A\010a\010a\010a\010\201\010a\010"
N "\302\020E)\347\071\252Rnk\020lr|\226\225\025\215\320k\213Bf!\202\010A\010e)\246"
N "\061\256sR\204\206)\344\030\202\020\004\031E!)\"\020\024\222\014\303\000\302\020c\031\040"
N "\000\246\061\011:\247\061iJE)A\010#!(B\350\071E)\247\061a\010\040\000\040\000\040\000\040\000\040"
N "\000\040\000\000\000\000\000\000\000\040\000@\000E!\064\235\227\255\267\255\226\255v\255v\255v\245"
N "\226\245\223\214\320sNc\253JA\010\040\000\040\000\040\000@\000A\010a\010\201\010\302\030\242"
N "\020\040\000\040\000\202\020\242\020\040\000\040\000@\000\000\000\000\000\242\020\040\000\040\000\040\000\040"
N "\000\040\000\040\000\201\010\242\020a\010A\010@\010A\010a\010a\010A\010A\010A\010A\010a\010\201"
N "\020\202\020\003!\246\061iBMc\020|-[-[\350\071b\010!\000a\010e)$!f)j:\216\023\217\003\307"
N "\001\242\010\206)\303\020\302\030@\000\246\061\307\071\307\071\247\061\343\030@\010\205"
N ")\312R\350\071f)\247AA\020\000\000\040\000\040\000\040\000\040\000\040\000\000\000\000\000\000\000\000\000$!\222"
N "\214v\245U\235\065\245\024\235\364\224\323\224\364\224\024\235\024\235\024\235"
N "\263\224\222\214\020|jB\247)%!\303\020a\010\040\000\040\000\040\000\040\000\040\000\040\000a\010"
N "a\010\040\000\040\000@\000\040\000\000\000\302\030\202\020@\010\040\000@\000\040\000\040\000a\010@\010\040"
N "\000\040\000\040\000\040\000\000\000\000\000\000\000A\010\202\020a\010a\010a\010a\010@\010@\010@\010A\010a"
N "\010a\010\201\020\343\030e)\307\061f)f)\247\061\247)E!f)\307\021\246\031\303\030\202"
N "\010\004!\343\030A\010e)IB)B\247\061\343\030@\010e)\353ZIB\307\061\307I\040\000\040\000\040"
N "\000\040\000\040\000\040\000\040\000\213J\350\071\307\061\247\061\212J-c\216k\216k\317s\360"
N "{\360s\217k\014S\213J):\310\061\247)f)\247\061\307\061\347\071HB\010:\347\071\307"
N "\061e)$!\004\031\242\020\202\020a\010@\010\040\000\000\000\000\000\000\000\000\000a\010$!$!\040\000a\010\040"
N "\000\040\000@\000@\010\040\000\040\000\040\000\040\000\000\000\000\000\000\000\000\000a\010\040\000\040\000\000\000a\010\201"
N "\020A\010a\010a\010a\010a\010A\010@\010@\000@\010A\010a\010\201\020\201\020\242\020D!\246"
N "\061\347\061\246\061)B\206\061E!\303\020\205)\257s\354Z\343\030@\010@\010D)\013[\206"
N "\061f)\307I\040\000\040\000\040\000\040\000\040\000\040\000\040\000Y\306\030\276\267\255V\245\263"
N "\214Q|\020t\257knc-[\354R\313R\354R\014[McMcMc-c\313RIB\350\071\206)\004\031\242"
N "\020A\010\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000@\000@\010\040\000@\010@\000\040\000a\010"
N "!\000a\010@\010\242\020\302\020@\010@\000\040\000@\000\040\000\040\000\040\000\040\000\040\000A\010\040\000"
N "\040\000\000\000a\010A\010\040\000\040\000\040\000a\010a\010a\010a\010a\010a\010a\010a\010a\010A\010@"
N "\010@\010@\010a\010a\010a\010\202\020\004!\004\031\205)\014[\354ZIJa\010@\010#!+c\303\020"
N "\307\061\206\061\040\000\040\000\040\000\040\000\040\000\040\000\040\000Y\306z\316Y\306Y\306y\306"
N "Y\306Y\306\071\276\071\306Y\306\030\276\327\265V\245\364\224\222\204R\204\317"
N "k\216k-[\354R\253JjJjJ\212JjJIB\010:\206)E!$!\303\020\202\020a\010@\000\000\000\000\000"
N "\000\000\000\000@\010A\010a\010a\010\201\010\201\020\242\020\303\030@\010@\010\040\000\040\000\040"
N "\000\040\000\000\000\040\000\040\000\040\000\040\000\040\000A\010A\010\040\000\040\000\040\000a\010a\010A\010@\010"
N "@\010\040\000\040\000\040\000@\010\000\000\040\000@\000@\010A\010a\010a\010a\010a\010\201\020E)\014[i"
N "JD)A\010@\010\302\030\255s%!\253J\307\061\202\010\040\000\040\000\040\000\040\000\040\000\040\000"
N "z\316Y\306Y\306Y\306Y\306z\316z\306y\306Y\306z\306z\316z\316y\306z\316z\306"
N "z\316\232\316z\316\071\306\071\306\370\265\226\255\025\235\323\214\061|\320sn"
N "c-[\313RjBIB)B(:\010:\010:\247\061E!\004\031\242\020b\010A\000\040\000\000\000\040\000\040\000@\010"
N "A\010a\010@\010\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\040\000\040"
N "\000\040\000\040\000@\000@\000@\010\040\000\040\000@\010\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040"
N "\000a\010a\010\242\020\201\020\040\000\040\000\040\000@\010\201\020\316{\310\061\314J\347\071"
N "IBE)\040\000\040\000\040\000\040\000\040\000z\316z\306\232\316\232\316\232\316\232\316z\316"
N "\232\316Y\306Y\306\232\316z\316\071\306z\316z\306z\316z\316\232\316y\306z\316"
N "\232\316z\316z\316z\316\232\316Y\306y\306z\316Y\306\071\306\330\265v\245\324"
N "\224r\204\020|\216knc-[\354R\313R\212J\212JIB\350\071\307\061\206)%!\004\031\303"
N "\030\202\020a\010A\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\040\000\040\000"
N "\040\000\040\000\040\000\040\000@\010a\010\201\020\040\000\000\000\000\000\040\000\040\000\040\000\040\000\040\000"
N "\040\000\040\000\040\000\040\000\040\000\040\000\040\000@\000a\010\356{jB\314R\347\071iJiJ\040\000\040"
N "\000\040\000\040\000\040\000\071\306Y\306Y\306Y\306y\306Y\306z\306Y\306z\316Y\306Y\306"
N "Y\306Y\306Y\306Y\306y\306z\306Y\306Y\306Y\306Y\306Y\306Y\306z\316Y\306z\316"
N "Y\306Y\306z\306Y\306Y\306\071\306Y\306z\316Y\306z\306Y\306Y\306\030\276\370"
N "\275\226\255\024\235\263\214R\204\021|\020|\257kMc\354R\253J\253R\313R\313R\212"
N "J)B\010:\307\061\206)e)\004\031\303\020a\010\040\000\040\000\000\000\000\000\000\000\000\000\040\000\040\000"
N "@\000a\010\040\000\000\000\000\000\000\000\000\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040"
N "\000@\010a\010\214k\212J\253R\353Z\252RiJ\201\010\040\000\040\000\040\000\000\000\232\316z\316"
N "y\306z\316z\316Y\306\232\316z\316z\316z\316Y\306\232\316z\316z\316z\316Y\306"
N "\232\316\232\316z\316Y\306z\316Y\306z\306z\316z\316z\316z\316z\316\232\316"
N "z\316Y\306z\316z\316y\306Y\306Y\306Y\306Y\306Y\306z\316z\306Y\306z\316Y\306"
N "\071\306Y\306z\306y\306Y\306\370\265\227\255\065\235\223\214R\204\061|\217kM"
N "c\313R\212J\253R\313R\354R\014[\354ZjJ):(B\010:\247\061$!\344\030\202\010A\000\000"
N "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\040\000\040\000\040\000\040\000a\010\251R\060"
N "\204\257s\020|\242\020\242\020\201\020\040\000\040\000\040\000\040\000y\306z\316\071\306z\316"
N "Y\306z\306Y\306Y\306Y\306Y\306Y\306z\306z\316Y\306z\316z\316z\316z\306Y\306"
N "y\306z\316Y\306Y\306Y\306\071\276Y\306Y\306Y\306Y\306Y\306Y\306\071\306Y\306"
N "Y\306Y\306y\306Y\306Y\306Y\306Y\306Y\306\071\306Y\306\071\306\071\306\071\306"
N "\071\276\071\306\071\276\030\276\071\306\071\306\071\306\071\306\030\276\071\276\071"
N "\306\370\275\267\265v\245V\245\222\214Q\204\317s\257k\014[jJ\350\061\247)\010"
N ":)B\252J\252J\303\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\040\000"
N "\040\000\201\020D)\211JHB\312Re)A\010\040\000\000\000\000\000\000\000\000\000Y\306Y\306\071\306\071"
N "\306Y\306Y\306Y\306z\306z\316y\306Y\306\071\306\071\306Y\306\071\306Y\306\071"
N "\306y\306Y\306Y\306Y\306\071\306\071\306z\316\070\276\030\276\070\276Y\306Y\306"
N "Y\306Y\306Y\306Y\306Y\306y\306\071\306Y\306z\306\071\276\071\306Y\306Y\306Y\306"
N "Y\306\071\306\071\306\071\306z\316Y\306Y\306z\306Y\306Y\306\071\306\071\306Y\306"
N "y\306Y\306Y\306Y\306y\306Y\306Y\306Y\306\071\306Y\306\071\276\370\275\327\265"
N "v\245\324\224Q\204\317snc\253R\010:\247\061\206)\004\031\303\020\202\020A\010\040\000"
N "\000\000\000\000\000\000\040\000\040\000\242\020\252R-cMc\216k\256k\360s\060|\257snk\313RIB\030"
N "\276Y\306\030\276\071\306\071\306\071\276\071\306\071\306\030\276Y\306Y\306Y\306"
N "Y\306Y\306Y\306Y\306z\316y\306Y\306Y\306Y\306Y\306Y\306\030\276Y\306\071\276"
N "Y\306\070\276\070\276\070\276\030\276\071\306Y\306Y\306Y\306Y\306Y\306\071\306\071"
N "\306\071\306y\306\070\276Y\306Y\306Y\306Y\306\071\306\030\276Y\306\071\306Y\306"
N "Y\306Y\306\071\306Y\306Y\306\071\306\071\306\030\276Y\306Y\306\030\276Y\306\030"
N "\276Y\306\071\306\071\306\071\306\030\276Y\306Y\306\071\306\071\306\071\306\071\276"
N "\370\275\030\276\370\265\065\245\024\235\363\224\263\214\263\224\317sMc-c\313"
N "R\014[\317s\364\224\065\245U\245\266\255v\255v\255u\245\266\255\226\255\226"
N "\255v\255Y\306Y\306\071\306z\316Y\306Y\306Y\306Y\306Y\306Y\306z\306\071\306"
N "\071\306\070\276\071\306Y\306\071\306\071\306Y\306\030\276\071\306Y\306Y\306Y\306"
N "\071\306Y\306\071\276\030\276\071\306\071\306\030\276\070\276\071\276\030\276\030\276"
N "\030\276\030\276\030\276\370\275\030\276\070\276\071\306\071\306\071\306\030\276\071"
N "\306\030\276\071\306\030\276\030\276\070\276\030\276\030\276\030\276\030\276\030\276"
N "\030\276\030\276\030\276\030\276\030\276\370\275\030\276\370\275\030\276\030\276\030"
N "\276\030\276\030\276\071\276\071\306\030\276\071\276\070\276\070\276\327\265\370\275"
N "\370\275\030\276\030\276\327\265\030\276\327\265\370\275\367\265\370\275\267"
N "\265\327\265v\255U\245\267\265v\255U\245\226\255U\245u\245v\255U\245v\255"
N "v\255\030\276\030\276\370\275\030\276\071\306\070\276\071\306\030\276\071\276\030\276"
N "\030\276\030\276\030\276\071\306\071\306\030\276\071\306Y\306\071\306\030\276\030\276"
N "\030\276\030\276\071\276\030\276\030\276\030\276\070\276\070\276\030\276\370\275\030"
N "\276\030\276\030\276\370\275\367\265\370\275\030\276\030\276\030\276\370\275\370"
N "\275\370\275\030\276\370\275\070\276\030\276\030\276\370\275\370\275\070\276\030"
N "\276\030\276\030\276\070\276\030\276\030\276\030\276\070\276\370\275\367\265\327"
N "\265\327\265\327\265\030\276\370\275\030\276\030\276\367\265\030\276\327\265\070"
N "\276Y\306\030\276\070\276\071\306\030\276\370\275\071\306\030\276\327\265\030\276"
N "\030\276\370\275\071\276\370\275\370\275\030\276\370\275\030\276\327\265\367\265"
N "\367\265\327\265\267\265\327\265\327\265\266\255\267\265\267\265\071\276\071"
N "\306\030\276\030\276\370\275\030\276\071\306\071\306\030\276\030\276\030\276\030\276"
N "\030\276\030\276\030\276\030\276\070\276\030\276\071\306\030\276\370\275\030\276\071"
N "\306\030\276\070\276\070\276\030\276\030\276\030\276\030\276\070\276\370\275\070\276"
N "\030\276\030\276\030\276\030\276\370\275\370\275\370\275\370\275\327\265\030\276"
N "\030\276\370\275\367\265\030\276\370\275\030\276\370\275\370\275\370\275\370"
N "\275\030\276\070\276\370\275\030\276\070\276\030\276\030\276\370\275\370\275\070"
N "\276\370\265\030\276\070\276\370\275\370\275\367\265\030\276\030\276\030\276\030"
N "\276\071\306\030\276\370\275\370\275\030\276\370\275\327\265\370\275\370\275"
N "\370\275\370\275\327\265\370\275\370\275\030\276\370\275\370\275\370\275\327"
N "\265\370\275\327\265\267\255\327\265\327\265\370\275\370\275\370\275\071\306"
N "\071\306\070\276\071\306\030\276Y\306Y\306\030\276\071\306\070\276Y\306\071\306\070"
N "\276\071\306Y\306\070\276\030\276\030\276\030\276\030\276\030\276\370\275\071\306"
N "\030\276\370\275\030\276\030\276\370\275\370\275\030\276\030\276\030\276\030\276"
N "\071\306\370\275\030\276\370\275\030\276\030\276\071\306\030\276\030\276\030\276\030"
N "\276\071\306\030\276\030\276\370\275\370\275\030\276\030\276\030\276\370\275\030"
N "\276\030\276\071\306\030\276\030\276\030\276\030\276\030\276\030\276\030\276\071\306"
N "\030\276\030\276\030\276\030\276\327\265\030\276\327\265\370\275\370\275\327\265"
N "\367\265\370\275\370\275\370\275\327\265\327\265\327\265\370\265\370\275\367"
N "\265\370\275\327\265\327\265\327\265\370\275\367\265\370\275\367\265\267\265"
N "\367\265\367\265\327\265\267\265\327\265\267\265\327\265\030\276\071\306\030"
N "\276\070\276\071\306\071\306\030\276\071\306\071\306\030\276Y\306\071\306Y\306\071"
N "\306Y\306Y\306Y\306Y\306Y\306\071\306Y\306\071\306\370\275\030\306\031\306\030"
N "\276\030\276\070\276\370\275\071\306\071\276\030\276\370\275Y\306Y\306Y\306\071"
N "\306\070\276\071\306\030\276\071\306\030\276\070\276\071\306\030\276\030\276\030\276"
N "\071\306\070\276\071\306\071\306\070\276\071\306\071\306\070\276\030\276\030\276\030"
N "\276\030\276\030\276\370\275\370\275\327\265\267\265\267\265\226\255\327\265"
N "\327\265\327\265\267\265\267\265\327\265\267\265\327\265\327\265\327\265\267"
N "\265\267\265\266\255\266\255\267\265\226\255\267\265\267\265\267\265\226\255"
N "\267\265\267\255\267\265\327\265\327\265\267\265\327\265\266\255\267\265\226"
N "\255\266\255\327\265\226\255\267\265\071\306\030\276\071\306Y\306\071\306\030\276"
N "\071\306\070\276\071\306\030\276\071\306\071\306Y\306\071\306\070\276\030\276Y\306"
N "\071\306\070\276\070\276\070\276\071\306\070\276\071\306\071\306\030\276\030\276\071"
N "\306\071\306\071\306\030\276\030\276\071\306\030\276\071\306\070\276Y\306\071\306\071"
N "\306\071\306\030\276\071\306\030\276\030\276\071\306\071\306Y\306\071\306\070\276\071"
N "\306\030\276\030\276\071\306\070\276\071\306\030\276\370\275\030\276\030\276\030\276"
N "\370\275\327\265\327\265\327\265\327\265\327\265\370\275\327\265\370\275\370"
N "\275\327\265\327\265\367\265\327\265\327\265\370\275\327\265\327\265\370\275"
N "\370\275\327\265\327\265\370\275\367\265\370\275\327\265\327\265\367\265\327"
N "\265\327\265\327\265\370\275\327\265\327\265\267\265\327\265\370\275\327\265"
N "\327\265\327\265\030\276\070\276\030\276\071\306\070\276\030\276\030\276\370\275"
N "\370\275\030\276\071\306\070\276\071\306\370\275\370\275\030\276\030\276\030\276"
N "\030\276\070\276\370\275\030\276\370\275\030\276\030\276\370\275\370\275\070\276"
N "\370\275\030\276\370\275\030\276\030\276\370\275\071\306\030\276\030\276\030\276"
N "\030\276\030\276\370\275\370\275\030\276\370\275\370\275\030\276\370\275\327\265"
N "\370\275\030\276\370\275\370\275\370\275\327\265\367\265\327\265\370\275\367"
N "\265\030\276\370\275\370\275\327\265\370\275\367\265\030\276\327\265\030\276"
N "\370\275\030\276\370\275\370\275\327\265\370\275\370\275\370\275\030\276\030"
N "\276\030\276\030\276\030\276\030\276\370\275\030\276\030\276\370\275\370\275\370"
N "\275\370\275\327\265\327\265\370\275\327\265\370\275\327\265\367\265\370\275"
N "\370\275\370\275\327\265\327\265\370\275\030\276\370\275\030\276\370\275\370"
N "\275\030\276\030\276\370\275\370\275\030\276\030\276\030\276\030\276\370\275\030"
N "\276\030\276\030\276\030\276\370\275\370\275\370\275\030\276\370\275\327\265\327"
N "\265\327\265\370\275\367\265\370\275\327\265\367\265\327\265\327\265\030\276"
N "\327\265\370\275\030\276\327\265\370\275\370\275\370\275\030\276\030\276\370"
N "\275\327\265\327\265\327\265\370\275\327\265\370\275\370\275\370\275\370\275"
N "\370\275\030\276\370\275\370\275\370\275\370\275\370\275\030\276\370\275\370"
N "\275\070\276\030\276\030\276\030\276\030\276\030\276\030\276\327\265\370\275\327"
N "\265\327\265\327\265\327\265\030\276\370\275\370\265\327\265\367\265\327\265"
N "\226\255\267\265\327\265\267\265\327\265\267\265\266\255\226\255\226\255\267"
N "\265\226\255\267\265\267\265\266\255\226\255\226\255v\255");
N
L 24 "Blinky.c" 2
N#include "haas.c"
L 1 "haas.c" 1
N/* GIMP RGB C-Source image dump (haas.c) */
N
N#define HAAS_WIDTH (100)
N#define HAAS_HEIGHT (97)
N#define HAAS_BYTES_PER_PIXEL (2) /* 2:RGB16, 3:RGB, 4:RGBA */
N#define HAAS_PIXEL_DATA ((unsigned char*) HAAS_pixel_data)
Nstatic const unsigned char HAAS_pixel_data[100 * 97 * 2 + 1] =
N("\310\061\310\061\350\071):JB.S\220coc\254R.c\024\235\212J\350\071\307\061\010:-c"
N "\253R\350\071\350\071\350\071\350\071\254BN[v\245\220c\355RkB):\011:\011:\011:JB"
N "\213J\315J.[\260k\024\235\360s-[iBjJjJ\010:\307\061\247\061\247)\016[\267\255\354"
N "R\247\061\247)\247\061\307\061\307\061\310\061\247\061\247\061\307\061\015[f)B\000B\000"
N "b\010b\010\203\010\203\010\244\010\310\061g\021\006\001\346\000\345\000\305\000\244\000\244\010"
N "\203\010c\010c\010\344\020b\010A\010A\010A\010A\010A\010A\010A\010A\010B\000\304\010\305\010"
N "\305\010\244\010\305\010\304\010\304\010\304\010\244\010\244\010\345\020\314JO[\261"
N "c\321k\321cp[\355R.[\214J\355R\024\235\213J)B\310\061):\314R):\350\071\350\071"
N "*B\220c\023loc\024\235J:\350\061\207)\207)\247)\310\061\207)\247\061\247\061\206"
N "\061f)NcQ\204JB\217kS|\217c\213J\010:\350\061\307\061\247\061\015[U\245\015[Nc\350"
N "\071\350\071\350\071\350\071\350\071\350\071\310\061\310\061nk\207)b\010\203\010\203"
N "\010\203\010c\010b\010\243\010E!\356JL*\252\031H\011\006\001\346\000\346\000\345\000\345\000"
N "\345\000\305\000\305\000\305\000\305\000\244\010\244\010\203\010\203\010c\010b\010b\010\345"
N "\010\305\010\305\010\244\010\244\010\244\010\244\010\304\010\244\010\244\010\244\010"
N "\362kO[\015S\313RjJjJ\213R\015[\314Z\217kU\245-c\253RjJ\212J\212JJB)BJB\260"
N "cT|o[oc\024\235IB\350\061\247)\207)\207)\247\061\247)\207)\247\061\206)\206)o"
N "k\020|IB\010:\314R\321s*:\207)\247)\206)f)\016[\065\235JB\253JNc\310\061\247\061"
N "\307\071\350\071\350\071\307\061\310\061nkf)\202\010\344\020\344\030\344\020\344\030"
N "\344\030%!\304\020\357:\360\062\360*\257*\217*\216\"\256*m*,\"m\062+\"\353\031"
N "\251\021'\021\346\010\244\010\244\010\245\010\305\010\345\020\345\020\006\021H\031(\031"
N "G\031kB&\031\006\031\006\031\005\031\305\020\244\010\014[\014[McnkMc-[\354ZMcjJok\262\224"
N "\314R\213J\253R\314R\015[-cMc\320k\264\204\062|-[\320s\024\235-[\216kMc-c-c-"
N "c\015[McnkMcNkR\204\222\214nk\020|\360{\061|R\204-[NcncncS\204v\245\015[\313R"
N "\354R\360sjJIBJB\212JjJ\354Z\360{%!b\010\303\010\304\010\304\020\243\010\243\010"
N "\304\020\243\010\064LZU\371T\270LVD\364;\024LR\063\323K\357\062\360*\361*\361*M"
N "\"\252!&\021&\021G\031'\031\345\020\305\020\006\021KJmRMJ\260R.BNBNB.:.:\355\061\261"
N "c\254J\310\061\310\061\307\061\307\061\307\061\011:\250\061.c\222\214jJ\011:\247\061"
N "\247\061\310\061\350\071\247\061N[\023lkB\247\061ok\262\214\014[\354R\247)\206)\207"
N ")\207)f)f)f)f)f)\260s\256s\010:\212J\313R\015[JBnckJ\207)f)Nc\364\224jBJBjB"
N "\213J\320s-c\213J\213J\011BJB\257s\004\031b\010\304\020\344\020\005\021\304\010\243\010"
N "\304\020\203\010\363K\274e\274e\274e\274e\274e\274e{]\224#\062\033\022\023\023\023"
N "\063\033\322\022\260\022\260\022\321\032\321\032\260\032\217\032\217\032\360*L***K\062"
N "\215\062l\062\213B\213J\254J\253J\253RO[\362kp[JB\310\061\310\061\310\061\011:\310"
N "\061\220kQ\204jB)B\310\061\350\071\011:)B\350\071\220c\362k\011:\310\061\260s\363"
N "\224\014[\314Z\247\061\206)\207)\247\061\206)f)f)E!\207\061\361{\256s\010:\010:"
N "\010:\011:\310\061\207)-[\314Rf!oc\323\224)B\310\061\247\061\207)\310\061Nc\253"
N "J\307\061\207)\310\061\217k\304\030b\010\304\020\344\020\344\020\304\010\243\010\243"
N "\020\203\010\315:\363K\023L\363C\064LuL\226L\226Lr+\062#\063#t+t#\023\023\023\023\023"
N "\023\023\023\023\023\363\022\322\012\322\012\022\023\022\023\022\023\063\033\063\033\321\022"
N "\321\022\321\022\220\022\015\012p\012IBkB\220c\321k\355R\350\071\307\061\351\071\351"
N "\071\260s\020|*B\011:\247\061\011:\350\071\350\071\310\061.[\321c\350\061\310\061\321"
N "s\222\214\015[JB\310\061\247\061\247)\310\061\247\061\207)\207)f)\247\061\022|Mc"
N ")B)B\010:\350\071\350\071\247)\247\061\314R\015[\220k\323\224IB\350\071\310\061\247"
N "\061\011:\014Sok\014[\247\061\350\071nk\243\020\202\010\344\020\344\020\344\020\304\010"
N "\243\010\243\010\203\010\316:\065D\024D\322C\025D\024<\364;q;\020+\360*\017+\317*\320"
N "\"\320\"\320\"\020\063\362\032\362\012\362\012\322\012\362\012S\033t\033T\033t\033\224"
N "#\063\033\023\033\362\022\320\032\262\012\364\012\354Z\213J)B\314J\261cp[KB\351\071"
N "):\321s\257s\011:\350\071\350\061\212J\010:\010:\310\061\254J\022l\351\061\350\061"
N "\361{q\214\354Z\350\071\247\061\247\061\207)JB\253R\350\071\247\061f)\250\061\022"
N "|McIB)B\010:\010:\011:\350\061\307\061\247)jB\022|r\204\253R\354R\313R\253R\213"
N "Jnc.[-c\015[)B\257k\243\020\202\010\344\020\344\020\344\010\304\010\243\010\243\010"
N "c\000\214*\024D\363C\221CvT\024D\025D\222;r\063s+R+\361\"t+t+u+S\063\321\032\362\012"
N "\322\012\261\012\022\023S\033t\033T\033\225#T\033\063\023\321\022\361\032\362\022\024\023"
N "\323\012\253R-cNc\015[\354Z\320k\220cnc\217k\223\214\020|Mc\354Z\220kMc\313R"
N "\253R\213J\354Rs|\217cnks\214\222\214\360{\014[\314R\253R\212JNc\324\224R\204"
N "\216k\015[Nc\263\224\020|\216k\216knkMc-c-c-cNcNcs\214U\245-c\354Z\014cnknkN"
N "cok\320snk\021|\320s\203\010\202\010\344\020\344\020\344\020\304\010\243\010\203\010"
N "b\000+*\364;\263;\312\031\222;\364;\025<\222;s\063s\063\062+\361\"T+t+t\063\063+\362"
N "\032\362\022\322\012\362\022\362\012S\033T\033T\033t#\063\033\362\022\217\022s#T\033\024"
N "\013\222\002\360{\360{\317s\320{\360{\217k\260kJBkJ\021|\020|jJ\212J\360{Mc\216"
N "k-c\314R\015[\320k\321k\213J\021|q\214Mc\014[\313R\354R\014[-[U\245v\255\065\245"
N "R\204-cR\204\216k\253R\253J\253R\253R\253R\212JjJ)B\010:\321s\222\214JBJBI"
N "BJB\213R\015[NcNcJB\253R\257s\202\010\202\010\344\030\344\020\344\020\243\010\203"
N "\010b\000B\000\311\031\065D\323;\251\031\020+\324;\025<r\063s\063\062+\362\"\321\"T#T+"
N "t\063S\063\022\033\322\012\261\012\023\023\322\012T\033t\033t\033S\033\062\033o\012s#T\033"
N "u\033\323\012\322\002R\204\320s\217s\257s\320s\317s\320s):\220sR\204r\214\020|"
N "\020|R\204\320s\320s\320sMc\257k\222\214\323\214s\214R\214\024\235\025\235\024"
N "\235R\204s\204\263\204\263\204\025\235\324\214\263\214\263\214R\204\223\214"
N "Q\204\320s\361s\361s\320s\320k\260k\217cocN[\021t\263\224Nc.c-[.[\015[\314R"
N "-[\217k\354R\314Z\360{\011:\310\061\011:&!\310\061&!\345\020\005\031\203\000\251\021"
N "\065D\263;\352\031\317*\324\063\025D\061\063R+\362\"\321\"\321\"\063#\063#\063+\022"
N "\063\321\022\261\012\220\012\321\022\322\022s\033t\033S\033\062#\257\022\321\022T\033\266"
N "+\023\023\262\002\023\023\257k\253R\213JJB\314R-[\014[\011:\355Z\222\214\017l\314R"
N "\253R\260k\217c.[\260koc\260k\022|\022t\361ss\214r\204\021tr\204\361s\321s\320"
N "k\260k\360sR|s\204s\204\361s\263\224Q\204\320sNcNcncococ\217c\260k\220c\062"
N "|\364\224.[\314R*B\015[\351\071\310\061\350\071\011:\253Rnk\361{\012\062h!G!&\031"
N "\220k\250)K:\214B&\021\312\031\263;r;m\"\020+\061+R\063\257\"\320*\260\"\260\""
N "\321\"\362\"\362\"\362\"\320*\320\".\022\306\010i\011\312\021,\032\313\011\353\021"
N "\320\"\260\022\063\033\225#t\033\322\012\262\012\023\023\361socOc\015[Nc\217k\217k"
N "\011:\355Z\223\214\360s.c\314RO[\064l\361s\361s\361k\361kR|\320kOcR\204\021|"
N "\217cR\204nc-[.[.[\320k\320s\223\214\223\214\320sR\204\263\214\021|\354R\212"
N "JJBJB\011:\010:\350\071\011:\361s\061\204\314R\355\202\260\323\021\214N[\314R*:"
N ")BQ\214\317{\320s\210!\346\010\006\021\006\021KB\203\010\305\010G\031\203\000G\031\324"
N "KQ\063\061+\263;R+\062+\216\032\321\"\260\"n\"\321*\362\"\322\"\322\032N\"\211"
N "R\007Jh)\353\031i!H!\006\031h\031m\062n*\220\032-\032\354\031N\032\362\032\361\"\062|\361"
N "s\321s\220k\220k\220k.[\351\071\015c\223\224\216k-[\253R\260kVl\023l\321k\217"
N "c\257k\021|\063|\361{\263\224r\204\320ss\204\361s\320s\257k\260k\021|\360s\062"
N "|\263\214\021|\324\224\323\224\223\214r\204R|\062|\062|\062|\061|\021|\021|\264\214"
N "\024\235\257sM\203\317\273\357\223Ncok\320s\257s\363\244u\265\360{\304\010\244"
N "\010\305\010\006\021\250)c\000\244\010\006\021\005\031\254JQ;\061+\263\063\223\063\361\"\260"
N "\032N\032\260\032\260\"n\"\321*\260\032\321\032\261\032N\"\214:*BH\031\016\"h!I\031"
N "\244\020\346\010m\062\260\"n\032\204\010\244\020(\011\260\032\026T\263\214Q\204Q\204"
N "\317s\360{\360{\061\204\257kR\214\364\234\360{\257snk\022|VtVl\063|R|\061|r\204"
N "\224\214\261s\263\224R\204\360s\061\204\216k\317s\217k-c\360{\015[\014[\360{"
N "\021|\263\214\223\214\065\245U\245\065\245\065\235\025\235\025\235\024\235\364\234"
N "\263\214S\204\263\234\015\233\353\232n\203\217k\254J*B\011:\011:\317\203\326"
N "\305\256s\244\010c\000\204\010&\021\210!\244\010\305\010\345\020\203\000H\021R+\320\""
N "R+\021#\260\"\217\032N\032\220\032\321*\217\"\260\"O\022\220\032p\032\014\"\244\020"
N "+\062h\031\007\011\060\"\254\031\204\010\203\010\013*R\063m*\005!\305\040c\010\344\040\247"
N "\061\263\224\024\235\024\235\360{nk\014[\354Z)B.k\223\224-c\354Z\354Z\021|\261"
N "c\325[\364c\361s\021|r\204\064\204/c\324\234Mc\217k\360s\354Znc\257snc\217k"
N "\314R\253R\253R\015[\324\224\263\214\024\235\024\235\024\235\364\234\364\234\364"
N "\234\364\234\364\234\324\224\223\214Q\244I\222\316\343\262\344os\315RlB\012"
N ":\352\071kJ\221\234\216k\006\021\204\000c\000\345\020g!\244\010\305\010\304\010c\000'\011"
N "\260\032-\022\257\032\220\032o\022N\022\015\022O\032\217\"-\032.\032\016\022O\022/\022\354"
N "!&!\013\062\061C\306\010\315\031\253\031\243\020\244\020+\062M\"\204\010\007\031\257J\012"
N "J\006\071h\061\064\245R\214Nc\064\245\367\275\326\275\221\214\354Z\021\224\324\264"
N "\257\333-\273N\323\323\304U\255T\245\064\245\266\265\266\265\226\265\063\204"
N "/k\021\204\354R\015[\320sjJjB\253R\253JNc\213R\213JjJ\314R\364\234Q\204nk\217"
N "k\257s\320s\020|\061\204R\204r\214R\204\224\214\020\244(\202\352\262\363\354"
N "m\263\016[\315J\255J\214J\011:jJ\354Z\346\020\305\010\245\010&\021&\021\244\000\006\021"
N "\346\020c\000\007\011n\022\014\022N\022N\022O\022.\022\354\021.\032N\"\354\031\314\021\315"
N "\011\016\022\355\021\014\"\014*\256B\060S'!\015*\355!\306\030I\031\013*\346\020\305\010"
N "\252Afq\206i\320r\064S\226\265Q\214\354b\363\234\367\305\367\305Q\214,c\021"
N "\224\324\274N\373\253\322\015\353\064\315\266\265\225\265T\255\266\265\326\275"
N "\266\265R\214\214Zr\224NcN[\021|\015[\355R\314R\314R\257s\015c\313R\213R\354"
N "Z\323\234\217k\254R\355R\254J\315J\213BkBJBJ:kB\361\213\216\243\350\201I\222"
N "L\323,\323\015\223\016{\016{.\203O\213n\223\216\213\351Q\351Yg\071\210!G!\304"
N "\010\346\020\346\020\204\010'\011N\022\354\021N\022.\022.\022\015\022\354\021.\032.\"\313"
N "\021\213\011\254\011\314\011\213\011\212\031\217\062,*g)\245\010\253!\016*\355)\213"
N "!\013*&\031g\061\210Y\201p$\201N\202\065k\361\313\321\323n\253\360\323\360\343"
N "\320\343\015\313j\222\016\203R\244-\363.\373\354\362\262\314\363\254\323\254"
N "\363\264U\275U\305T\305T\275\257\213\222\234\314Z\314R\361s\260k\220c\217"
N "c\060t,\213\350\231\247y\350\201\213\222n\263\257\303-\243N\243n\223\217\223"
N "\257\223o{Nk.cNc\257\223,\243,\213\216\223\360\233Q\244\222\254R\234\263\244"
N "R\244\021\234\223\244\324\234r\214R\204\263\204\025\225T\245u\255u\255jJ\204"
N "\010'\011\014\022\354\011-\012\015\022\016\012\355\021\314\021.\022-\032\253\021\253\011\254"
N "\011\254\011\254\021-\"sC\257\062\203\010\305\010\007\021H!H!\305\030\312)\305\010\203"
N "\020\346H\240\200Dy\017k\310q.\373N\373\253\262N\343\217\373\217\373n\373\260"
N "\373\217\253r\254\217\353\315\362J\322F\241\203`\243`\344p\207\201j\252\216"
N "\333M\263M\263\317\273\060\274Q\264r\254r\234r\214\263\224Q\204\360\213n\213"
N "\216\213\360\223R\224\061\224\061\224\361\213\320{\062\204\364|\025u\363\305r"
N "\336\320s\220c\220ct\204\261c\220[p[\223\214\316B\255:\321k/S\251!\312!\017"
N "C\060KqC\\V\031~W\316\231\326\271\326\014[\204\000'\011\314\011\314\011\015\012\015\012"
N "\015\012\314\021\253\011\314\011\212\021H\021\212\021\212\021I\011j\011M\"\062;\021C\244"
N "\010\245\010\346\010\306\020\346\020\244\020\251!\245\010c\000\010\061\342\210$q\013B"
N "&A\360\343\320\353\257\343\320\343\360\343r\344\024\335v\325\226\305\327\315"
N "\263\304o\233N\203\014{\216\203\257\203\020\214\060\224\361\254\023\255\263\224"
N "\324\224r\204\062|\062t\321k\362k\261[\221[\060S\362kPS\060KPKpS\224\204qK\221"
N "K\357BXU;V\067E\317\234r\377\355\203\255:\255:St\357:\357B\316:p[L*\322k\260"
N "c\316B\211!i\031\356:/C\357B\326L{nx\316\231\326\231\326\313Zc\000\007\011\212\011"
N "\212\011\313\011\354\011\355\011\253\011\253\011\254\011\010\011\203\010\006\021\006\021c"
N "\000B\000\013*m\062\256:\304\010\005\021\346\020\347\040\246\030C\020C\010c\010\014*\306\030"
N "\244@\203Pk\061\010!n\303\317\273\020\234\222\234r\234\263\234\263\234\222\214"
N "\263\224\065\245\364\224\365\224\223\204\025\235St\022\\\026U\263d\062\367p\336"
N "\316B\060K\317B\256:\020C\317:qS\357BPS\317Bp[\265\204\316:\357B\256:PKqS\027"
N "e\317:qC\335f\332=\222\215r\377\270\356pK\062d\066\235\017K\357B\215\062\325\224"
N "s\204/S\026\245\374\346OS\017+\322c\316:\013*\033N{fX\306X\316\027\306\350Y\203"
N "\070'!\212\021\212\021\253\011\253\021\254\021\253\011\253\021\306\000B\000!\000B\000\203"
N "\000A\000b\010\203\010\204\010\305\030\243\030\242\030\202\040!(\002\060C(d(\245\040\313"
N "\071hI\302p\242X\244(\350\040\024\235R\204\021t\022t\063tp[\060K\357BpSPS\357B\060"
N "C\020KTd\323[\023D\235N\365T\320\356r\377\317sqC\316:\366\214\362K\256:qS\060"
N "Kw\235p[\017K\362k\261c\270\255\023l\322KPKw\215m\062\067M\376f\\>\367m\023\377"
N "R\374\224\244\022\214R\234{\346\233\336+\062\365\264\370\375\025\265R\244\232"
N "\376\260k\224d\023ll\062\013\"P#\330eX\306X\316R\204\345\020B\010\210\071\251A\251"
N "\071\312\061\353)\313!\253\031\354\031(\011B\000!\000\203\010H\031\203\010b\010c\010\204"
N "\010\204\030\203\020\343\030$!\345\060\205@\205@\205@\204@\205@\244P\301\200\301"
N "\200\343`J)\361k\017K\256:\256:\357B\020K\060K\362c\060K\357J\357B\060C\357:\026"
N "m\363[\256:XE\372E\261\336t\377\030\356\321SS|\227\315\022lw\245\017K\357B\366"
N "\234\333\366\334\356\017K\264\224\334\376\365\234\270uPC\371\255l*\265D|^\067"
N "=\216[R\376\217\373\025\365\224\234\362{v\365V\365\214B\324\264\071\376\264"
N "\274\224\254z\376\260c\026u\026\215\264ll\"\017\033\224D\327\265\223\214\357J"
N "\305\020B\000\352)+\062L:lBKJ+J\312\071\353\071i\031B\000B\000B\010c\010B\000B\000B\000c\010\204"
N "\010\244\010\242\010b\010\303\020\311AiId@d@d@cH\241x\301\200\241XA\040\261[PK\317"
N ":\317B\221[\356B\256:s|\022l\026\225t|\221K\357\062\270\225\362[P\063|F\372Er"
N "\276t\376\220\373S\214\264\234V\265\063\214\267\355\356J\256:\063\214\370\375"
N "\324\374\362s\220k\232\376\324\234:\246\261C\371\255\017\063\221;\234^\032F\314"
N "s\363\375\217\373O\373\267\335\062\214z\366\233\376\025\245\030\336Y\366\333"
N "\366\233\356Z\376\362cW\215w\225\371\245\264l\063\064\362\063p[\260c\255B\305"
N "\010\204\000\352!+*l\062l:m:\216B+:,Bi)\203(B\040A\040A\030A\010B\010\"\000B\010c\010\203"
N "\010B\000A\010A\000\242\030\305H\245P\245P\007Q\244P\301x\240xA\070!\010\230\265PK\017"
N "K/S\371\275Y\306\227\255\316B\031\316\373\376\230\275\224T\022D\371\255\221"
N "S\322;\332Et<P\255\224\375o\373v\365\264\224\330\315\022\214Z\366\321k\215"
N "B\224\234\030\366Y\376\066\255\365\244z\376\223\224:\256\264dZ\276\365t\067M"
N "\372U\270E/\326\021\375\355\372\355\372\025\375\022\214\030\376Z\376\370\375\065"
N "\375\267\375\232\376\333\376Y\376\063\\W\205\270\225\325t\026}\265\\\220\063"
N "OS\025\235/S\346\020\346\010\007\011'\011i\021\252\021\252\031\313\031\212\031\253\031"
N "\212\021\305\010B\010A\010A\020A\040\304\060a\040\005\061&\061F\071\203\040\241\040\301\040"
N "\201\040b(B(\203(\346\040\203(\241x\200hA\040B\020\066\325\331\275\034\357Ocw\335"
N "w\365\364\374pc\325\244z\376\026\265tdsd\371\245\321K\255\062WE\223TO\275Q\374"
N "N\373o\373\270\325\370\325S\224\374\376Y\366\071\316Z\366\370\365\330\375]"
N "\377\374\376z\376V\235\032\256\365tz\276w\215\270}wU\264D\362\356u\375o\373"
N ".\373\324\344pk\267\375\232\376\071\376z\376z\366Y\376\273\376\071\366S\\\066"
N "\205\230\225\322\063w\205tL\316*\260c\324\214\220cG\031\007\021'\021'\021'\021'\021"
N "\007\011'\021\007\011H\021i\031\305\010B\000!\000!\000!\000c\010B\000Q[w|wt\311)\341\010\201\010"
N "a\000!\000!\000!\010c\020\203\070\241\200``!\020!\030\025\255\227\315\223\374\021\204w"
N "\325\330\365\330\375\220k\365\254Z\376\365\264td\026u\371\245\230\215SD\230"
N "E\365\215q\356\217\373\016\373.\373s\374\330\325\223\244z\376\226\375\030\376"
N "\324\374\370\365v\375\232\376\273\376\232\376\270\265\031\256\066}\370\245\026"
N "m\026\205\230M\021D\362\366T\375V\375\062\374\062\304\016S\370\375Z\376\232\376"
N "Y\366\267\365\370\375\232\376\071\366\022T\026}\067\215\261;\230}\325Ll*\260k"
N "\220c\215Bh\031G\031G\031G\031G\021h\031h\031'\021'\021\007\021\006\021\305\010B\000!\000!\000!"
N "\000!\000A\000QS\026lWl\251)A\000A\000\203\010\203\010\204\010c\010A\000A\070\240x``!\010\"\010"
N "V\265\227\315z\376\025\255\030\346\030\366\232\376\333\346\273\366Z\376V\265"
N "Vm\066\205\371\245\031\246\270\205WM\025\226\064\377\324\374.\373o\373s\374s\214"
N "\223\254\232\376V\375\370\375\034\377\030\366\273\376Y\376\273\376z\376\267"
N "\265:\256\066}\267\225\026]\026\205\230M\222\\\023\377\064\375z\376\232\366v\355"
N "\321s\232\376\030\376\370\375\227\375\226\375Z\366<\377\334\356\321;\066m:\236"
N "\370\225\270\215WU\215\062\356J\315Bm:\251)\251)\251!\211!\211!\210!h!h!h\031"
N "g\031G\031'\031\305\020\244\010\244\010\203\010\203\010\244\010rS\264c\365c\210!a\010"
N "a\010b\000\203\010c\000B\000B\000a@\200p`X!\010B\000\025\265\330\335\334\376Y\366v\375\330"
N "\365\267\375\034\377z\376\071\376\370\305\270}W\205:\256\066}V\215\325Lr\225"
N "\064\377\324\374R\374R\374\364\364\255B\223\244\071\376\333\376\034\377Z\376"
N "\327\365\267\375\227\375\071\376Z\376\227\245\270\225\325t\330\235\026e\031\206"
N "\032f\026\246V\377\030\376\030\376\327\325z\376V\235}\357]\347\071\266Z\256\267"
N "\225\325|st\224lW}\066utL\221#\357\032\356\022\013\"l:l:L:\312)\312\061\311)\311"
N ")\312)\312)\352)\352)\352)\352\061\352)\312)\312)\312)\251)\251)\251!\210!"
N "\223[\026lVl,\062G\031G\031G\031G\031'\031&\031\006\031\202Hah\201`B\010\204\010\264\234"
N "\330\345\370\375Y\376V\365\370\355\370\375\333\376Y\376\071\376\330\275\330"
N "\205W\205:\256\026u\365|\366L\221\255\324\376\065\375z\376z\366\263\374r\214"
N "\365\254\333\376\223\374\232\366\263\374\370\365\327\365z\366\374\376<\377"
N "w\225\066]\031\226\273\256\330\225\031v\227]S\306s\377\365\366Y\346\021|\071\316"
N "\264lSLRL\063D\362C\261C\260CW}\324|\214\062\255*\316:\352!\312\021\251\021\251"
N "!\013\062\013*\352)\251)\251)\251)\251)\251)\251)\251)\251)\251)\312)\312)\251"
N ")\311)\311)\251)\251)\251)\251!QS\264c\324cL\062\251!\251!\251!\211!\210!h"
N "!h!\211\061\211\071\006\061\306\030\245\020\022|\370\345\071\376\273\376\273\376\071"
N "\356\273\376\232\376Y\376\071\376\267\255\330\215\066\205Z\266\325tW}\025Mq\326"
N "\327\376V\375Y\366\370\325\371\375Z\336\031\276\236\357\034\347\370\235\272"
N "\276\330\245\066\205\365\204s|Rl:\236\071\236\066u\224LsL\230M\022D\261\336q\377"
N "n\275\355J.K\361c\321S\321K\321S\260S\260c\320k\065\225\363\234\357{\317{\360"
N "\203\060\204\020|\216k-c\355Z\314R\214JkB+:+\062\012\062\012\062\352\061\352\061\352"
N "\061\352\061\352)\312)\312)\312)\312)\312)\312)\251)\251)\251!\251!\251!\251"
N ")\211!\211!\211!\211!\211!\251!\312)\210!h!h!h!h!G!\016S\031\366\232\376\034"
N "\377\267\375\370\355\330\375V\375Y\376\071\376\227\235\025e\026uz\246\230\205"
N "\273\246z\236\063\357w\377\032\377\370\345\320c\071\326\370\325\061LsT\362C\321"
N ";\321;\260C\261CpC\224d\370\235st\220COC\260SOSw]NS\360\315\360\366\317\244"
N "\020\204\060\204\020\204\360\203\020\204\060\214Q\224q\224P\224P\224\060\224\060"
N "\214\060\214\017\214\357\203\357\203\357\203\317\203\317{\317\203\317{\317{"
N "\256{\216snk-c\354Z\254R\214JkB+:+:\012\062\012\062\012\062\012\062\012\062\352\061\352"
N "\061\352\061\352)\352)\352)\352)\312)\312)\311)\311)\312)\352)\251!\251!\251"
N ")\251)\251)\211!\361sz\366\267\375\327\375\324\374\370\365\330\365\273\366"
N "~\377]\367w\215Ve{\236Z\246\365t\026M\065]\062\367p\377M\265S|\220K\062d\325|"
N "\022L\022L\261COCOKNS.S\065}U\225ncNc\257s\317{\357{\317{\017t\316{\356\203\356"
N "\203\316\203\316{\316{\316\203\316{\316{\256{\256{\256{\256{\256{\256{\256"
N "{\256{\216{\216{\216{\216s\216{\216s\216s\216s\216s\216s\216snsnsnsnsnkmk"
N "Mk\015c\354Z\254R\213JKB*:\012\062\352\061\352\061\352)\352)\352)\352)\312)\312"
N ")\312)\312)\312)\312)\312)\312)\312)\312)\312)\252)\066\255]\377]\367\333\306"
N "\374\316z\256\227\215\365\204\361c\021\\\031\216\227\205\224T\022D\260;\264D"
N "qdr\377\061\367\215k\016S\356J\016S\015[Nc\217k\216s\256{\256{\256{\256{\216{"
N "\216{\216{\256{\256{\256{\216{\256{\256s\215s\215smsmsmsmsmsmsmsmsmsmsmkm"
N "kmkmsmkMkMkMkMkmkmkmkmkmknknsnsnsmkmkmknknkmkmkmkMkMk-c\354Z\314R\213JJB\012"
N "\062\352\061\311)\312)\312)\312)\312)\312)\352)\353)\013*+*+\062+\062,\062\066\235"
N "\066\205\223l\361KO;/;/;O;\066u\267\225oS/;\016C\316B\356J\264T-[\217\305\356"
N "\254\215{\256{\215{\216{\215{\215{\215{\216{\256{\216{\216{\216{\216{\216"
N "{\216{\216{\216{\215s\216smsmsmsMkMkMkMkMkMk,k-k-k-k-k-k-k-k-k-k-k,c,c,c,"
N "c,cMkMk-c,c,c,c,c-cMcMcnknk\217k\257k\320k\320k\360k\021t\021t\062t\062t\062tS"
N "tSl\022d\321[\221KPC\060;\017;\020;\017\063\020\063\020\063\020\063\020\063\020;\365\204"
N "\224L\264LsL\063L\220COC\330\215\324\214Nc-[-cmk\216s\216s\215smkmsLsLsmsm"
N "s\215s\215s\215{\256{\256{\256{\256{\216{\216s\215s\215smsmsmkMkMkMkMkMkM"
N "kmkmkmkmkmkmkmkMkMkMk-k,c\014c\014c\014c\014c\014c\014c\014c-cmk\257s\360s\021tRt"
N "Rt\223t\264t\264t\264t\325t\325l\325l\265d\264d\265d\265d\265l\265l\265t\264"
N "t\324|\264|\264|\263|\223|s|r\204r\204\061|\320soc\016S\255B\213:k:+\062\013\062"
N "pS.K.[nkNknk\216s\357\203\256{\256{\256{\256{\256{\216{\216{\256{\216{\216"
N "{\215{\216s\215s\215s\215s\215s\215s\216s\216s\215smsmsmsmsmkmkmkmsmkMkmk"
N "MkMkmkmkmkMkMkMk-k,c\014c\014c\354b\354Z\014[Mk\217s\360{\061|s\204\324\204\365"
N "\204\366|\026u\026m\026e\325\\\265\\\265T\265\\\325d\325l\365t\025}\025\215\364"
N "\214\364\214\263\214\222\214Q\214\060\204\020\204\357\203\317\203\316{\256{"
N "\256{\256{\216{\215{\215{\216{\215{\215{\215sms\312Z\351t\310t\311c\212|\257"
N "{\256{\256{\316\203\316\203\317\203\316\203\256\203\316\203\316\203\256{\256"
N "{\316{\316{\256{\256{\256{\256{\216{\215smsmsMkmsmsmsmsMkmsmsmsms\216s\216"
N "s\216snsMkMkMk-c-c,c,c\014c,c,c\014c\354b\014cnk\021\204\223\214\365\224\066\215"
N "\026\205\026u\325d\265\\\225T\225L\225L\265T\326\\\026m\067}\026\205\025\215\364"
N "\214\323\224\222\224Q\214\017\204\316{\317\203\356\203\316\203\316\203\316"
N "\203\256{\256{\256{\256{\256{\256{\256{\256{\216{\216{\216{\216{\215{\215"
N "{\215{\215{\215sMs,k\257s\267\245\061t\316\203\316\203\316\203\317\203\256"
N "\203\256\203\256\203\256\203\316\203\316\203\256{\316\203\256{\256{\256{\256"
N "{\215smsmsmsMkLk,kLkMkmsms\216s\256{\256{\216s\216smsMkMk-k,c\014c\014c\014c"
N "\354b\354Z\314Z\311)\351\061\012:\012:\260k\224\204\366\204\026u\325d\325T\265"
N "T\265T\265T\265\\\325d\366t\026\205\026\205\224|\022t\217c\015[\253R\213J\213"
N "R\253R\313Z\353Z\354Z\014[\014cMkmsms\216s\215{\215{\216{\216{\256{\256{\256"
N "{\256{\256{\256{\256{\256{\256{\256{\256{\316\203\316\203\014k\246\061\020|\377"
N "\377_\337\256{\256{\256{\256{\256{\256{\256{\256{\256{\256{\216{\216smsms"
N "Mk,k,k,k,kLkMkMkmsmsmsnsms\216snsnkMkMkMk-k-k-c,c,cMk\257sr\214\065\235\263"
N "\204.K\214\062\207!\203\010F!%\031F!\351)\366\\\026mW}\230\225\227\235V\235\324"
N "\224R\214\357{\317{\256{\215sMs\014k\354Z\213RJB*B\012:\012:\012:\012:\352\061\352"
N "\061\351\061\012:\012:*:*B*BJBkB\213J\213R\253R\314Z\354Z\014c-k\317{s\214\325"
N "\224\365\224U\255q\214\307\061\344\030\374\336\226\275\316{\316{\256{\256{\256"
N "{\256{\256{\256{\256{\256s\216s\215smkMk\320{\066\235\066\235R\204\212R\313"
N "Z,kMkMk,k-k-k-k-k-k,c,c,c\014c\354b\354ZMc\020|\025\235\230\245\230\225W}\026"
N "m\026]\366T\366Tsdf!\264lW}\066\215V\235\330\245v\245\323\234\060\214\357\203"
N "\316\203\316\203\256\203\256{\256{\316\203\316\203\316\203\316\203\316\203"
N "\256\203\215{Mk\014c\253RjJ*B\012:\012:\012:\012:\012:+:\012:\012:\012:*:*:*:KBKBJ"
N "B*B*:\311)l:\060S\234\306w\235\264|\365\204\324\214z\306\035\357\316{\316{\257"
N "{\317{\317{\317{\257{\256s\256s\256s\216s\216s\216snsY\225\377\306\177\337"
N "[\266\331\255\066\225Tt\322c\261cpc\016[\314RJB)BjJ\313Z\014c\014c\216kr\214w"
N "\245\270\245w\205\066m\366\\\027U\027U\366T\265\\\265\\\027mtl\247\061V\245\227"
N "\255\324\234Q\214\357\203\316\203\316\203\316\203\256\203\316\203\316\203"
N "\316\203\316\203\316\203\256\203\316\203\316\203\316\203\316\203\316\203\316"
N "\203\256{\256{\256{\256{\256{\216{ms\212R\011:*B\314Rp[\015[\014c\354Z\314Z\313"
N "R\207)&\031*:*B\250)\346\020\356Jy\225\031\276,*S+WD\271\235U\245\226\255\317"
N "{\317{\317{\257s\317{\317{\257{\257s\256s\256s\256s\216s\216s\216sz\225\071"
N "\215\227\245\232\306~\347\236\357\277\357_\337\336\306~\266\071\255\363\243"
N "z\245\334\235\031\225\370\214\323k\356J\362k\022t\023l\321SpC\261;\362;SD\225"
N "T\326\\SdY\215\232\225\262c\244\020\353Z\357\203\356\203\316\203\356\203\356"
N "\203\316\203\316\203\316\203\316\203\316\203\316\203\316\203\316\203\316\203"
N "\316\203\256{\256{\316\203\256{\256{\316\203\357\203\356\203\357\203\357\203"
N "\357\203\212R\244\010\244\010\244\010\203\000\355RR\214P\224P\224P\224P\224\061"
N "\204\257s\257snk\351\061\215B\327|:\266R|\317Z\360\071\061\062\360Jz\225X\225"
N "\257s\257s\317{\317{\317{\317{\257{\257s\256s\257s\317{\257s\257{\320{X\235"
N "K:\025\225Nc\314R,cU\245]\347\337\357=\357.\373\314\362|\326\373\305\311\311"
N "\315\302\370\264K\272\064\254\255R\255J\334\245\266\254Y\235Y\225\267\204\065"
N "t\023l\225|\273\235\327\204&\031\040\000\202\020\363\234\060\214\357{\316\203\316"
N "\203\316\203\316\203\316\203\316\203\316\203\316\203\316\203\316\203\316\203"
N "\316\203\316\203\316{\215{\316{\357\203\357\213\357\213\357\213\357\213\017"
N "\214\357\203\006\031\204\000\204\010\204\010\203\000\222\214MkP\224/\224/\214\367\214"
N "\024l\355RO[\332\255]\316\034\306\374\265\236\306\036\337\334\336\234\326\366"
N "\234\321s\262cW\225\317s\317{\317{\257s\257s\257s\257s\317s\317{\317s\317"
N "s\317{\257s\360{\067\235\070\215\323cc\010A\010\303\030\207)kB\314R\015{\011\232"
N "\263\274\274\316\220\353\254\372\371\355\315\362\314\342S\304kr\021\204T\334"
N "\207\341\261\313<\276~\266\232\265z\245\225\204\071\215\356Jb\010A\000A\000\317"
N "s\071\276nk\357{\317\203\256\203\316\203\316\203\316\203\316\203\316\203\316"
N "\203\316\203\316\203\316\203\316\203\316\203\316\203\356\203\316\203\316\203"
N "\356\203\017\214P\224p\234\257{\204\010\203\000\203\010\204\010\204\010mk\014c\216"
N "s\257{\317{\363s\203\010'\031:\215\375\235\036\246\036\256\272\325\230\365\267"
N "\375X\376\337\377\022tkB\310\061F!\360{\360{\360{\360{\360{\360{\360{\020|\020"
N "|\360{\360{\360{\317{\320s\223\204X\235\315R\354Z\212J\344\030!\000b\010KRf\201"
N "\254z\357Rg\071%\071\011J*RgY\213Z\254ZkR\361\223\351\311\260\333.\343;\336\276"
N "\316\027\255v\204u|\327\204\207!g!\310)\310\061-c\360{)B\247)\350\061\216s\256"
N "{\215{\256{\316\203\316\203\356\203\316\203\356\203\357\203\017\214\356\203"
N "\356\203\357\203\357\203\356\203\017\214\017\214\252R\215s\313Zc\010c\000c\000\203"
N "\000\304\020\313Z\212R\313R\010BF!G)\312)\032\205\\\235}\235\235\255\025\254*\242"
N "\254\222\226\325u\375\064\375\012R\344\030\203\010c\000\360{\360{\360{\020\204\020"
N "\204\020\204\020\204\020\204\061\204\020\204\020|\020|\360{\317s\021|t\204\015[\320"
N "s\317s\257s\313Z%!!\000!\000\350Q-\233+\332N\313\027\305G\261\011\212\250IfY\351"
N "A\210Y\304@G)F\061\351QU\244\023\204\023t\261c\060Sp[\322cutz\225\273\225\334"
N "\225\374\235\270\255Z\306\333\326\367\305\064\255\255{\316\203\356\203\357"
N "\213\357\203\357\203\357\203\017\214\357\213\357\203\017\214\017\214\017\214P"
N "\224Msq\214q\224\310Ab\010c\010c\000c\000\243\010\202\020\005!\307\071\212R\353b\214"
N "Z\334\235^\256~\256=\306P\243\345@\202\020\303\030\243\030\207\061\314r\304(\203"
N "\020c\010c\000\360{\360{\020\204\020\204\020\204\020|Nk-cnk\217k\257s\320{\360{\360"
N "{oc\363sOcnk\317s\257sNknk\354Z\247\061A\010!\000!\010f\061ga\011\202n\213\011b\254"
N "\312Jr)\202\061\334.\233\250yo\213*:\005\021F!g)\304\020\005\031\012\062\311\061\345"
N "\030&!\356R\327\204z\225^\337}\357Y\306\027\276\231\316X\306\322\234\316\203"
N "\357\203\357\213\357\213\017\214\017\214\357\213\017\214/\214\060\214\060\214)"
N "B\343\030\252R%)B\000B\000B\000b\000B\000!\000\303\030jJ\313Z\260s\035\246\236\266\276\276"
N "\275\336\320\253\244\030\203\010%!jJ\010:\347\071\007B\203\020b\010c\010c\010\320{\360"
N "{\357{\360{\020\204\220['\021\345\020&\031F!F!f)g)\351\071JB\315J/[\314R\216kM"
N "knk\217s\360{\324\234Z\306\223\214iZ\343(A\020!\010!\000\202\010E!\344\030\351\071"
N "\344\040\250\221/\213\006\031+:\225\204y\235pcF!y\235V\204\223c\324kv\204\365"
N "\234\354Z\023t\234\306q\214\317{\256sMc\313R\357{\262\234\017\214\017\214\017"
N "\214\017\214\017\214\017\214\317\203\316{\216s\216sE!\303\020Mk\343\030A\000B\020"
N "c\040\203(c(B\040\310I\313ZjR\263\213\035\276}\316\335\346\222\274\344\030A\010"
N "B\000\203\010\310\071\347\071\010B\252R\243\020B\000b\000\304\020\020\204\020\204\020\204"
N "\020\204\017|\215c\007\021\244\010\005\031%\031%\031&\031&!&\031&!g!\207)\351\071-cNk\217"
N "s\360{\066\245\274\316\375\326\031\316\362\324\321\334\220\324.\304\254\253"
N "\313z\005\021\203\010\203\010\005\031kJ\027\225&\031\370\214\274\235Y\215p[\261s\023"
N "\224\006\231\012\212\245\010\312)\210)\264\224\217k:\266\215s\256{\256{\357{\257"
N "s-cMk\316\203\316\203\316\203\216{Lk\313RJB\011BJBJJ\304\030\202\020JJ\304\030"
N "B\040'Q\216r\061{\021\203\320z\021\203LZ\210\061iq\210\231\315\322\262\324\347"
N "A\004Y\202P\304\070b\040A\020!\010!\010!\000!\000B\000B\000\005!\020\204\020\204\360{\257{)J"
N "\355s\006\021\204\010\304\020\345\020\005\031\005\031\005\031\005\031\005\031&!f!\351\071\212J\257"
N "s\360{V\245\335\316\375\316\234\306\031\276\325\214m:\006\031\207)\250\061\310"
N "\071\345\020c\010b\010A\000b\010\005\031\022tUl\274\225\234\215\274\235\226\244\314z"
N "%q\304p\345\070\346('\061\260s\263\214\231\235\014cJJ\061\214\320{jJnk\351\071"
N "\011B\011:\011:\011:\011:\011:\311\061\311\061\011:\011:\005\031\304\020&!\204\030\304\060"
N "\014R\062k\021sSs\317j\014R'!'\021'\031G!\064\245\014[JJ\250\221K\262\363\253q\233"
N "u\254\361\273\012\262\310\221%i\202(A\010JJ\317{\317{\357{\313Z\310Akk\346\020"
N "\203\010\244\010\344\020\345\020\345\030\005\031\005\031\005\031\005\031F!\350\061\313R.c\270"
N "\255\335\316\334\316:\306\370\275\065\235\020l\211\031\305\010\005\031g!\207)\250"
N ")\250)F!\304\020c\010\304\030\304\020ut\370\204\371\204\371\204Lbpc\022\214\360"
N "r\007\071\246\020\352Q*j\355\212y\235\326\214\326\204\230\245\307\071-ckJ\011:\011"
N ":\250\061\250)\210)\210!h!h!h!\210!\210!\210)g)F!\304\020!\000A\000B\010B\010b\020"
N "\244\030\304\030\345\020\345\020G!\244\010\014[\212R\011Z\316\232r\203\263\203\365"
N "\203\324\203\264{\223{\060\223\220\313N\333I\252\014\223\216s\257s\317{\307"
N "\071JB*c\305\020\203\000\203\010\304\020\304\020\345\020\345\020\345\030\345\030\005\031"
N "&!\310\061Mc\213J\335\316[\306\271\265X\265S\224\011B\316k\350)\305\010\304\020"
N "F!g!\247)\310\061\350\061\350\061\247)\243\020b\010\362k\266|\071\205w|\006A\357Z"
N "\254\212\013j\246\010d\000\347\030\005!kJ\232\235[\276\373\255\033\266\365\224\034"
N "\347\354ZMkmsmsMk\014c\213R\210)\311)\352\061\012\062\352\061F!&\031\005\031\344\030"
N "\202\010A\010A\000A\000A\000\304\020\005\031\005\031\344\030\243\020b\010A\000A\000!\000!\010B\010\203"
N "\030\346\060\006\071\216J,B\313\061,JLZ\250Q\347Ink\216s\216s\343\040\320\213\011"
N "[\345\020\203\000\203\010\244\010\244\020\304\020\304\020\304\020\344\020\345\020%\031"
N "f!jB\011\062\332\245\273\235\334\235\273\225\350\071\247\061\252R\011S\305\010\244"
N "\010%\031F!\207)\250)\310\061\350\061\011:JB\243\020kB\367\204y\225Z\215\017S\071"
N "\215\334\235\334\235\333\235\374\245\332\245;\306\331\255}\276\372\265\321"
N "s\264\214Z\276\277\367-c\350\061\247)):\354Z\216s\354Z\004\031\202\010\243\020b"
N "\010(B\316{ms,k\313ZIJ\307\071\206)E)%!\004\031\344\030F)\310\061\011:\344\030\304"
N "\030\344\030\343\030\343\030\303\030\243\030\243\030\242\020\202\020b\010A\010A\010A\010"
N "A\010A\000MkMk\354Zf\071n\213\350Z\305\020c\010c\010\203\010\244\010\244\010\244\020"
N "\244\020\244\020\244\010\204\010\204\010\006\031\321\203\326\234\367\234P\243\254"
N "z\303\030!\000\207\061\310\061\305\010\204\010\345\020&\031f!\207)\247)\310\061\011:"
N "\313R\350\071\304\020*:\204\010\244\010\012\062\030\215\070\215Y\225Y\225v\234\065"
N "\224\070\255\037\317\177\347{\356[\336\371\315\036\337>\347\233\316\223\214\011"
N ":\247)\011:\253R-cjJjJjJ\253RjR\317{\316{\256{\316\203\316{\256{\256{\215s"
N "Mk\216sp[\317:\316J\314R\350\071E!%!%!\344\030\344\030\304\030\303\030\304\030\344"
N "\030\004!\344\040\343\030\303\030A\010!\000\354Z\354Z)Be\061iR\007:\304\010c\000c\000c\010\203"
N "\010\203\010\203\010\203\000c\000c\000\203\010\203\010\251\071P\243\363\233\225\244\210"
N "\241eAA\010K:\250)\210)\245\010\203\010\304\020\005\031F!g)\207)\307\061\011:\253R"
N "\313Z\345\030f)!\000!\000f!\266\204\326\204\322\203g\201F\221\250\231\210\231,"
N "\232z\265>\347:\356\274\346\234\356[\346\331\345\230\325~\347-[IB\212JNc\212"
N "J\313Z\317{mkMkMkMkMkMkMkMkmsmk\020|\065lj\021jB\014c\213R):\011:jJ\253R\252R\212"
N "R\212R\212R\212R\212R\252R\252R\212R\212RiRHJ\253R\354Z\350\071\004!(JG!\244"
N "\010c\000c\000c\000c\000c\000c\000c\000c\000\203\000\244\010\244\020\311A\315\222\017\223o\233\321"
N "\223\243\020\310\071\356J\251)*:\305\010\203\010\244\010\345\020&\031f!g)\247)\350"
N "\071\313R\216kf!E!!\000!\000\310\061u\204l\202\345\200\345\210\005\211\005\211F\211"
N "\012\232\354\231\066\234\336\316\335\316\036\327>\337\234\306\234\316^\337\035"
N "\337\015cMc\323\224\065\245V\255\030\276\367\275\065\245msmsmsmkMk,kMk,c\061|\257"
N ":'\021b\010\202\010\344\020\006\031F!g!\207)\011:jJ\313Z\313Z\313Z\313Z\313Z\313Z"
N "\313Z\313Z\353Z\014cQ\214\364\234)B\303\030(RF)\243\010b\000b\000c\000c\000c\000c\000c\000"
N "c\000c\000c\000c\010G\061\214\222.\243/\233\321{\203\020\015ckB\351\061):\305\010\204"
N "\010\244\010\304\020\005\031F!f!\207)\350\061\253R\257sA\010\247\061G!F!JB\213z%\201"
N "\344\210F\211\214\202+jGQ\305\060\312\201\252\221\227\224\376\306>\327>\327"
N "Z\276=\337^\347\177\347\233\326A\020A\010%!,c\030\306\236\367?\337\333\336,c"
N "\014c\014c\014c\014c\014cmknk\214B\210)B\000B\000\304\010\005\021&\031&\031&\031g!\011:\314"
N "Rnk\014c,c,k-kmkmknsnss\214\223\224\307\071\304\030hR\246R\202\010b\000b\000B\000B\000"
N "B\000B\000b\000b\000b\000b\000B\000c\010\213\212\315\232*\232\005I\206\061\247\071\314b\005\031"
N "%\"\261c\315J\006\021\244\010\345\020%\031&!f)\247\061\253R\256s\202\020f)A\000\202"
N "\010\203\010\344\020\304\010F!\311\071\251)G\031\005\021\304\020\244P\006q&i\031\245W\325"
N "\230\335V\345\031\356w\365\035\357\274\356\257\203\203\020!\000!\000A\010P\204}\347"
N "\236\347\367\275\014c-kmkMk\014ciJ\357\213\254r\210)\202\010B\000\203\010\345\020"
N "\005\031\005\031&\031&!\250\061JB\320s\216s\216smsMkMk,c\014c\014c\217s-c\207\061\244"
N "\020'Jd)b\010B\000B\000B\000B\000B\000B\000B\000B\000B\000B\000B\000\"\000\250a\214\232\012\232\005\061"
N ")RB\010)J%!\211c\232\245\026\225\311\061\203\010\244\020\345\020\005\031&!\247)\212"
N "J\256s\303\020\010:\203\010\344\030\304(G!\006\031b\010A\000!\000A\000\203\010b\010c\000c\030"
N "\244p\210\221Z\255\371\345\274\346{\346\031\356\371\355\270\355\071\356F)\005"
N "\031\005\031!\000A\010\027\276\233\235=\347\252R\252R\313Z\353Z\354b\247\071(\202\307"
N "\251\250\071B!B\000c\010\305\020\345\030\005\031\005\031&\031g)\011:-c\360{-c,c,c-kMk\215"
N "s\256s.cok\207)F)gJ\342\030B\000B\000B\000B\000B\000B\000B\000B\000B\000B\000\"\000!\000!\000%A\311\221"
N "t\224\243\030\212Z!\000)Z\246\061,|y\235\326\214\350\071c\010\203\010\304\020\344"
N "\020\005\031f)IB\256sa\010\247\061c\010\304\020\351\071\304\020F)\245\020\203\020b\010"
N "c\010\203\010\203\010b\010B\000b\060\244\200\312\221}\276>\337[\306\233\316\375\326"
N ">\347=\347\273\316&\031h!\210)G!\315R\320B\063|\314J\355R.[ncnkf\061%\071\307"
N "QgQb\010C\000c\010\244\010\345\020\005\031\005\031%\031f!\350\071\212J\364\224mk\216s\216"
N "s\216s\216s\215s\215s\022t\062|\247\061jJ\244\061\202\010A\000A\000A\000A\000A\000A\000!\000"
N "!\000!\000!\000!\000!\000!\000\303\030K\212\220{\343\040iZiBjb\206\061-|\367\244S\214\351"
N "\071c\000c\000\203\010\244\020\304\020%!\010:mkA\000\206\061\203\010&!\345\030\243\020Kb"
N "I)\344\040\344\030\243\020\243\020\203\020b\010A\010A\000b(\244p\215\222\376\316\374"
N "\326\375\326\035\327{\306Z\306~\347\222\214A\010A\010\202\010b\010f!%!\243\020\243"
N "\020\244\020\244\020B\000A\010\243\030\343\040fAb\010c\000c\010\203\010\304\020\345\020\005"
N "\031\005\031&!\307\061IB\363\224\317{\216s\216s\216smsmsms\220k.c%!\307\071\304"
N "\071A\010!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000%!\260\223ga\206\071\310\071\244"
N "\020\253r\246\071\215k\225\234T\214\351\071c\000c\000\203\010\203\010\244\020\005\031\347"
N "\071\353ZA\000%!c\010\203\020\203\020\243\020+b\207\071\304\030\344\030\344\030\004!\344"
N "\040\344\040\304\040\203\020\203\030\243\040\244`\064\244\335\316\334\316\374\316"
N "\334\316\177\347^\347\237\357\212Jb\020%)\203\020\244\020\314R\011:jB\253R\253"
N "R\305\020\207)\304\030\247\071fAc\010B\000c\010c\010\244\010\305\020\345\030\005\031%\031"
N "\207)\010:\262\224r\214\256{\316{\316{\317\203\317\203\317\203\361s\021t\304"
N "\020E)\342\030!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000\350\071\253b\250Y\347"
N "A\210)\006!\212j%)\315J\266\224\326\214\351\071\244\010\203\010c\000c\000\203\010\304"
N "\020\246\061(B\202\020\005\031\203\010\244\020\243\020\243\020\304\030\005!\304\030\344"
N "\030\344\030\304\030\346\020\006\021\305\020\203\010\243\030\304\040\304\040\006q\333\255"
N "\275\306\233\306:\276\374\316\274\316z\306\333\326f\251\307\361j\352\064\345"
N "\317{\202\010\202\010jJ\247IF\071\304\030\203\020b\010\202\020\243\020b\010\203\010"
N "c\000\204\010\244\020\305\020\344\020\344\030f)\307\061r\214\323\224\317{\357\203"
N "\317\203\317\203\357\203\017\204\260s\361{&!\303\020A\000!\000!\000!\000!\000!\000!\000!\000"
N "!\000!\000!\000!\000!\000\040\000\040\000F))B\011:\307\071\012\062JR\206\071\004!\016S\070\225\265"
N "\204\351\071\243\010%\031b\000B\000c\010\243\010e)\246\061A\000A\000B\000B\000B\000B\000B\010b\010"
N "\203\010\203\010\203\010b\010!\000!\000!\000B\000B\000B\000b\010\203(\215\222~\256\037\317\177"
N "\337\177\347\237\347\237\357\337\367\020\304\011\332\313\372\222\374n\203\014"
N "c\010:\243\020\344\040\307Y\310\071\304\030A\000A\010\243\020\302\020\203\010c\000\203"
N "\010\204\010\244\010\304\020\344\020E!\247)\357{U\255iJ\212R\216s\357\203\357\203"
N "\357\203\212b\253b\313Z\203)\301\020!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000\202"
N "\020\004!\004!\010:\207)F!OckR\344\040\305\061\214J\064|\221c\206\061B\000B\000B\000B\000B\000"
N "b\010b\010\243\020A\000B\010B\010!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000A\000A\000"
N "\203\020\005q\330\234\277\276_\327\237\347\237\347\277\357\277\357]\357\344("
N "\266\365Q\354\213R\253R\014[\216s$!!\010\202\020A\010!\000b\010\203\020\242\020c\010"
N "c\000c\010\203\010\203\010\244\010\304\020\005\031f)\216k\065\245\344\030A\010b\010\355"
N "Z\060\214\020\214os-kiJ\303\071A\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000\307\071"
N "\253RE)F\031\310\061\243\020\213JE)d\061\343\071!\020\304`\005Q\310\071A\000B\000B\000B\000"
N "B\010b\030\203@\303`\243x\243\210\304\210\344\230\304\200\345p\243`\203`\203"
N "X\203H\202H\203@b\060B\030!\020!\000!\000A\010A\000b\010\243\040\006\231\017\243\026\325\334"
N "\346\237\347\277\357\277\357\337\377.\203jbMk*BkJ\314RMkns\202\020\202\020!"
N "\000!\000b\010b\010A\010B\010C\000c\000c\010\203\010\203\010\243\010\344\030E!,c\364\234\310"
N "\071\250\061\005\031\213R\060\214\020\214\224\204\264\214lc\"!!\000!\000!\000!\000!\000!\000"
N "!\000!\000!\000!\000!\000!\000!\000\354Znkg)\252!\351\061A\000\005!\243\030\344\071!!\243Hg\241"
N "\247\201)B\304\030%)b\060\244p\304\230\005\261\005\261\345\240g\221\005\201\210y\315"
N "r\210iPc\016{\304p\345x\221\203\023\224\351\261G\271L\302\221\273\016\253\012"
N "\222\345@\203\010b\010\005!\345p\345\240&\271\012\362\254\372o\373\320\373\061\374"
N "n\273\303\030\202\020b\010A\010A\010!\000!\010A\010!\010\040\000\040\000A\010b\010\342\030B\010"
N "C\000B\000b\000c\000c\000\203\010\303\020\004\031\353Z\221\214\344\030\351\071\311\071JJ\257"
N "s\357\203\012\062k:\254J\304\020!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000\203\020j"
N "J\011:\305\010'\031\311\061B\000\203\010\005!CJa\010\303\030&\071\207I\253R\344\060\005q"
N "\005\231\304x\243`bPBP\250aN{\005\211S\224O\253\326\254T\244\322\203\345\200q"
N "s\262k\316Z\006Q\304H\215B\353\071\352A\214J\311)\346\020\205\010\346\020\244\020"
N "\345\070\245P'\201\351\271k\332\015\353\320\373\323\364\317\203,k-\223n\223"
N "\354z\313b\010BA\010A\010!\010!\010A\010A\010\201\020B\000B\000B\000B\000B\000B\000b\010\203\010"
N "\344\020\252Rlk!\000B\010\203\020\250\061-c\257s'\031\006\021\006\021\006\021\345\020\304\010"
N "\203\010b\010A\000!\000!\000\040\000!\000!\000!\000\344\030\207)\203\010%\031\305\020\006\021\210"
N ")lB\207\061\205\061\342\071!\000A\010b\010\243\020\350\071\244\020\203\040b@bh\203\230"
N "\304\250\214\252\226\254*\252T\234p\213\363\213\356z\222s,b\020kQc\357zVt\312"
N "\201\267\214[\205V\214\323\233m\232\353a\244\010b\000c\010\304\020G!\204\010\204"
N "\010g!\223\204\355Z\255R\264\214\316J\252)\350in\333\217\363o\373R\364Q\314"
N "\213\252\313\222\010r%Ia\030a\010A\000\"\000B\000B\000B\000B\000B\010c\010\303\020IBiJb\010!"
N "\000A\010)B\216sNk\251!\251!\211\031\211\031\211\031h!h\031h\031G\031'\031\006\031\345"
N "\030\304\020\203\010b\010\202\010\004\031E!\202\010\203\010\345\020\310)kBf\061CJ\240"
N "\020!\000!\000!\000!\000A\000\203\020\243\030\305@\244\070\244\070\244(g)\345\060+J\352Q\356"
N "Z\356jqk\065l\323k\060s\357j\323c\214Z\344X\203@\006\071\012\062\310A%AB\030\345\030"
N "c\010B\010\243\020\006\031\245\010d\010\204\010\310)lB\215But\314J\207)\344(\314\272"
N "\313\242\212\222n{n{\253\212\222\234\321\243\265\254\017\303L\272\210\211\345"
N "PB\010B\000B\000B\000B\000b\010\243\020\347\071HJB\010B\010A\010\310\071\357{\216s\252!\251"
N "!\251!\251!\211!h\031h\031\210!h!h!H!G!'\031&\031\006\031\304\020\203\020b\010A\000A\000"
N "A\000a\010\346\071\202\020\341\030!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000A\000A\000"
N "\203\020&!\244\060&\061L:\012J&YGi\316rQ{Q{Q\233Q\233M\222h\221H\221'y'\031\305"
N "\020&\031\005\021\006\031\346\020\245\010\305\020\305\010\251)\315J\225|oc\314R\213R\257"
N "\213\320\303\020\344=\377\227\375\315\302z\215Kr\060[\013J\006I+b\216\232\352\241"
N "\304\070!\000A\000B\000B\000\202\010\206)\252R!\000!\000!\000f)\222\224\060\214*:\311)\311"
N ")\351\061\351\061\311)\251)h!G\031G\031G!g!h!h!h!g!G!&\031\006\031\304\020\243\020b"
N "\010\242\030\302\030!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000A\000A\010A\010A\010"
N "A\010A\010A\010A\010A\010A\010A\010A\000!\000!\000A\000b\010\203\010\203\010\203\010\204\010\244"
N "\010G!\311\061\204\010\203\010c\000&\031\315J\356JkBoc\261kO[\361s\223\224\263\234"
N "\317{\354ZIR-s\322k\256z\330\214\030\255\013\252\370\204GA\305@\311\201GY!\010"
N "b\010b\010\202\010e)Kc!\000!\000!\000\010BQ\214q\224mknkMk\014c\354Z\253R\213J\213J\213"
N "JkB\351\061\310)\210!G!G\031G\031G\031'\031'\031&\031&\031\005\031\005\031\203\010!\000!\000"
N "!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000\040\000\040\000\040\000\040\000"
N "A\000A\000b\010b\010A\010\206\061\013ca\010!\000!\000!\000A\000A\000A\000B\010\203\010\243\020\005\031"
N "\255J\214J\012:g)f)\317s\015[\217{r\274\370\335\226\355\327\345\325\244\356"
N "rLJ\013\062\211\071\024d\025\224\353\201\256:\345\060\351q\243\040\243\020\202\010"
N "e),c!\000!\000!\000\247\061q\214q\224\317{\256s\256s\256sms\216s\216sns\216s\256"
N "{\256s\317{\256sMk\014[\253RJB\351\061\250)G!&\031\006\031\345\030\304\020\243\020"
N "b\010B\010A\000!\000!\000!\000!\000!\000!\000A\010A\010A\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000"
N "!\000!\000b\010\243\020\303\030mk\262\224\343\030\242\020a\010\202\010\202\020\242\020"
N "\202\020\202\020a\010\303\030b\010b\010b\020\307\071\010B\246\071\246\061E)%!\004!f)\247"
N "\071\350Yjr\016{\221\213\221\223\267\214\222[\211\061h\061\263[\264sH\061\345\040"
N "c\010\202\010\010B\014c!\000!\000!\010\247\071q\224P\214\060\214\020\204\317{\316{\256"
N "s\216s\216s\216smsmk\216s\216s\256s\216s\317{\317{\357\203\357{\357{\357{"
N "\256snk-c\354Z\212J\010:\307\061f)\344\030\304\020\243\020\243\020\203\010\202\010"
N "\243\020\004\031E!%!\004!%)\004!\343\030\343\030\202\020A\010!\000!\000!\000A\000A\010\243\020\206"
N "\061iJ\014c\215sIJD)\347A\211Z\352b\312b\252Z\353Z,c\312Z\013c\353b\252Zms\317"
N "{\060\214\322\234\261\234\313Z\010B\243\030A\010A\010!\000!\010!\010!\010!\010b\020\005"
N "\031G!\004!\005\031KB\210\071&!\344\030\212J\353Z\247\071\344\040F)\247\061q\224Q\224"
N "\060\214\060\214\020\204\020\204\357\203\357{\317{\256{\256s\216s\216smkmkmkm"
N "kms\216s\216s\256s\316{\317{\357{\317{\357{\017\204\020\204\060\214Q\214Q\214"
N "\020\204ns-c\253RIB\310\071E)\344\030%!E)\206\061\247\071\347A\206\061E)e)e)\004!"
N "\004\031\303\030\303\030\303\030\242\020b\020\202\020b\010a\010\040\000!\000!\000!\010\004!\205"
N "\071hR\352b\353b,kMs\256{\020\204\020\204\020\204\256{\357\203\317{\216s\317{"
N "\313Z!\010!\000!\000!\000!\000!\010A\010A\010A\010A\010a\010a\010a\010b\010\202\020\303\030%!"
N "\344\030E)\307\061Mk\221\224q\224\017\204\357\203\357\203\357\203\316{\256{\216"
N "s\215smk\013c,cMkMkmkmk\216s\216s\216smkmk\216s\256s\316{\317{\357\203\357"
N "{\317{\256{\357{\017\204\020\204\060\214P\214P\214Q\214q\214P\214\017\204\216"
N "s,c\253ZIJIJ\212RiJHJ(J\347A\347\071\347\071\246\061e)%!%!E)f)E)%!\004!\004!\344"
N "\040%)E)D)\346A\007BhR\312Z\312Z,kLk\256{\357\213\060\214\020\214\357\203\256{"
N "\302\030A\010\040\000\040\000!\000!\000!\000!\000!\000!\000\040\000!\000A\010\202\020\010BmkMkMk\256{"
N "\060\214\020\204\060\214P\214\252ZiR\211RiJ\252R\313Z\013cMk\216s\256s\317{\317"
N "{\317{\317{\216s\216smkMk-c,c,c,c,cMkMknk\216s\216s\216s\216s\256s\256{\317"
N "{\317{\357\203\020\204\020\204\060\214P\214Q\214Q\214Q\214P\214P\214Q\224Q\224"
N "\020\214\256{Mk\313Z)J\350A\347\071%)\004!\005!\344\030\344\030%!%!\005!\004\031%!f)f)"
N "\207\061\307\071\347\071(BiR\312Z,kMs\215{\216{\316\203\017\214\353b\200\020\040"
N "\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000\202\020\317{\020\204\020\204P\214q\224P\224"
N "Q\224q\224q\224\017\204\017\204\020\204\060\214P\214P\214P\214P\214Q\214\060\214"
N "\060\214\060\214\060\214\020\204\017\204\357\203\317{\317{\317{\216smkmkMk,c\014"
N "c,c\014c,c,cMkmkmk\216s\216s\256s\256s\256{\357{\357{\020\204\060\214\060\214"
N "\060\214P\214Q\214\060\214P\214Q\214Q\224q\224q\224q\224Q\214P\214\060\214\357"
N "\203ms\014c\212RIJ\010B\247\061\206)f)f)E!%!\005\031\005\031\005!%!%!\004!\246\061\350A"
N "\010B(J\252ZE)\040\000!\000!\000!\000!\000!\000!\000!\000!\000!\000\202\020LkQ\214\060\214\020\214"
N "\020\214\017\204Q\214Q\224P\214Q\224P\224Q\224Q\214P\214\060\214\060\214P\214"
N "\060\214P\214\060\214P\214P\214P\214\060\214P\214P\214P\214\060\214\060\214\020"
N "\204\357\203\357\203\317{\256snsmkMkMc,c,c\014c\014c,c\014c-cmkns\216sns\216"
N "s\216s\256{\317{\357{\020\204\020\204\020\204\020\204\020\204\020\204\060\214\060"
N "\214Q\214Q\214q\224q\224Q\214Q\214P\214\060\204\060\214\020\204\357\203\357\203"
N "\357\203\317\203\256{\215s\014c\252ZIJ\347\071\307\071\206\061f)%!\004!\344\030\343"
N "\030\004!%!E)\343\030b\020A\010!\000\202\020E)(B\216s\017\204\017\214\020\214\060\214\060"
N "\214\060\214\357\203\317\203\317{\357\203P\214P\214Q\214P\214Q\224P\214P\214"
N "P\214Q\214\060\214\060\214\020\204\017\204P\214P\214P\214\060\214P\214P\224P\214"
N "P\214P\214\060\204\017\204\357\203\317{\317{\316{\216s\216snkMk-k,c,c-c,cMk"
N "mknkMknsmk\216s\216s\256s\317{\317{\357{\020\204\020\204\357\203\357{\357\203"
N "\020\204\020\204\060\204P\214q\214\060\214\060\214P\214P\214P\214\060\214\060\214"
N "\060\214\060\214\017\204\020\204\017\204\017\204\020\204\357\203\357\203\256{\215"
N "smk\014c\212R)B\350\071\307\071\247\061\206\061f)\307\071(BiJ\353b\216s\256{\316"
N "{\316\203\357\203\357\203\017\214\060\214\060\214\017\214\060\214\060\214\060\214"
N "P\214\060\214\060\204\060\204\060\214\060\214\060\214\020\204\060\214\060\214\060\214"
N "\060\204\060\214\060\214\060\214P\214\060\214P\214P\214\060\214P\214P\214\060\214"
N "\020\214\017\204\357\203\316{\256{\256s\216s\216s\216sMkMk-c,c\014c-c-kMkmkn"
N "k\216s\256s\216s\256s\216s\256s\256s\317{\357{\357{\357{\360\203\360\203\020"
N "\204\060\204Q\214\060\214\060\204\060\214\060\214\020\204\060\214P\214\060\214\060"
N "\214\060\204\020\204\017\204\357\203\357\203\357\203\357\203\357\203\256snk\354"
N "Z\254R\254J\213J\213J\313R\354Z\014cLk,c\312Z\353b\313Z\353bMk\317{\357\203"
N "\017\204\357\203\017\204\060\214\060\214\060\214\060\214\060\214\060\204\060\214\017"
N "\204\020\204\017\204\017\204\020\204\060\214\020\204\060\214\017\204\020\204\017\204"
N "\060\214\060\214\060\214\060\214\060\214\060\214\060\214\060\214\060\214\060\214\060"
N "\214\060\214\020\204\017\204\357\203\316{\256s\215s\216s\216s\256s\216smkMkM"
N "k-c-c-cMcMknsns\216s\216s\216snk\216s\256s\317{\317{\317{\317{\317{\317{\357"
N "{\357\203\020\204\020\204\017\204\020\204\020\204\020\204\060\214\020\204\020\204\017"
N "\204\020\204\357\203\357{\256s\256s\216sNk-c\355Z\314R\314R\314R\015[-c-c\014"
N "c,c\014c\014cMk,c\353Z\313Z\353Z\353Z,cP\214P\214\060\214P\214\060\214\060\214"
N "\060\214\017\204\357\203\357\203\020\204\020\204\060\214\060\214\060\214\060\214\060"
N "\204\060\214\060\214\060\214P\214\060\214\060\214\060\204\060\214\060\214\060\214\060"
N "\214\060\214\060\214\060\214\020\204\060\214\060\214\020\214\020\204\357\203\317{"
N "\256{\216s\256{\256{\216s\216s\216s\215sMk,c\014c-cMkns\216knknk\216k\216s"
N "\216s\216s\216s\256{\257{\317{\317{\317{\357{\317{\317{\317{\357{\020\204\357"
N "\203\020\204\020\204\020\204\020\204\020\204\020\204\317{\216sNc\355Z\254R\254R"
N "\354Z-cnk\216s\317{\257s\256smknsnsMk-c-cMkMk\354Z\060\214\060\214\060\214\060"
N "\214\060\214\060\214P\214\060\214\060\214P\214P\214\060\214\060\214\060\214\060\214"
N "\060\214\060\214\060\214\060\214P\214\060\214\060\214\060\214\060\214\060\214\060\214"
N "\020\204\060\214\060\214\020\214\020\204\060\204\060\214\060\214\020\204\020\204\017"
N "\204\017\204\020\204\020\204\020\204\357\203\317{\316{\317{\317{\317{\256{\256"
N "s\216smk-k-c-c-cMkMknknknsnk\216s\216s\216s\256{\317{\317{\357{\357{\317{"
N "\317{\317{\317{\317{\357{\357{\357{\317{\216kNk.c.[\355R\314R\354Z\015[-cm"
N "knk\257s\317{\317{\317{\256s\256s\216s\216s\216s\216s\256s\060\214\060\214\060"
N "\214\060\214\017\214\017\214\060\214\017\204\017\214\060\214\060\214P\214P\214P\224"
N "P\224P\224P\224\060\214\060\214\060\214\060\214\060\214P\214\060\214\060\214\060\214"
N "\060\214\060\214\060\214\060\214\060\214\060\214\060\214P\214\060\214\060\214\060\214"
N "\060\214\060\214\020\204\017\204\020\204\020\204\020\204\020\204\017\204\357\203\317"
N "{\317{\317{\317{\317{\317{\256s\216sMk-k,c,c,cMknk\216s\216s\216smkmk\216"
N "s\216s\256s\317{\317{\317{\317{\317{\317{\257s\217snk.c\015[\355R\355R\015["
N "\015[nk\216k\216s\257s\256s\216s\216smsmsms\216s\256s\256s\216s\256sP\224P"
N "\224p\224P\224p\224p\234p\224p\224p\224p\224P\224P\224P\224P\224P\224q\234"
N "q\224p\224q\224p\224P\224P\224P\214P\214P\224P\214P\214Q\224\060\214P\214P"
N "\214Q\224\060\214P\214\060\214P\214P\214P\214P\214P\214P\214Q\224\060\214\060"
N "\214\060\214\060\214\060\214\060\214\017\204\017\204\357\203\357{\256{\256{\256"
N "s\256s\256s\216smkMkMk,c\014c-cMkmknkmk\216s\216s\256s\216s\256s\256s\256s"
N "\256s\216snk-[\015[\355R\315R\314R\355R-c\216k\257s\317s\317{\360{\020\204\357"
N "{\357{\357\203\317{\216s\216snsMknsp\234p\224p\224p\224p\224p\224p\224\221"
N "\234p\234\220\234p\234\220\234\221\234p\234p\234\220\234p\224p\224p\224P\224"
N "P\224p\224p\224P\224P\224p\224P\224q\224p\224q\224P\224q\224P\214P\214P\214"
N "P\214P\214\060\214\060\214\060\214P\214Q\214P\214P\214P\214P\214P\214P\214\060"
N "\214\060\214\060\214\020\204\020\204\060\204\017\204\357\203\316{\256smsmknkmkM"
N "kMk,c\014c\014c\014c\014c,c,c-cMkMk,c\015[\354Z\314R\314R\314R\355R\355R\015[\015"
N "[MkNk\216k\216s\256s\256s\257s\256s\357{\317{\317{\357{\317{\317{\317{\317"
N "{P\224P\224\220\234p\224p\224p\234p\234p\234\220\234\221\234p\224p\224p\224"
N "p\234\221\234p\224\220\234p\224p\224p\234p\224\220\234p\224p\224p\234p\234"
N "P\224p\224p\224p\224P\224P\224P\224P\224P\224P\224P\224p\224p\224q\224q\224"
N "q\224q\224q\224P\224P\224Q\224Q\224q\224q\224q\224P\214P\214\060\214P\214\060"
N "\214\060\214\060\214\020\204\357\203\357{\317{\256s\216s\216s\216smkmkmkMk\014"
N "c\354Z\313Z\253R\213RkJKB+B*:KBkB\214J\254R\314Z\015cMcnk\216s\216s\216s\216"
N "s\216s\216s\256s\257s\256s\257{\317{\257{\317{P\224P\224p\224p\224/\224p\224"
N "p\224p\234p\224p\224p\224\221\234P\224p\234p\234\221\234\220\234\220\234p"
N "\224p\224\220\234p\234\221\234p\234\221\234\221\234\221\234\221\234q\234p"
N "\234p\234\221\234\221\234\221\234\221\234p\234p\234p\224p\224q\224\221\234"
N "\221\234q\234q\234q\234\221\234q\234\221\234\221\234\221\234\221\234q\224"
N "q\224p\224P\224P\224P\214P\214\060\214\060\214P\214\060\214\060\214\060\204\020"
N "\204\357{\357{\317{\256s\216smk\216s-c\014[\314R\213JJB*:*:K:\213J\254J\314"
N "R\015[-c-c\014[\014[\014[-cMcMc-c-c-c-cMcnk\216s\256s\221\234\221\234\220\234"
N "\220\234P\224P\224P\224P\224p\224p\224P\224P\224P\224P\224p\234p\224p\234"
N "p\224p\224p\224p\224p\224p\234\221\234\221\234\221\234p\234\221\234\261\234"
N "\221\234p\234\221\234\221\234\221\234\221\234p\224\221\234\221\234\221\234"
N "\221\234q\234p\224q\234p\234\221\234p\234q\234p\224p\234\221\234\221\234\220"
N "\234\221\234\221\234\261\234\261\234\262\234\221\234\221\234p\224q\224q\224"
N "P\214P\214P\214\060\214\060\214\060\204\060\204\357\203\256{\216s-c\014[\354Z\313"
N "R\254R\254R\254J\253R\254R\354Z\354Z\354Z\015[-c,c\014c\014c\014[,c-cMcMk-cMk"
N "nk\216kMk-cP\224p\234p\224p\224p\224p\234p\224P\224P\224P\224P\224P\224P\224"
N "P\224P\224P\224P\224P\224p\224P\224p\224\221\234P\224p\224p\224\221\234\221"
N "\234\220\234\261\234\261\234\221\234\261\234\221\234\221\234\221\234\221\234"
N "\221\234\221\234\221\234\221\234\221\234p\224\221\234\221\234\221\234p\234"
N "q\234\221\234\221\234\221\234\261\234\221\234\261\234\221\234\221\234\221"
N "\234\221\234\261\234\221\234\221\234\261\234\261\234\261\234\221\234\221\234"
N "q\224q\224P\214\020\204\357\203\317{\257s\216kMk\015[\354Z\354R\355Z\314R\015"
N "cMknk\257s\216snkMk-c\014c\014c\354Z\014c\014c,c\014c\014c\014c\014[,cMcMc\220\234"
N "\220\234\221\234\221\234\220\234\221\234\220\234\220\234\221\234\220\234p"
N "\234\220\234\220\234\220\234p\234p\234P\224p\224P\224P\224P\224P\224P\224"
N "P\224P\224/\224P\224P\224q\224p\224P\224\220\234p\234p\224p\224p\234p\224"
N "p\234p\234p\224p\234p\224\221\234p\224p\224p\234p\224\221\234\221\234p\234"
N "\221\234\221\234\221\234\221\234\221\234\221\234\221\234\221\234\221\234\221"
N "\234\221\234\220\234\221\234p\224p\234\221\224\221\234P\214\060\214\020\204"
N "\357{\256snkMkMc.cNknk\216k\216k\216s\257s\257s\256s\256s\216s\257s\256s\256"
N "smkMkMk,c\014c\353Z\014[\014[\354Z\014c\014cp\234\220\234p\224p\224\220\234\220"
N "\234\220\234\220\234\220\234\220\234\220\234\220\234\221\234\261\234\221\234"
N "\220\234\220\234\220\234p\224\220\234p\234p\234p\224p\224P\224p\234P\224P"
N "\224P\224P\224P\224p\224p\234p\224p\224P\224P\224p\224P\224p\224p\224\060\224"
N "P\224p\224p\224P\224p\234\221\234p\234p\224p\234\221\234p\234\221\234\221"
N "\234\221\234\221\234\221\234p\234\221\234\221\234\221\234\261\234\221\234"
N "\221\234Q\224P\224\060\214\357\203\317{\256s\256s\216s\216s\216s\256s\317{"
N "\357{\017\204\357\203\017\204\357\203\020\204\317{\317{\317{\256s\256s\256s\256"
N "s\317{\256s\256s\216smk-k,c\014c\014c\354ZP\224p\224p\224p\224P\224O\224\220"
N "\234\220\234\220\234\220\234\220\234\220\234p\234\220\234\220\234\220\234"
N "\220\234\221\234\220\234\220\234\220\234\220\234p\224\221\234p\234\221\234"
N "p\224p\234\221\234\221\234\221\234p\224p\234p\224p\234p\224p\224p\234P\224"
N "p\224p\224P\224p\234p\224\221\234p\234\221\234p\224p\234p\224p\224P\224p\224"
N "p\234p\224p\224p\234\221\234\221\234\221\234\221\234\221\224\221\234p\224"
N "\060\214\020\214\357\203\357{\317{\256{nknk\216s\256{\357{\017\204\060\214P\214"
N "q\224P\224\060\214q\224Q\224P\224\060\214\060\214\020\204\017\204\357\203\316{"
N "\317{\357{\256s\256s\256s\256{\317{\256s\216s\216s");
N
L 25 "Blinky.c" 2
N
N#include "audioMenu.c"
L 1 "audioMenu.c" 1
N/* GIMP RGB C-Source image dump (audioMenu.c) */
N
N#define AUDIOMENU_WIDTH (200)
N#define AUDIOMENU_HEIGHT (71)
N#define AUDIOMENU_BYTES_PER_PIXEL (2) /* 2:RGB16, 3:RGB, 4:RGBA */
N#define AUDIOMENU_PIXEL_DATA ((unsigned char*) AUDIOMENU_pixel_data)
Nstatic const unsigned char AUDIOMENU_pixel_data[200 * 71 * 2 + 1] =
N("\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\337\377\337\377\377\377\337\377\337\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\236\367\327\275\357{\256sU\255\236\367\337\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377"
N "]\357\353Z\242\020\000\000\000\000\040\000\307\071\333\336\337\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377\216sA\010"
N "\040\000\000\000\000\000\000\000\040\000\206\061\236\367\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377}\357"
N "\327\275u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255"
N "u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255"
N "u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255"
N "u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255"
N "u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255"
N "u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255"
N "u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255"
N "u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255"
N "u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255u\255"
N "u\255u\255u\255u\255\024\245\202\020\040\000\040\000\000\000\000\000\000\000A\010\040\000\363\234"
N "}\357}\357}\357}\357}\357}\357}\357}\357}\357}\357}\357}\357}\357}\357}\357"
N "}\357}\357}\357}\357\337\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\262\224A\010\040\000\040\000\040"
N "\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040"
N "\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040"
N "\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040"
N "\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040"
N "\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040"
N "\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040"
N "\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040"
N "\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040"
N "\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000A"
N "\010A\010\040\000\000\000\000\000\000\000\000\000\000\000\040\000\353Zy\316y\316y\316y\316y\316y\316y"
N "\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316<\347\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377u\255a\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010"
N "A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A"
N "\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010"
N "A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A"
N "\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010"
N "A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A"
N "\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010"
N "A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010A\010\040\000\000\000\000\000"
N "\000\000\000\000\000\000\000\000\000\000\014cY\316y\316y\316y\316y\316y\316y\316y\316y\316y\316"
N "y\316y\316y\316y\316y\316y\316y\316y\316y\316<\347\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\276"
N "\367\232\326y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y"
N "\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316"
N "y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316"
N "y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316"
N "y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316"
N "y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316"
N "y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316"
N "y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316"
N "y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316y\316"
N "y\316y\316y\316y\316y\316\367\275\202\020\040\000\000\000\000\000\000\000\000\000\040\000\040\000U\255"
N "\276\367\276\367\276\367\276\367\276\367\276\367\276\367\276\367\276\367\276"
N "\367\276\367\276\367\276\367\276\367\276\367\276\367\276\367\276\367\276\367"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377q\214A\010\040\000\040\000\000\000\040\000\040\000iJ\337\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\236\367\256s"
N "\303\030\040\000\040\000a\010\313Z\373\336\337\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377\337\377\333\336"
N "\024\245\363\234\030\306\236\367\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\337\377\377\377\377\377\337\377\377\377\377\377"
N "\377\377\377\377\377\377\337\377\337\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377<\347\367\275q\214,cIJ\347\071\010B"
N "iJmk\323\234\272\326\337\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377\232"
N "\326\357{E)A\010\040\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000a\010\246\061\024\245\236\367"
N "\337\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377]\357\060\204\004!\040\000\040\000A\010\202\020$!\347\071IJIJ\246\061\303\030"
N "\040\000\000\000\040\000\040\000\246\061\327\275\337\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\337\377y\316\010B\040\000\040\000A\010IJ\024\245\333\336\236"
N "\367\337\377\377\377\377\377\377\377}\357y\316\357{E)\040\000\040\000\040\000,c\236"
N "\367\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\337\377\327\275\343\030A\010\040"
N "\000\010B\367\275\337\377\337\377\337\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\337\377\377\377\236\367\262\224\343\030\040\000A\010IJ]\357\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\337\377\327\275\343\030\040\000\242\020\357{}\357\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\272\326IJ\040\000\040\000IJ<\347\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377\272\326"
N "e)\040\000\242\020\363\234\276\367\337\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\236\367\014c\040\000\040\000,c\276\367\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\337\377\212RA\010\202\020\222\224\276"
N "\367\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377}"
N "\357\212R\040\000A\010\323\234\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\064\245a\010\040\000\216s\236\367\337\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\034\347"
N "E)\040\000\343\030\373\336\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\337"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377"
N "\337\377\337\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\337\377]\357\347\071\040\000e)]\357\337\377\337\377\377\377\377\377\377\377\337"
N "\377\276\367\276\367\337\377\377\377\377\377\377\377\337\377\276\367\276\367"
N "\337\377\377\377\377\377\377\377\377\377\377\377\337\377\226\265a\010\040\000"
N "\060\204\337\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\337\377\276\367\377\377\337\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\337\377\276\367\337\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\236\367\030\306\353Z\367\275\377\377"
N "\377\377\377\377\377\377\377\377\337\377\236\367\367\275\313Z\367\275\337"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377\226\265A"
N "\010\040\000q\214\337\377\377\377\377\377\377\377\377\377\377\377\363\234(B\347"
N "\071Q\214\337\377\377\377\377\377}\357\353Z\347\071\212R\373\336\377\377\377"
N "\377\377\377\377\377\377\377\337\377\347\071\040\000\343\030}\357\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\337\377u\255IJ\266\265\337\377\337\377"
N "\377\377\377\377\377\377\377\377\377\377\064\245\212R\327\275\337\377\337\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\337\377\377\377\232\326,"
N "ca\010\040\000\317{\377\377\377\377\377\377\337\377\337\377\333\336\014ca\010\000"
N "\000\060\204\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\252R\040\000\004!]\357\377\377\377\377\377\377\377\377\377\377\377\377\313"
N "Z\000\000\000\000\246\061\337\377\377\377\377\377\373\336a\010\000\000\040\000\226\265\377"
N "\377\377\377\377\377\377\377\377\377\377\377\064\245A\010\040\000u\255\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\060\204\040\000\040\000\252"
N "R\232\326\337\377\337\377\377\377\377\377\377\377\256s\040\000a\010\212R\373\336"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377\337"
N "\377\337\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\276\367\236\367\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\337\377]\357\222\224\004!\040\000\000\000"
N "\000\000\317{\377\377\377\377\377\377\034\347Q\214\004!\040\000\000\000\000\000\060\204\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377}\357\004!\040\000Mk\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\313Z\000\000\000\000\246\061\337\377"
N "\377\377\377\377\333\336a\010\000\000\040\000\226\265\377\377\377\377\377\377\377"
N "\377\377\377\377\377]\357\004!\040\000,c\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\020\204\000\000\040\000\040\000\202\020\357{}\357\337\377\377\377"
N "\377\377\256s\000\000\000\000\040\000a\010Q\214]\357\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377\377\377\377"
N "\377\377\377\276\367Y\316\020\204<\347\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\236\367}"
N "\357}\357\337\377\377\377\377\377\337\377\232\326\313ZU\255\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\236\367u\255\347\071\040\000\000\000"
N "\000\000\000\000\000\000\317{\377\377\276\367\064\245\246\061\040\000\040\000\000\000\000\000\000\000\020\204"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377y\316\040\000\040"
N "\000\024\245\377\377\377\377\377\377\377\377\377\377\377\377\377\377\313Z\000\000"
N "\000\000\246\061\337\377\377\377\377\377\333\336A\010\000\000\000\000u\255\377\377\377\377"
N "\377\377\377\377\377\377\377\377\337\377\212R\000\000\206\061\276\367\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\020\204\000\000\000\000\000\000\000\000\040\000E)\064"
N "\245}\357\377\377\256s\000\000\000\000\000\000\000\000\000\000\206\061\024\245\337\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\337\377\024\245mkmkMkMkmk"
N ",c\303\030IJ\337\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377U\255\313Z\252R\014c\034\347\337\377\262"
N "\224\212RE)\343\030]\357\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377y\316"
N "\252Ra\010\000\000\000\000\000\000\000\000\000\000\000\000\317{\070\306\252Ra\010\000\000\000\000\000\000\000\000\000\000"
N "\000\000\020\204\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377u"
N "\255\000\000A\010Y\316\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\313Z\000\000\000\000\246\061\337\377\377\377\377\377\333\336A\010\000\000\040\000u\255\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\020\204\000\000\242\020}\357"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\020\204\000\000\000\000\000\000\000"
N "\000\000\000\000\000A\010\010BY\316\317{\000\000\000\000\000\000\000\000\000\000\040\000A\010IJ\232\326\337\377"
N "\337\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\367\275\216s\333\336\034\347\034"
N "\347\034\347\034\347u\255(B\064\245\337\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377\337\377\337"
N "\377\367\275mk\226\265,c\333\336\353Zy\316\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377<\347\357{\202\020\000\000\000\000\040\000\000\000\000\000\000\000\040\000\040\000$!a\010\040\000\040\000\000"
N "\000\000\000\000\000\000\000\000\000\000\000\020\204\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\262\224\000\000\202\020\034\347\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\313Z\000\000\000\000\246\061\337\377\377\377\377\377\333\336"
N "A\010\000\000\040\000u\255\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\024\245\000\000a\010\034\347\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\020\204\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000A\010\004!\000\000\000\000\000\000\000\000\000\000\040\000\000"
N "\000\040\000\202\020mk<\347\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\323\234u\255"
N "\337\377\337\377\377\377\377\377\337\377\236\367}\357\262\224\232\326\337"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\337\377\377\377Mk\010B\272\326\337\377\276\367"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\337\377\313ZA\010\040\000\000\000\000\000\000\000\000\000"
N "\000\000\000\000\000\000\040\000\000\000\040\000\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\020\204\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377q\214\000\000\242\020]\357"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\313Z\000\000\000\000\246"
N "\061\337\377\377\377\377\377\333\336A\010\000\000\040\000u\255\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377U\255\000\000A\010\373\336\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\020\204\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040"
N "\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\040\000\000\000\040\000A\010mk\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\323\234\266\265\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\020\204\070\306\337\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377\377\377"
N "U\255\246\061\276\367\337\377\337\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\070\306\307\071\040\000\040\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\202\020\040\000\040\000"
N "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\204\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\222\224\000\000\202\020]\357\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\313Z\000\000\000\000\246\061\337\377\377\377\377\377\333\336"
N "A\010\000\000\040\000u\255\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\064\245\000\000a\010\034\347\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\020\204\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000a\010\202\020\000\000\000\000\000\000\000\000\000\000\040"
N "\000\000\000\040\000a\010\212R\070\306\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\064\245\226"
N "\265\236\367\377\377\377\377\377\377\377\377\377\377\337\377\317{\070\306\337"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\337\377\236\367\252R,c\327\275}\357\373\336\276"
N "\367\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377}\357\363\234\004!\040\000\040\000"
N "\000\000\000\000\000\000\000\000\040\000\216s\222\224\004!\040\000\000\000\000\000\000\000\000\000\000\000\000\000\020\204"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377U\255\040\000a\010"
N "\272\326\377\377\377\377\377\377\377\377\377\377\377\377\377\377\313Z\000\000"
N "\000\000\246\061\337\377\377\377\377\377\333\336A\010\000\000\040\000u\255\377\377\377"
N "\377\377\377\377\377\377\377\377\377\337\377q\214\000\000\303\030]\357\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\020\204\000\000\000\000\000\000\000\000\000\000\000"
N "\000\040\000e)\363\234mk\000\000\040\000\000\000\000\000\000\000\040\000\040\000\206\061U\255\236\367\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377}\357\064\245\353Z\034\347\276\367\276"
N "\367\276\367\276\367]\357\014c\333\336\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377<\347Y\316\070\306"
N "\317{\222\224<\347\212R\363\234\246\061\256s\276\367\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377]\357\216s\242\020\040\000\000\000\040\000\000\000\040\000\317{"
N "\337\377<\347mka\010\040\000\040\000\040\000\000\000\000\000\020\204\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\070\306\040\000\040\000\266\265\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\313Z\000\000\000\000\246\061\337\377\377"
N "\377\377\377\333\336A\010\000\000\040\000u\255\377\377\377\377\377\377\377\377\377"
N "\377\377\377\337\377,c\000\000E)\276\367\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\020\204\000\000\000\000\000\000\000\000\000\000\343\030\020\204]\357\337\377\256s\040"
N "\000\000\000\040\000\000\000\040\000\303\030\060\204}\357\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377<\347\303\030\206\061\252R\252R\252R\212R\252R\252R"
N "\064\245\337\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\327\275\256s\357{u\255\276\367\337\377\272"
N "\326\357{\206\061\307\071]\357\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\337\377\070\306iJ\040\000\040\000\000\000\000\000\317{\377\377\337\377\337\377"
N "\070\306(BA\010\040\000\000\000\000\000\020\204\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377]\357\242\020\040\000\357{\337\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\313Z\000\000\000\000\246\061\337\377\377\377\377\377\333\336"
N "A\010\000\000\040\000u\255\377\377\377\377\377\377\377\377\377\377\377\377]\357\206"
N "\061\040\000\252R\337\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\020\204\000\000\000\000\040\000a\010\313Z\232\326\337\377\377\377\377\377\256s\000\000\000\000"
N "\040\000\242\020\014c\232\326\276\367\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\337\377\367\275\313Z\373\336\276\367\276\367\276"
N "\367\276\367\276\367\337\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377"
N "\337\377\337\377\337\377\337\377<\347\262\224\373\336\337\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377\337\377\226"
N "\265\206\061\040\000\000\000\317{\377\377\377\377\377\377\377\377\337\377U\255E)\040"
N "\000\040\000\060\204\337\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\337\377\010B\040\000$!\337\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\313Z\000\000\000\000\246\061\337\377\377\377\377\377\333\336A\010\000\000\040\000u\255\377"
N "\377\377\377\377\377\377\377\377\377\377\377\327\275\202\020\040\000\262\224\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\020\204\040\000A\010\010"
N "B\226\265\276\367\337\377\377\377\377\377\377\377\256s\000\000A\010(B\327\275\276"
N "\367\337\377\337\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\337\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377]\357"
N "q\214\343\030q\214\377\377\377\377\377\377\377\377\377\377\377\377<\347\060"
N "\204\004!\323\234\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\222\224\040\000\040\000\327\275\337\377\377\377\377\377\377\377\377\377"
N "\377\377\357{a\010a\010\313Z\337\377\377\377\377\377\034\347$!a\010\343\030\367"
N "\275\377\377\377\377\377\377\377\377\377\377\337\377,c\040\000\242\020\373\336"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377U\255e)q\214\236"
N "\367\377\377\377\377\377\377\377\377\377\377\377\377\363\234\206\061\262\224"
N "\236\367\337\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\337\377\337\377]\357\236\367\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\034\347}\357\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\337\377<\347\004!\040\000\347\071}\357\377\377\377"
N "\377\377\377\377\377\377\377\337\377\373\336\333\336]\357\337\377\377\377"
N "\377\377\377\377<\347\373\336\034\347\276\367\377\377\377\377\377\377\377\377"
N "\377\377\070\306\202\020\040\000,c\337\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\337\377\337\377]\357\337\377\337\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\337\377]\357\276\367\337\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\337\377Q\214A\010\040\000\024\245\337\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377}\357\212"
N "R\040\000\202\020Y\316\337\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377}\357e)\040\000\242\020\070\306\377\377\377\377\377\377\337\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\276\367\060\204\040\000a\010\216s\337"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\337"
N "\377\070\306a\010\040\000\343\030y\316\337\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\276\367q\214A\010\040\000\010B]\357\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\337\377\337\377\363\234a"
N "\010\040\000\303\030\327\275\337\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377}\357"
N "\317{\202\020\040\000E)\232\326\337\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377\020\204\242\020"
N "\040\000A\010\357{\333\336\337\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\276\367\030\306IJ\040\000\040\000E)\030\306\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\337\377\064\245\202\020\040\000\040\000\004!\357"
N "{\333\336\276\367\377\377\377\377\377\377\377\377\377\377\377\377\236\367"
N "\266\265\353Z\202\020\040\000\040\000\347\071y\316\337\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\337\377y\316IJA\010\040\000\000\000A\010\246\061\014c\060\204"
N "\262\224\222\224\357{\252R$!\040\000\040\000\040\000\242\020\216s<\347\337\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377\337\377u"
N "\255IJA\010\000\000\040\000\040\000\000\000\040\000\000\000\040\000\000\000\040\000A\010\303\030,cy\316\276"
N "\367\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\276\367y\316\060\204IJ$!\202\020a\010\202\020"
N "\303\030\206\061\313Z\363\234\272\326\337\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\337\377\337\377\377\377\377\377\276\367<\347\373\336\034\347]"
N "\357\276\367\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
N "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377");
N
L 27 "Blinky.c" 2
N
N// Audio Libraries
N
N#include "LPC17xx.h"                        
L 1 "LPC17xx.h" 1
N/******************************************************************************
N * @file:    LPC17xx.h
N * @purpose: CMSIS Cortex-M3 Core Peripheral Access Layer Header File for 
N *           NXP LPC17xx Device Series 
N * @version: V1.10
N * @date:    24. September 2010
N *----------------------------------------------------------------------------
N *
N * @note
N * Copyright (C) 2010 ARM Limited. All rights reserved.
N *
N * @par
N * ARM Limited (ARM) is supplying this software for use with Cortex-M3 
N * processor based microcontrollers.  This file can be freely distributed 
N * within development tools that are supporting such ARM based processors. 
N *
N * @par
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N
N
N#ifndef __LPC17xx_H__
N#define __LPC17xx_H__
N
N/*
N * ==========================================================================
N * ---------- Interrupt Number Definition -----------------------------------
N * ==========================================================================
N */
N
N/** @addtogroup LPC17xx_System
N * @{
N */
N
N/** @brief IRQ interrupt source definition */
Ntypedef enum IRQn
N{
N/******  Cortex-M3 Processor Exceptions Numbers ***************************************************/
N  NonMaskableInt_IRQn           = -14,      /*!< 2 Non Maskable Interrupt                         */
N  MemoryManagement_IRQn         = -12,      /*!< 4 Cortex-M3 Memory Management Interrupt          */
N  BusFault_IRQn                 = -11,      /*!< 5 Cortex-M3 Bus Fault Interrupt                  */
N  UsageFault_IRQn               = -10,      /*!< 6 Cortex-M3 Usage Fault Interrupt                */
N  SVCall_IRQn                   = -5,       /*!< 11 Cortex-M3 SV Call Interrupt                   */
N  DebugMonitor_IRQn             = -4,       /*!< 12 Cortex-M3 Debug Monitor Interrupt             */
N  PendSV_IRQn                   = -2,       /*!< 14 Cortex-M3 Pend SV Interrupt                   */
N  SysTick_IRQn                  = -1,       /*!< 15 Cortex-M3 System Tick Interrupt               */
N
N/******  LPC17xx Specific Interrupt Numbers *******************************************************/
N  WDT_IRQn                      = 0,        /*!< Watchdog Timer Interrupt                         */
N  TIMER0_IRQn                   = 1,        /*!< Timer0 Interrupt                                 */
N  TIMER1_IRQn                   = 2,        /*!< Timer1 Interrupt                                 */
N  TIMER2_IRQn                   = 3,        /*!< Timer2 Interrupt                                 */
N  TIMER3_IRQn                   = 4,        /*!< Timer3 Interrupt                                 */
N  UART0_IRQn                    = 5,        /*!< UART0 Interrupt                                  */
N  UART1_IRQn                    = 6,        /*!< UART1 Interrupt                                  */
N  UART2_IRQn                    = 7,        /*!< UART2 Interrupt                                  */
N  UART3_IRQn                    = 8,        /*!< UART3 Interrupt                                  */
N  PWM1_IRQn                     = 9,        /*!< PWM1 Interrupt                                   */
N  I2C0_IRQn                     = 10,       /*!< I2C0 Interrupt                                   */
N  I2C1_IRQn                     = 11,       /*!< I2C1 Interrupt                                   */
N  I2C2_IRQn                     = 12,       /*!< I2C2 Interrupt                                   */
N  SPI_IRQn                      = 13,       /*!< SPI Interrupt                                    */
N  SSP0_IRQn                     = 14,       /*!< SSP0 Interrupt                                   */
N  SSP1_IRQn                     = 15,       /*!< SSP1 Interrupt                                   */
N  PLL0_IRQn                     = 16,       /*!< PLL0 Lock (Main PLL) Interrupt                   */
N  RTC_IRQn                      = 17,       /*!< Real Time Clock Interrupt                        */
N  EINT0_IRQn                    = 18,       /*!< External Interrupt 0 Interrupt                   */
N  EINT1_IRQn                    = 19,       /*!< External Interrupt 1 Interrupt                   */
N  EINT2_IRQn                    = 20,       /*!< External Interrupt 2 Interrupt                   */
N  EINT3_IRQn                    = 21,       /*!< External Interrupt 3 Interrupt                   */
N  ADC_IRQn                      = 22,       /*!< A/D Converter Interrupt                          */
N  BOD_IRQn                      = 23,       /*!< Brown-Out Detect Interrupt                       */
N  USB_IRQn                      = 24,       /*!< USB Interrupt                                    */
N  CAN_IRQn                      = 25,       /*!< CAN Interrupt                                    */
N  DMA_IRQn                      = 26,       /*!< General Purpose DMA Interrupt                    */
N  I2S_IRQn                      = 27,       /*!< I2S Interrupt                                    */
N  ENET_IRQn                     = 28,       /*!< Ethernet Interrupt                               */
N  RIT_IRQn                      = 29,       /*!< Repetitive Interrupt Timer Interrupt             */
N  MCPWM_IRQn                    = 30,       /*!< Motor Control PWM Interrupt                      */
N  QEI_IRQn                      = 31,       /*!< Quadrature Encoder Interface Interrupt           */
N  PLL1_IRQn                     = 32,       /*!< PLL1 Lock (USB PLL) Interrupt                    */
N  USBActivity_IRQn              = 33,       /*!< USB Activity Interrupt(For wakeup only)          */
N  CANActivity_IRQn              = 34        /*!< CAN Activity Interrupt(For wakeup only)          */
N} IRQn_Type;
N
N
N/*
N * ==========================================================================
N * ----------- Processor and Core Peripheral Section ------------------------
N * ==========================================================================
N */
N
N/* Configuration of the Cortex-M3 Processor and Core Peripherals */
N#define __MPU_PRESENT             1         /*!< MPU present or not                               */
N#define __NVIC_PRIO_BITS          5         /*!< Number of Bits used for Priority Levels          */
N#define __Vendor_SysTickConfig    0         /*!< Set to 1 if different SysTick Config is used     */
N
N
N#include "core_cm3.h"                       /* Cortex-M3 processor and core peripherals           */
L 1 "core_cm3.h" 1
N/******************************************************************************
N * @file:    core_cm3.h
N * @purpose: CMSIS Cortex-M3 Core Peripheral Access Layer Header File
N * @version: V1.20
N * @date:    22. May 2009
N *----------------------------------------------------------------------------
N *
N * Copyright (C) 2009 ARM Limited. All rights reserved.
N *
N * ARM Limited (ARM) is supplying this software for use with Cortex-Mx 
N * processor based microcontrollers.  This file can be freely distributed 
N * within development tools that are supporting such ARM based processors. 
N *
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N
N#ifndef __CM3_CORE_H__
N#define __CM3_CORE_H__
N
N#ifdef __cplusplus
S extern "C" {
N#endif 
N
N#define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!< [31:16] CMSIS HAL main version */
N#define __CM3_CMSIS_VERSION_SUB   (0x20)                                                       /*!< [15:0]  CMSIS HAL sub version  */
N#define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!< CMSIS HAL version number       */
N
N#define __CORTEX_M                (0x03)                                                       /*!< Cortex core                    */
N
N/**
N *  Lint configuration \n
N *  ----------------------- \n
N *
N *  The following Lint messages will be suppressed and not shown: \n
N *  \n
N *    --- Error 10: --- \n
N *    register uint32_t __regBasePri         __asm("basepri"); \n
N *    Error 10: Expecting ';' \n
N *     \n
N *    --- Error 530: --- \n
N *    return(__regBasePri); \n
N *    Warning 530: Symbol '__regBasePri' (line 264) not initialized \n
N *     \n
N *    --- Error 550: --- \n
N *      __regBasePri = (basePri & 0x1ff); \n
N *    } \n
N *    Warning 550: Symbol '__regBasePri' (line 271) not accessed \n
N *     \n
N *    --- Error 754: --- \n
N *    uint32_t RESERVED0[24]; \n
N *    Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h) not referenced \n
N *     \n
N *    --- Error 750: --- \n
N *    #define __CM3_CORE_H__ \n
N *    Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced \n
N *     \n
N *    --- Error 528: --- \n
N *    static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
N *    Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not referenced \n
N *     \n
N *    --- Error 751: --- \n
N *    } InterruptType_Type; \n
N *    Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced \n
N * \n
N * \n
N *    Note:  To re-enable a Message, insert a space before 'lint' * \n
N *
N */
N
N/*lint -save */
N/*lint -e10  */
N/*lint -e530 */
N/*lint -e550 */
N/*lint -e754 */
N/*lint -e750 */
N/*lint -e528 */
N/*lint -e751 */
N
N
N#include <stdint.h>                           /* Include standard types */
N
N#if defined (__ICCARM__)
X#if 0L
S  #include <intrinsics.h>                     /* IAR Intrinsics   */
N#endif
N
N
N#ifndef __NVIC_PRIO_BITS
S  #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
N#endif
N
N
N
N
N/**
N * IO definitions
N *
N * define access restrictions to peripheral registers
N */
N
N#ifdef __cplusplus
S#define     __I     volatile                  /*!< defines 'read only' permissions      */
N#else
N#define     __I     volatile const            /*!< defines 'read only' permissions      */
N#endif
N#define     __O     volatile                  /*!< defines 'write only' permissions     */
N#define     __IO    volatile                  /*!< defines 'read / write' permissions   */
N
N
N
N/*******************************************************************************
N *                 Register Abstraction
N ******************************************************************************/
N
N
N/* System Reset */
N#define NVIC_VECTRESET              0         /*!< Vector Reset Bit             */
N#define NVIC_SYSRESETREQ            2         /*!< System Reset Request         */
N#define NVIC_AIRCR_VECTKEY    (0x5FA << 16)   /*!< AIRCR Key for write access   */
N#define NVIC_AIRCR_ENDIANESS        15        /*!< Endianess                    */
N
N/* Core Debug */
N#define CoreDebug_DEMCR_TRCENA (1 << 24)      /*!< DEMCR TRCENA enable          */
N#define ITM_TCR_ITMENA              1         /*!< ITM enable                   */
N
N
N
N
N/* memory mapping struct for Nested Vectored Interrupt Controller (NVIC) */
Ntypedef struct
N{
N  __IO uint32_t ISER[8];                      /*!< Interrupt Set Enable Register            */
X  volatile uint32_t ISER[8];                       
N       uint32_t RESERVED0[24];
N  __IO uint32_t ICER[8];                      /*!< Interrupt Clear Enable Register          */
X  volatile uint32_t ICER[8];                       
N       uint32_t RSERVED1[24];
N  __IO uint32_t ISPR[8];                      /*!< Interrupt Set Pending Register           */
X  volatile uint32_t ISPR[8];                       
N       uint32_t RESERVED2[24];
N  __IO uint32_t ICPR[8];                      /*!< Interrupt Clear Pending Register         */
X  volatile uint32_t ICPR[8];                       
N       uint32_t RESERVED3[24];
N  __IO uint32_t IABR[8];                      /*!< Interrupt Active bit Register            */
X  volatile uint32_t IABR[8];                       
N       uint32_t RESERVED4[56];
N  __IO uint8_t  IP[240];                      /*!< Interrupt Priority Register, 8Bit wide   */
X  volatile uint8_t  IP[240];                       
N       uint32_t RESERVED5[644];
N  __O  uint32_t STIR;                         /*!< Software Trigger Interrupt Register      */
X  volatile  uint32_t STIR;                          
N}  NVIC_Type;
N
N
N/* memory mapping struct for System Control Block */
Ntypedef struct
N{
N  __I  uint32_t CPUID;                        /*!< CPU ID Base Register                                     */
X  volatile const  uint32_t CPUID;                         
N  __IO uint32_t ICSR;                         /*!< Interrupt Control State Register                         */
X  volatile uint32_t ICSR;                          
N  __IO uint32_t VTOR;                         /*!< Vector Table Offset Register                             */
X  volatile uint32_t VTOR;                          
N  __IO uint32_t AIRCR;                        /*!< Application Interrupt / Reset Control Register           */
X  volatile uint32_t AIRCR;                         
N  __IO uint32_t SCR;                          /*!< System Control Register                                  */
X  volatile uint32_t SCR;                           
N  __IO uint32_t CCR;                          /*!< Configuration Control Register                           */
X  volatile uint32_t CCR;                           
N  __IO uint8_t  SHP[12];                      /*!< System Handlers Priority Registers (4-7, 8-11, 12-15)    */
X  volatile uint8_t  SHP[12];                       
N  __IO uint32_t SHCSR;                        /*!< System Handler Control and State Register                */
X  volatile uint32_t SHCSR;                         
N  __IO uint32_t CFSR;                         /*!< Configurable Fault Status Register                       */
X  volatile uint32_t CFSR;                          
N  __IO uint32_t HFSR;                         /*!< Hard Fault Status Register                               */
X  volatile uint32_t HFSR;                          
N  __IO uint32_t DFSR;                         /*!< Debug Fault Status Register                              */
X  volatile uint32_t DFSR;                          
N  __IO uint32_t MMFAR;                        /*!< Mem Manage Address Register                              */
X  volatile uint32_t MMFAR;                         
N  __IO uint32_t BFAR;                         /*!< Bus Fault Address Register                               */
X  volatile uint32_t BFAR;                          
N  __IO uint32_t AFSR;                         /*!< Auxiliary Fault Status Register                          */
X  volatile uint32_t AFSR;                          
N  __I  uint32_t PFR[2];                       /*!< Processor Feature Register                               */
X  volatile const  uint32_t PFR[2];                        
N  __I  uint32_t DFR;                          /*!< Debug Feature Register                                   */
X  volatile const  uint32_t DFR;                           
N  __I  uint32_t ADR;                          /*!< Auxiliary Feature Register                               */
X  volatile const  uint32_t ADR;                           
N  __I  uint32_t MMFR[4];                      /*!< Memory Model Feature Register                            */
X  volatile const  uint32_t MMFR[4];                       
N  __I  uint32_t ISAR[5];                      /*!< ISA Feature Register                                     */
X  volatile const  uint32_t ISAR[5];                       
N} SCB_Type;
N
N
N/* memory mapping struct for SysTick */
Ntypedef struct
N{
N  __IO uint32_t CTRL;                         /*!< SysTick Control and Status Register */
X  volatile uint32_t CTRL;                          
N  __IO uint32_t LOAD;                         /*!< SysTick Reload Value Register       */
X  volatile uint32_t LOAD;                          
N  __IO uint32_t VAL;                          /*!< SysTick Current Value Register      */
X  volatile uint32_t VAL;                           
N  __I  uint32_t CALIB;                        /*!< SysTick Calibration Register        */
X  volatile const  uint32_t CALIB;                         
N} SysTick_Type;
N
N
N/* memory mapping structur for ITM */
Ntypedef struct
N{
N  __O  union  
X  volatile  union  
N  {
N    __O  uint8_t    u8;                       /*!< ITM Stimulus Port 8-bit               */
X    volatile  uint8_t    u8;                        
N    __O  uint16_t   u16;                      /*!< ITM Stimulus Port 16-bit              */
X    volatile  uint16_t   u16;                       
N    __O  uint32_t   u32;                      /*!< ITM Stimulus Port 32-bit              */
X    volatile  uint32_t   u32;                       
N  }  PORT [32];                               /*!< ITM Stimulus Port Registers           */
N       uint32_t RESERVED0[864];
N  __IO uint32_t TER;                          /*!< ITM Trace Enable Register             */
X  volatile uint32_t TER;                           
N       uint32_t RESERVED1[15];
N  __IO uint32_t TPR;                          /*!< ITM Trace Privilege Register          */
X  volatile uint32_t TPR;                           
N       uint32_t RESERVED2[15];
N  __IO uint32_t TCR;                          /*!< ITM Trace Control Register            */
X  volatile uint32_t TCR;                           
N       uint32_t RESERVED3[29];
N  __IO uint32_t IWR;                          /*!< ITM Integration Write Register        */
X  volatile uint32_t IWR;                           
N  __IO uint32_t IRR;                          /*!< ITM Integration Read Register         */
X  volatile uint32_t IRR;                           
N  __IO uint32_t IMCR;                         /*!< ITM Integration Mode Control Register */
X  volatile uint32_t IMCR;                          
N       uint32_t RESERVED4[43];
N  __IO uint32_t LAR;                          /*!< ITM Lock Access Register              */
X  volatile uint32_t LAR;                           
N  __IO uint32_t LSR;                          /*!< ITM Lock Status Register              */
X  volatile uint32_t LSR;                           
N       uint32_t RESERVED5[6];
N  __I  uint32_t PID4;                         /*!< ITM Product ID Registers              */
X  volatile const  uint32_t PID4;                          
N  __I  uint32_t PID5;
X  volatile const  uint32_t PID5;
N  __I  uint32_t PID6;
X  volatile const  uint32_t PID6;
N  __I  uint32_t PID7;
X  volatile const  uint32_t PID7;
N  __I  uint32_t PID0;
X  volatile const  uint32_t PID0;
N  __I  uint32_t PID1;
X  volatile const  uint32_t PID1;
N  __I  uint32_t PID2;
X  volatile const  uint32_t PID2;
N  __I  uint32_t PID3;
X  volatile const  uint32_t PID3;
N  __I  uint32_t CID0;
X  volatile const  uint32_t CID0;
N  __I  uint32_t CID1;
X  volatile const  uint32_t CID1;
N  __I  uint32_t CID2;
X  volatile const  uint32_t CID2;
N  __I  uint32_t CID3;
X  volatile const  uint32_t CID3;
N} ITM_Type;
N
N
N/* memory mapped struct for Interrupt Type */
Ntypedef struct
N{
N       uint32_t RESERVED0;
N  __I  uint32_t ICTR;                         /*!< Interrupt Control Type Register  */
X  volatile const  uint32_t ICTR;                          
N#if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
X#if ((0L) && (__CM3_REV >= 0x200))
S  __IO uint32_t ACTLR;                        /*!< Auxiliary Control Register       */
N#else
N       uint32_t RESERVED1;
N#endif
N} InterruptType_Type;
N
N
N/* Memory Protection Unit */
N#if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
X#if 1L && (1 == 1)
Ntypedef struct
N{
N  __I  uint32_t TYPE;                         /*!< MPU Type Register                               */
X  volatile const  uint32_t TYPE;                          
N  __IO uint32_t CTRL;                         /*!< MPU Control Register                            */
X  volatile uint32_t CTRL;                          
N  __IO uint32_t RNR;                          /*!< MPU Region RNRber Register                      */
X  volatile uint32_t RNR;                           
N  __IO uint32_t RBAR;                         /*!< MPU Region Base Address Register                */
X  volatile uint32_t RBAR;                          
N  __IO uint32_t RASR;                         /*!< MPU Region Attribute and Size Register          */
X  volatile uint32_t RASR;                          
N  __IO uint32_t RBAR_A1;                      /*!< MPU Alias 1 Region Base Address Register        */
X  volatile uint32_t RBAR_A1;                       
N  __IO uint32_t RASR_A1;                      /*!< MPU Alias 1 Region Attribute and Size Register  */
X  volatile uint32_t RASR_A1;                       
N  __IO uint32_t RBAR_A2;                      /*!< MPU Alias 2 Region Base Address Register        */
X  volatile uint32_t RBAR_A2;                       
N  __IO uint32_t RASR_A2;                      /*!< MPU Alias 2 Region Attribute and Size Register  */
X  volatile uint32_t RASR_A2;                       
N  __IO uint32_t RBAR_A3;                      /*!< MPU Alias 3 Region Base Address Register        */
X  volatile uint32_t RBAR_A3;                       
N  __IO uint32_t RASR_A3;                      /*!< MPU Alias 3 Region Attribute and Size Register  */
X  volatile uint32_t RASR_A3;                       
N} MPU_Type;
N#endif
N
N
N/* Core Debug Register */
Ntypedef struct
N{
N  __IO uint32_t DHCSR;                        /*!< Debug Halting Control and Status Register       */
X  volatile uint32_t DHCSR;                         
N  __O  uint32_t DCRSR;                        /*!< Debug Core Register Selector Register           */
X  volatile  uint32_t DCRSR;                         
N  __IO uint32_t DCRDR;                        /*!< Debug Core Register Data Register               */
X  volatile uint32_t DCRDR;                         
N  __IO uint32_t DEMCR;                        /*!< Debug Exception and Monitor Control Register    */
X  volatile uint32_t DEMCR;                         
N} CoreDebug_Type;
N
N
N/* Memory mapping of Cortex-M3 Hardware */
N#define SCS_BASE            (0xE000E000)                              /*!< System Control Space Base Address    */
N#define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address                     */
N#define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address              */
N#define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address                 */
N#define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address                    */
N#define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Base Address    */
N
N#define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register              */
N#define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct             */
N#define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration struct         */
N#define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struct            */
N#define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct             */
N#define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration struct      */
N
N#if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
X#if 1L && (1 == 1)
N  #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit               */
N  #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit               */
N#endif
N
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N ******************************************************************************/
N
N
N#if defined ( __CC_ARM   )
X#if 1L
N  #define __ASM            __asm                                      /*!< asm keyword for ARM Compiler          */
N  #define __INLINE         __inline                                   /*!< inline keyword for ARM Compiler       */
N
N#elif defined ( __ICCARM__ )
S  #define __ASM           __asm                                       /*!< asm keyword for IAR Compiler           */
S  #define __INLINE        inline                                      /*!< inline keyword for IAR Compiler. Only avaiable in High optimization mode! */
S
S#elif defined   (  __GNUC__  )
S  #define __ASM            __asm                                      /*!< asm keyword for GNU Compiler          */
S  #define __INLINE         inline                                     /*!< inline keyword for GNU Compiler       */
S
S#elif defined   (  __TASKING__  )
S  #define __ASM            __asm                                      /*!< asm keyword for TASKING Compiler          */
S  #define __INLINE         inline                                     /*!< inline keyword for TASKING Compiler       */
S
N#endif
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N
N#if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
X#if 1L  
N/* ARM armcc specific functions */
N
N#define __enable_fault_irq                __enable_fiq
N#define __disable_fault_irq               __disable_fiq
N
N#define __NOP                             __nop
N#define __WFI                             __wfi
N#define __WFE                             __wfe
N#define __SEV                             __sev
N#define __ISB()                           __isb(0)
N#define __DSB()                           __dsb(0)
N#define __DMB()                           __dmb(0)
N#define __REV                             __rev
N#define __RBIT                            __rbit
N#define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
N#define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
N#define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
N#define __STREXB(value, ptr)              __strex(value, ptr)
N#define __STREXH(value, ptr)              __strex(value, ptr)
N#define __STREXW(value, ptr)              __strex(value, ptr)
N
N
N/* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
N/* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
N/* intrinsic void __enable_irq();     */
N/* intrinsic void __disable_irq();    */
N
N
N/**
N * @brief  Return the Process Stack Pointer
N *
N * @param  none
N * @return uint32_t ProcessStackPointer
N *
N * Return the actual process stack pointer
N */
Nextern uint32_t __get_PSP(void);
N
N/**
N * @brief  Set the Process Stack Pointer
N *
N * @param  uint32_t Process Stack Pointer
N * @return none
N *
N * Assign the value ProcessStackPointer to the MSP 
N * (process stack pointer) Cortex processor register
N */
Nextern void __set_PSP(uint32_t topOfProcStack);
N
N/**
N * @brief  Return the Main Stack Pointer
N *
N * @param  none
N * @return uint32_t Main Stack Pointer
N *
N * Return the current value of the MSP (main stack pointer)
N * Cortex processor register
N */
Nextern uint32_t __get_MSP(void);
N
N/**
N * @brief  Set the Main Stack Pointer
N *
N * @param  uint32_t Main Stack Pointer
N * @return none
N *
N * Assign the value mainStackPointer to the MSP 
N * (main stack pointer) Cortex processor register
N */
Nextern void __set_MSP(uint32_t topOfMainStack);
N
N/**
N * @brief  Reverse byte order in unsigned short value
N *
N * @param  uint16_t value to reverse
N * @return uint32_t reversed value
N *
N * Reverse byte order in unsigned short value
N */
Nextern uint32_t __REV16(uint16_t value);
N
N/*
N * @brief  Reverse byte order in signed short value with sign extension to integer
N *
N * @param  int16_t value to reverse
N * @return int32_t reversed value
N *
N * Reverse byte order in signed short value with sign extension to integer
N */
Nextern int32_t __REVSH(int16_t value);
N
N
N#if (__ARMCC_VERSION < 400000)
X#if (5060750 < 400000)
S
S/**
S * @brief  Remove the exclusive lock created by ldrex
S *
S * @param  none
S * @return none
S *
S * Removes the exclusive lock which is created by ldrex.
S */
Sextern void __CLREX(void);
S
S/**
S * @brief  Return the Base Priority value
S *
S * @param  none
S * @return uint32_t BasePriority
S *
S * Return the content of the base priority register
S */
Sextern uint32_t __get_BASEPRI(void);
S
S/**
S * @brief  Set the Base Priority value
S *
S * @param  uint32_t BasePriority
S * @return none
S *
S * Set the base priority register
S */
Sextern void __set_BASEPRI(uint32_t basePri);
S
S/**
S * @brief  Return the Priority Mask value
S *
S * @param  none
S * @return uint32_t PriMask
S *
S * Return the state of the priority mask bit from the priority mask
S * register
S */
Sextern uint32_t __get_PRIMASK(void);
S
S/**
S * @brief  Set the Priority Mask value
S *
S * @param  uint32_t PriMask
S * @return none
S *
S * Set the priority mask bit in the priority mask register
S */
Sextern void __set_PRIMASK(uint32_t priMask);
S
S/**
S * @brief  Return the Fault Mask value
S *
S * @param  none
S * @return uint32_t FaultMask
S *
S * Return the content of the fault mask register
S */
Sextern uint32_t __get_FAULTMASK(void);
S
S/**
S * @brief  Set the Fault Mask value
S *
S * @param  uint32_t faultMask value
S * @return none
S *
S * Set the fault mask register
S */
Sextern void __set_FAULTMASK(uint32_t faultMask);
S
S/**
S * @brief  Return the Control Register value
S * 
S * @param  none
S * @return uint32_t Control value
S *
S * Return the content of the control register
S */
Sextern uint32_t __get_CONTROL(void);
S
S/**
S * @brief  Set the Control Register value
S *
S * @param  uint32_t Control value
S * @return none
S *
S * Set the control register
S */
Sextern void __set_CONTROL(uint32_t control);
S
N#else  /* (__ARMCC_VERSION >= 400000)  */
N
N
N/**
N * @brief  Remove the exclusive lock created by ldrex
N *
N * @param  none
N * @return none
N *
N * Removes the exclusive lock which is created by ldrex.
N */
N#define __CLREX                           __clrex
N
N/**
N * @brief  Return the Base Priority value
N *
N * @param  none
N * @return uint32_t BasePriority
N *
N * Return the content of the base priority register
N */
Nstatic __INLINE uint32_t  __get_BASEPRI(void)
Xstatic __inline uint32_t  __get_BASEPRI(void)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  return(__regBasePri);
N}
N
N/**
N * @brief  Set the Base Priority value
N *
N * @param  uint32_t BasePriority
N * @return none
N *
N * Set the base priority register
N */
Nstatic __INLINE void __set_BASEPRI(uint32_t basePri)
Xstatic __inline void __set_BASEPRI(uint32_t basePri)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  __regBasePri = (basePri & 0x1ff);
N}
N
N/**
N * @brief  Return the Priority Mask value
N *
N * @param  none
N * @return uint32_t PriMask
N *
N * Return the state of the priority mask bit from the priority mask
N * register
N */
Nstatic __INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N
N/**
N * @brief  Set the Priority Mask value
N *
N * @param  uint32_t PriMask
N * @return none
N *
N * Set the priority mask bit in the priority mask register
N */
Nstatic __INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N
N/**
N * @brief  Return the Fault Mask value
N *
N * @param  none
N * @return uint32_t FaultMask
N *
N * Return the content of the fault mask register
N */
Nstatic __INLINE uint32_t __get_FAULTMASK(void)
Xstatic __inline uint32_t __get_FAULTMASK(void)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  return(__regFaultMask);
N}
N
N/**
N * @brief  Set the Fault Mask value
N *
N * @param  uint32_t faultMask value
N * @return none
N *
N * Set the fault mask register
N */
Nstatic __INLINE void __set_FAULTMASK(uint32_t faultMask)
Xstatic __inline void __set_FAULTMASK(uint32_t faultMask)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  __regFaultMask = (faultMask & 1);
N}
N
N/**
N * @brief  Return the Control Register value
N * 
N * @param  none
N * @return uint32_t Control value
N *
N * Return the content of the control register
N */
Nstatic __INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N
N/**
N * @brief  Set the Control Register value
N *
N * @param  uint32_t Control value
N * @return none
N *
N * Set the control register
N */
Nstatic __INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N}
N
N#endif /* __ARMCC_VERSION  */ 
N
N
N
N#elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
S/* IAR iccarm specific functions */
S
S#define __enable_irq                              __enable_interrupt        /*!< global Interrupt enable */
S#define __disable_irq                             __disable_interrupt       /*!< global Interrupt disable */
S
Sstatic __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
Sstatic __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
S
S#define __NOP                                     __no_operation()          /*!< no operation intrinsic in IAR Compiler */ 
Sstatic __INLINE  void __WFI()                     { __ASM ("wfi"); }
Sstatic __INLINE  void __WFE()                     { __ASM ("wfe"); }
Sstatic __INLINE  void __SEV()                     { __ASM ("sev"); }
Sstatic __INLINE  void __CLREX()                   { __ASM ("clrex"); }
S
S/* intrinsic void __ISB(void)                                     */
S/* intrinsic void __DSB(void)                                     */
S/* intrinsic void __DMB(void)                                     */
S/* intrinsic void __set_PRIMASK();                                */
S/* intrinsic void __get_PRIMASK();                                */
S/* intrinsic void __set_FAULTMASK();                              */
S/* intrinsic void __get_FAULTMASK();                              */
S/* intrinsic uint32_t __REV(uint32_t value);                      */
S/* intrinsic uint32_t __REVSH(uint32_t value);                    */
S/* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
S/* intrinsic unsigned long __LDREX(unsigned long *);              */
S
S
S/**
S * @brief  Return the Process Stack Pointer
S *
S * @param  none
S * @return uint32_t ProcessStackPointer
S *
S * Return the actual process stack pointer
S */
Sextern uint32_t __get_PSP(void);
S
S/**
S * @brief  Set the Process Stack Pointer
S *
S * @param  uint32_t Process Stack Pointer
S * @return none
S *
S * Assign the value ProcessStackPointer to the MSP 
S * (process stack pointer) Cortex processor register
S */
Sextern void __set_PSP(uint32_t topOfProcStack);
S
S/**
S * @brief  Return the Main Stack Pointer
S *
S * @param  none
S * @return uint32_t Main Stack Pointer
S *
S * Return the current value of the MSP (main stack pointer)
S * Cortex processor register
S */
Sextern uint32_t __get_MSP(void);
S
S/**
S * @brief  Set the Main Stack Pointer
S *
S * @param  uint32_t Main Stack Pointer
S * @return none
S *
S * Assign the value mainStackPointer to the MSP 
S * (main stack pointer) Cortex processor register
S */
Sextern void __set_MSP(uint32_t topOfMainStack);
S
S/**
S * @brief  Reverse byte order in unsigned short value
S *
S * @param  uint16_t value to reverse
S * @return uint32_t reversed value
S *
S * Reverse byte order in unsigned short value
S */
Sextern uint32_t __REV16(uint16_t value);
S
S/**
S * @brief  Reverse bit order of value
S *
S * @param  uint32_t value to reverse
S * @return uint32_t reversed value
S *
S * Reverse bit order of value
S */
Sextern uint32_t __RBIT(uint32_t value);
S
S/**
S * @brief  LDR Exclusive
S *
S * @param  uint8_t* address
S * @return uint8_t value of (*address)
S *
S * Exclusive LDR command
S */
Sextern uint8_t __LDREXB(uint8_t *addr);
S
S/**
S * @brief  LDR Exclusive
S *
S * @param  uint16_t* address
S * @return uint16_t value of (*address)
S *
S * Exclusive LDR command
S */
Sextern uint16_t __LDREXH(uint16_t *addr);
S
S/**
S * @brief  LDR Exclusive
S *
S * @param  uint32_t* address
S * @return uint32_t value of (*address)
S *
S * Exclusive LDR command
S */
Sextern uint32_t __LDREXW(uint32_t *addr);
S
S/**
S * @brief  STR Exclusive
S *
S * @param  uint8_t *address
S * @param  uint8_t value to store
S * @return uint32_t successful / failed
S *
S * Exclusive STR command
S */
Sextern uint32_t __STREXB(uint8_t value, uint8_t *addr);
S
S/**
S * @brief  STR Exclusive
S *
S * @param  uint16_t *address
S * @param  uint16_t value to store
S * @return uint32_t successful / failed
S *
S * Exclusive STR command
S */
Sextern uint32_t __STREXH(uint16_t value, uint16_t *addr);
S
S/**
S * @brief  STR Exclusive
S *
S * @param  uint32_t *address
S * @param  uint32_t value to store
S * @return uint32_t successful / failed
S *
S * Exclusive STR command
S */
Sextern uint32_t __STREXW(uint32_t value, uint32_t *addr);
S
S
S
S#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
S/* GNU gcc specific functions */
S
Sstatic __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
Sstatic __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
S
Sstatic __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
Sstatic __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
S
Sstatic __INLINE void __NOP()                      { __ASM volatile ("nop"); }
Sstatic __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
Sstatic __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
Sstatic __INLINE void __SEV()                      { __ASM volatile ("sev"); }
Sstatic __INLINE void __ISB()                      { __ASM volatile ("isb"); }
Sstatic __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
Sstatic __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
Sstatic __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }
S
S
S/**
S * @brief  Return the Process Stack Pointer
S *
S * @param  none
S * @return uint32_t ProcessStackPointer
S *
S * Return the actual process stack pointer
S */
Sextern uint32_t __get_PSP(void);
S
S/**
S * @brief  Set the Process Stack Pointer
S *
S * @param  uint32_t Process Stack Pointer
S * @return none
S *
S * Assign the value ProcessStackPointer to the MSP 
S * (process stack pointer) Cortex processor register
S */
Sextern void __set_PSP(uint32_t topOfProcStack);
S
S/**
S * @brief  Return the Main Stack Pointer
S *
S * @param  none
S * @return uint32_t Main Stack Pointer
S *
S * Return the current value of the MSP (main stack pointer)
S * Cortex processor register
S */
Sextern uint32_t __get_MSP(void);
S
S/**
S * @brief  Set the Main Stack Pointer
S *
S * @param  uint32_t Main Stack Pointer
S * @return none
S *
S * Assign the value mainStackPointer to the MSP 
S * (main stack pointer) Cortex processor register
S */
Sextern void __set_MSP(uint32_t topOfMainStack);
S
S/**
S * @brief  Return the Base Priority value
S *
S * @param  none
S * @return uint32_t BasePriority
S *
S * Return the content of the base priority register
S */
Sextern uint32_t __get_BASEPRI(void);
S
S/**
S * @brief  Set the Base Priority value
S *
S * @param  uint32_t BasePriority
S * @return none
S *
S * Set the base priority register
S */
Sextern void __set_BASEPRI(uint32_t basePri);
S
S/**
S * @brief  Return the Priority Mask value
S *
S * @param  none
S * @return uint32_t PriMask
S *
S * Return the state of the priority mask bit from the priority mask
S * register
S */
Sextern uint32_t  __get_PRIMASK(void);
S
S/**
S * @brief  Set the Priority Mask value
S *
S * @param  uint32_t PriMask
S * @return none
S *
S * Set the priority mask bit in the priority mask register
S */
Sextern void __set_PRIMASK(uint32_t priMask);
S
S/**
S * @brief  Return the Fault Mask value
S *
S * @param  none
S * @return uint32_t FaultMask
S *
S * Return the content of the fault mask register
S */
Sextern uint32_t __get_FAULTMASK(void);
S
S/**
S * @brief  Set the Fault Mask value
S *
S * @param  uint32_t faultMask value
S * @return none
S *
S * Set the fault mask register
S */
Sextern void __set_FAULTMASK(uint32_t faultMask);
S
S/**
S * @brief  Return the Control Register value
S* 
S*  @param  none
S*  @return uint32_t Control value
S *
S * Return the content of the control register
S */
Sextern uint32_t __get_CONTROL(void);
S
S/**
S * @brief  Set the Control Register value
S *
S * @param  uint32_t Control value
S * @return none
S *
S * Set the control register
S */
Sextern void __set_CONTROL(uint32_t control);
S
S/**
S * @brief  Reverse byte order in integer value
S *
S * @param  uint32_t value to reverse
S * @return uint32_t reversed value
S *
S * Reverse byte order in integer value
S */
Sextern uint32_t __REV(uint32_t value);
S
S/**
S * @brief  Reverse byte order in unsigned short value
S *
S * @param  uint16_t value to reverse
S * @return uint32_t reversed value
S *
S * Reverse byte order in unsigned short value
S */
Sextern uint32_t __REV16(uint16_t value);
S
S/*
S * Reverse byte order in signed short value with sign extension to integer
S *
S * @param  int16_t value to reverse
S * @return int32_t reversed value
S *
S * @brief  Reverse byte order in signed short value with sign extension to integer
S */
Sextern int32_t __REVSH(int16_t value);
S
S/**
S * @brief  Reverse bit order of value
S *
S * @param  uint32_t value to reverse
S * @return uint32_t reversed value
S *
S * Reverse bit order of value
S */
Sextern uint32_t __RBIT(uint32_t value);
S
S/**
S * @brief  LDR Exclusive
S *
S * @param  uint8_t* address
S * @return uint8_t value of (*address)
S *
S * Exclusive LDR command
S */
Sextern uint8_t __LDREXB(uint8_t *addr);
S
S/**
S * @brief  LDR Exclusive
S *
S * @param  uint16_t* address
S * @return uint16_t value of (*address)
S *
S * Exclusive LDR command
S */
Sextern uint16_t __LDREXH(uint16_t *addr);
S
S/**
S * @brief  LDR Exclusive
S *
S * @param  uint32_t* address
S * @return uint32_t value of (*address)
S *
S * Exclusive LDR command
S */
Sextern uint32_t __LDREXW(uint32_t *addr);
S
S/**
S * @brief  STR Exclusive
S *
S * @param  uint8_t *address
S * @param  uint8_t value to store
S * @return uint32_t successful / failed
S *
S * Exclusive STR command
S */
Sextern uint32_t __STREXB(uint8_t value, uint8_t *addr);
S
S/**
S * @brief  STR Exclusive
S *
S * @param  uint16_t *address
S * @param  uint16_t value to store
S * @return uint32_t successful / failed
S *
S * Exclusive STR command
S */
Sextern uint32_t __STREXH(uint16_t value, uint16_t *addr);
S
S/**
S * @brief  STR Exclusive
S *
S * @param  uint32_t *address
S * @param  uint32_t value to store
S * @return uint32_t successful / failed
S *
S * Exclusive STR command
S */
Sextern uint32_t __STREXW(uint32_t value, uint32_t *addr);
S
S
S#elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
S/* TASKING carm specific functions */
S
S/*
S * The CMSIS functions have been implemented as intrinsics in the compiler.
S * Please use "carm -?i" to get an up to date list of all instrinsics,
S * Including the CMSIS ones.
S */
S
N#endif
N
N
N
N/* ##########################   NVIC functions  #################################### */
N
N
N/**
N * @brief  Set the Priority Grouping in NVIC Interrupt Controller
N *
N * @param  uint32_t priority_grouping is priority grouping field
N * @return none 
N *
N * Set the priority grouping field using the required unlock sequence.
N * The parameter priority_grouping is assigned to the field 
N * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
N * In case of a conflict between priority grouping and available
N * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
N */
Nstatic __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
Xstatic __inline void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
N{
N  uint32_t reg_value;
N  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 are used          */
N  
N  reg_value  = SCB->AIRCR;                                                    /* read old register configuration    */
X  reg_value  = ((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR;                                                     
N  reg_value &= ~((0xFFFFU << 16) | (0x0F << 8));                              /* clear bits to change               */
N  reg_value  = ((reg_value | NVIC_AIRCR_VECTKEY | (PriorityGroupTmp << 8)));  /* Insert write key and priorty group */
X  reg_value  = ((reg_value | (0x5FA << 16) | (PriorityGroupTmp << 8)));   
N  SCB->AIRCR = reg_value;
X  ((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR = reg_value;
N}
N
N/**
N * @brief  Get the Priority Grouping from NVIC Interrupt Controller
N *
N * @param  none
N * @return uint32_t   priority grouping field 
N *
N * Get the priority grouping from NVIC Interrupt Controller.
N * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
N */
Nstatic __INLINE uint32_t NVIC_GetPriorityGrouping(void)
Xstatic __inline uint32_t NVIC_GetPriorityGrouping(void)
N{
N  return ((SCB->AIRCR >> 8) & 0x07);                                          /* read priority grouping field */
X  return ((((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR >> 8) & 0x07);                                           
N}
N
N/**
N * @brief  Enable Interrupt in NVIC Interrupt Controller
N *
N * @param  IRQn_Type IRQn specifies the interrupt number
N * @return none 
N *
N * Enable a device specific interupt in the NVIC interrupt controller.
N * The interrupt number cannot be a negative value.
N */
Nstatic __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_EnableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
X  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N/**
N * @brief  Disable the interrupt line for external interrupt specified
N * 
N * @param  IRQn_Type IRQn is the positive number of the external interrupt
N * @return none
N * 
N * Disable a device specific interupt in the NVIC interrupt controller.
N * The interrupt number cannot be a negative value.
N */
Nstatic __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_DisableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
X  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N/**
N * @brief  Read the interrupt pending bit for a device specific interrupt source
N * 
N * @param  IRQn_Type IRQn is the number of the device specifc interrupt
N * @return uint32_t 1 if pending interrupt else 0
N *
N * Read the pending register in NVIC and return 1 if its status is pending, 
N * otherwise it returns 0
N */
Nstatic __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
N{
N  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
X  return((uint32_t) ((((NVIC_Type *) ((0xE000E000) + 0x0100))->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));  
N}
N
N/**
N * @brief  Set the pending bit for an external interrupt
N * 
N * @param  IRQn_Type IRQn is the Number of the interrupt
N * @return none
N *
N * Set the pending bit for the specified interrupt.
N * The interrupt number cannot be a negative value.
N */
Nstatic __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_SetPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
X  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N/**
N * @brief  Clear the pending bit for an external interrupt
N *
N * @param  IRQn_Type IRQn is the Number of the interrupt
N * @return none
N *
N * Clear the pending bit for the specified interrupt. 
N * The interrupt number cannot be a negative value.
N */
Nstatic __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
X  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N/**
N * @brief  Read the active bit for an external interrupt
N *
N * @param  IRQn_Type  IRQn is the Number of the interrupt
N * @return uint32_t   1 if active else 0
N *
N * Read the active register in NVIC and returns 1 if its status is active, 
N * otherwise it returns 0.
N */
Nstatic __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetActive(IRQn_Type IRQn)
N{
N  return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if active else 0 */
X  return((uint32_t)((((NVIC_Type *) ((0xE000E000) + 0x0100))->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));  
N}
N
N/**
N * @brief  Set the priority for an interrupt
N *
N * @param  IRQn_Type IRQn is the Number of the interrupt
N * @param  priority is the priority for the interrupt
N * @return none
N *
N * Set the priority for the specified interrupt. The interrupt 
N * number can be positive to specify an external (device specific) 
N * interrupt, or negative to specify an internal (core) interrupt. \n
N *
N * Note: The priority cannot be set for every core interrupt.
N */
Nstatic __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Xstatic __inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
N{
N  if(IRQn < 0) {
N    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
X    ((SCB_Type *) ((0xE000E000) + 0x0D00))->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - 5)) & 0xff); }  
N  else {
N    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts      */
X    ((NVIC_Type *) ((0xE000E000) + 0x0100))->IP[(uint32_t)(IRQn)] = ((priority << (8 - 5)) & 0xff);    }         
N}
N
N/**
N * @brief  Read the priority for an interrupt
N *
N * @param  IRQn_Type IRQn is the Number of the interrupt
N * @return uint32_t  priority is the priority for the interrupt
N *
N * Read the priority for the specified interrupt. The interrupt 
N * number can be positive to specify an external (device specific) 
N * interrupt, or negative to specify an internal (core) interrupt.
N *
N * The returned priority value is automatically aligned to the implemented
N * priority bits of the microcontroller.
N *
N * Note: The priority cannot be set for every core interrupt.
N */
Nstatic __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPriority(IRQn_Type IRQn)
N{
N
N  if(IRQn < 0) {
N    return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M3 system interrupts */
X    return((uint32_t)(((SCB_Type *) ((0xE000E000) + 0x0D00))->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - 5)));  }  
N  else {
N    return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
X    return((uint32_t)(((NVIC_Type *) ((0xE000E000) + 0x0100))->IP[(uint32_t)(IRQn)]           >> (8 - 5)));  }  
N}
N
N
N/**
N * @brief  Encode the priority for an interrupt
N *
N * @param  uint32_t PriorityGroup   is the used priority group
N * @param  uint32_t PreemptPriority is the preemptive priority value (starting from 0)
N * @param  uint32_t SubPriority     is the sub priority value (starting from 0)
N * @return uint32_t                    the priority for the interrupt
N *
N * Encode the priority for an interrupt with the given priority group,
N * preemptive priority value and sub priority value.
N * In case of a conflict between priority grouping and available
N * priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
N *
N * The returned priority value can be used for NVIC_SetPriority(...) function
N */
Nstatic __INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
Xstatic __inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
X  PreemptPriorityBits = ((7 - PriorityGroupTmp) > 5) ? 5 : 7 - PriorityGroupTmp;
N  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
X  SubPriorityBits     = ((PriorityGroupTmp + 5) < 7) ? 0 : PriorityGroupTmp - 7 + 5;
N 
N  return (
N           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
N           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
N         );
N}
N
N
N/**
N * @brief  Decode the priority of an interrupt
N *
N * @param  uint32_t   Priority       the priority for the interrupt
N * @param  uint32_t   PrioGroup   is the used priority group
N * @param  uint32_t* pPreemptPrio is the preemptive priority value (starting from 0)
N * @param  uint32_t* pSubPrio     is the sub priority value (starting from 0)
N * @return none
N *
N * Decode an interrupt priority value with the given priority group to 
N * preemptive priority value and sub priority value.
N * In case of a conflict between priority grouping and available
N * priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
N *
N * The priority value can be retrieved with NVIC_GetPriority(...) function
N */
Nstatic __INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
Xstatic __inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
X  PreemptPriorityBits = ((7 - PriorityGroupTmp) > 5) ? 5 : 7 - PriorityGroupTmp;
N  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
X  SubPriorityBits     = ((PriorityGroupTmp + 5) < 7) ? 0 : PriorityGroupTmp - 7 + 5;
N  
N  *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
N  *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
N}
N
N
N
N/* ##################################    SysTick function  ############################################ */
N
N#if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
X#if (!1L) || (0 == 0)
N
N/* SysTick constants */
N#define SYSTICK_ENABLE              0                                          /* Config-Bit to start or stop the SysTick Timer                         */
N#define SYSTICK_TICKINT             1                                          /* Config-Bit to enable or disable the SysTick interrupt                 */
N#define SYSTICK_CLKSOURCE           2                                          /* Clocksource has the offset 2 in SysTick Control and Status Register   */
N#define SYSTICK_MAXCOUNT       ((1<<24) -1)                                    /* SysTick MaxCount                                                      */
N
N/**
N * @brief  Initialize and start the SysTick counter and its interrupt.
N *
N * @param  uint32_t ticks is the number of ticks between two interrupts
N * @return  none
N *
N * Initialise the system tick timer and its interrupt and start the
N * system tick timer / counter in free running mode to generate 
N * periodical interrupts.
N */
Nstatic __INLINE uint32_t SysTick_Config(uint32_t ticks)
Xstatic __inline uint32_t SysTick_Config(uint32_t ticks)
N{ 
N  if (ticks > SYSTICK_MAXCOUNT)  return (1);                                             /* Reload value impossible */
X  if (ticks > ((1<<24) -1))  return (1);                                              
N
N  SysTick->LOAD  =  (ticks & SYSTICK_MAXCOUNT) - 1;                                      /* set reload register */
X  ((SysTick_Type *) ((0xE000E000) + 0x0010))->LOAD  =  (ticks & ((1<<24) -1)) - 1;                                       
N  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);                            /* set Priority for Cortex-M0 System Interrupts */
X  NVIC_SetPriority (SysTick_IRQn, (1<<5) - 1);                             
N  SysTick->VAL   =  (0x00);                                                              /* Load the SysTick Counter Value */
X  ((SysTick_Type *) ((0xE000E000) + 0x0010))->VAL   =  (0x00);                                                               
N  SysTick->CTRL = (1 << SYSTICK_CLKSOURCE) | (1<<SYSTICK_ENABLE) | (1<<SYSTICK_TICKINT); /* Enable SysTick IRQ and SysTick Timer */
X  ((SysTick_Type *) ((0xE000E000) + 0x0010))->CTRL = (1 << 2) | (1<<0) | (1<<1);  
N  return (0);                                                                            /* Function successful */
N}
N
N#endif
N
N
N
N
N
N/* ##################################    Reset function  ############################################ */
N
N/**
N * @brief  Initiate a system reset request.
N *
N * @param   none
N * @return  none
N *
N * Initialize a system reset request to reset the MCU
N */
Nstatic __INLINE void NVIC_SystemReset(void)
Xstatic __inline void NVIC_SystemReset(void)
N{
N  SCB->AIRCR  = (NVIC_AIRCR_VECTKEY | (SCB->AIRCR & (0x700)) | (1<<NVIC_SYSRESETREQ)); /* Keep priority group unchanged */
X  ((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR  = ((0x5FA << 16) | (((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR & (0x700)) | (1<<2));  
N  __DSB();                                                                             /* Ensure completion of memory access */              
X  __dsb(0);                                                                                            
N  while(1);                                                                            /* wait until reset */
N}
N
N
N/* ##################################    Debug Output  function  ############################################ */
N
N
N/**
N * @brief  Outputs a character via the ITM channel 0
N *
N * @param   uint32_t character to output
N * @return  uint32_t input character
N *
N * The function outputs a character via the ITM channel 0. 
N * The function returns when no debugger is connected that has booked the output.  
N * It is blocking when a debugger is connected, but the previous character send is not transmitted. 
N */
Nstatic __INLINE uint32_t ITM_SendChar (uint32_t ch)
Xstatic __inline uint32_t ITM_SendChar (uint32_t ch)
N{
N  if (ch == '\n') ITM_SendChar('\r');
N  
N  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA)  &&
X  if ((((CoreDebug_Type *) (0xE000EDF0))->DEMCR & (1 << 24))  &&
N      (ITM->TCR & ITM_TCR_ITMENA)                  &&
X      (((ITM_Type *) (0xE0000000))->TCR & 1)                  &&
N      (ITM->TER & (1UL << 0))  ) 
X      (((ITM_Type *) (0xE0000000))->TER & (1UL << 0))  ) 
N  {
N    while (ITM->PORT[0].u32 == 0);
X    while (((ITM_Type *) (0xE0000000))->PORT[0].u32 == 0);
N    ITM->PORT[0].u8 = (uint8_t) ch;
X    ((ITM_Type *) (0xE0000000))->PORT[0].u8 = (uint8_t) ch;
N  }  
N  return (ch);
N}
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CM3_CORE_H__ */
N
N/*lint -restore */
L 105 "LPC17xx.h" 2
N#include "system_LPC17xx.h"                 /* System Header                                      */
L 1 "system_LPC17xx.h" 1
N/**************************************************************************//**
N * @file     system_LPC17xx.h
N * @brief    CMSIS Cortex-M3 Device System Header File for
N *           NXP LPC17xx Device Series
N * @version  V1.10
N * @date     06. April 2011
N *
N * @note
N * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
N *
N * @par
N * ARM Limited (ARM) is supplying this software for use with Cortex-M
N * processor based microcontrollers.  This file can be freely distributed
N * within development tools that are supporting such ARM based processors.
N *
N * @par
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N
N
N#ifndef __SYSTEM_LPC17xx_H
N#define __SYSTEM_LPC17xx_H
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include <stdint.h>
N
N/** @addtogroup LPC17xx_System
N * @{
N */
N
Nextern uint32_t SystemFrequency;     /*!< System Clock Frequency (Core Clock)  */
N
N
N/**
N * Initialize the system
N *
N * @param  none
N * @return none
N *
N * @brief  Setup the microcontroller system.
N *         Initialize the System.
N */
Nextern void SystemInit (void);
N
N/**
N * Update SystemCoreClock variable
N *
N * @param  none
N * @return none
N *
N * @brief  Updates the SystemCoreClock with current core Clock
N *         retrieved from cpu registers.
N */
Nextern void SystemCoreClockUpdate (void);
N
N#ifdef __cplusplus
S}
N#endif
N
N/**
N * @}
N */
N
N#endif /* __SYSTEM_LPC17xx_H */
L 106 "LPC17xx.h" 2
N
N
N/******************************************************************************/
N/*                Device Specific Peripheral registers structures             */
N/******************************************************************************/
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/*------------- System Control (SC) ------------------------------------------*/
N/** @brief System Control (SC) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t FLASHCFG;                   /*!< Offset: 0x000 (R/W)  Flash Accelerator Configuration Register */
X  volatile uint32_t FLASHCFG;                    
N       uint32_t RESERVED0[31];
N  __IO uint32_t PLL0CON;                    /*!< Offset: 0x080 (R/W)  PLL0 Control Register */
X  volatile uint32_t PLL0CON;                     
N  __IO uint32_t PLL0CFG;                    /*!< Offset: 0x084 (R/W)  PLL0 Configuration Register */
X  volatile uint32_t PLL0CFG;                     
N  __I  uint32_t PLL0STAT;                   /*!< Offset: 0x088 (R/ )  PLL0 Status Register */
X  volatile const  uint32_t PLL0STAT;                    
N  __O  uint32_t PLL0FEED;                   /*!< Offset: 0x08C ( /W)  PLL0 Feed Register */
X  volatile  uint32_t PLL0FEED;                    
N       uint32_t RESERVED1[4];
N  __IO uint32_t PLL1CON;                    /*!< Offset: 0x0A0 (R/W)  PLL1 Control Register */
X  volatile uint32_t PLL1CON;                     
N  __IO uint32_t PLL1CFG;                    /*!< Offset: 0x0A4 (R/W)  PLL1 Configuration Register */
X  volatile uint32_t PLL1CFG;                     
N  __I  uint32_t PLL1STAT;                   /*!< Offset: 0x0A8 (R/ )  PLL1 Status Register */
X  volatile const  uint32_t PLL1STAT;                    
N  __O  uint32_t PLL1FEED;                   /*!< Offset: 0x0AC ( /W)  PLL1 Feed Register */
X  volatile  uint32_t PLL1FEED;                    
N       uint32_t RESERVED2[4];
N  __IO uint32_t PCON;                       /*!< Offset: 0x0C0 (R/W)  Power Control Register */
X  volatile uint32_t PCON;                        
N  __IO uint32_t PCONP;                      /*!< Offset: 0x0C4 (R/W)  Power Control for Peripherals Register */
X  volatile uint32_t PCONP;                       
N       uint32_t RESERVED3[15];
N  __IO uint32_t CCLKCFG;                    /*!< Offset: 0x104 (R/W)  CPU Clock Configure Register  */
X  volatile uint32_t CCLKCFG;                     
N  __IO uint32_t USBCLKCFG;                  /*!< Offset: 0x108 (R/W)  USB Clock Configure Register */
X  volatile uint32_t USBCLKCFG;                   
N  __IO uint32_t CLKSRCSEL;                  /*!< Offset: 0x10C (R/W)  Clock Source Select Register */
X  volatile uint32_t CLKSRCSEL;                   
N  __IO uint32_t CANSLEEPCLR;                /*!< Offset: 0x110 (R/W)  CAN Sleep Clear Register */
X  volatile uint32_t CANSLEEPCLR;                 
N  __IO uint32_t CANWAKEFLAGS;               /*!< Offset: 0x114 (R/W)  CAN Wake-up Flags Register */
X  volatile uint32_t CANWAKEFLAGS;                
N       uint32_t RESERVED4[10];
N  __IO uint32_t EXTINT;                     /*!< Offset: 0x140 (R/W)  External Interrupt Flag Register */
X  volatile uint32_t EXTINT;                      
N       uint32_t RESERVED5[1];
N  __IO uint32_t EXTMODE;                    /*!< Offset: 0x148 (R/W)  External Interrupt Mode Register */
X  volatile uint32_t EXTMODE;                     
N  __IO uint32_t EXTPOLAR;                   /*!< Offset: 0x14C (R/W)  External Interrupt Polarity Register */
X  volatile uint32_t EXTPOLAR;                    
N       uint32_t RESERVED6[12];
N  __IO uint32_t RSID;                       /*!< Offset: 0x180 (R/W)  Reset Source Identification Register */
X  volatile uint32_t RSID;                        
N       uint32_t RESERVED7[7];
N  __IO uint32_t SCS;                        /*!< Offset: 0x1A0 (R/W)  System Controls and Status Register */
X  volatile uint32_t SCS;                         
N  __IO uint32_t IRCTRIM;                /* Clock Dividers                     */
X  volatile uint32_t IRCTRIM;                 
N  __IO uint32_t PCLKSEL0;                   /*!< Offset: 0x1A8 (R/W)  Peripheral Clock Select 0 Register */
X  volatile uint32_t PCLKSEL0;                    
N  __IO uint32_t PCLKSEL1;                   /*!< Offset: 0x1AC (R/W)  Peripheral Clock Select 1 Register */
X  volatile uint32_t PCLKSEL1;                    
N       uint32_t RESERVED8[4];
N  __IO uint32_t USBIntSt;                   /*!< Offset: 0x1C0 (R/W)  USB Interrupt Status Register */
X  volatile uint32_t USBIntSt;                    
N  __IO uint32_t DMAREQSEL;                  /*!< Offset: 0x1C4 (R/W)  DMA Request Select Register */
X  volatile uint32_t DMAREQSEL;                   
N  __IO uint32_t CLKOUTCFG;                  /*!< Offset: 0x1C8 (R/W)  Clock Output Configuration Register */
X  volatile uint32_t CLKOUTCFG;                   
N
N } LPC_SC_TypeDef;
N
N/*------------- Pin Connect Block (PINCON) -----------------------------------*/
N/** @brief Pin Connect Block (PINCON) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t PINSEL0;				 /* !< Offset: 0x000 PIN Select0 (R/W) */
X  volatile uint32_t PINSEL0;				  
N  __IO uint32_t PINSEL1;				 /* !< Offset: 0x004 PIN Select1 (R/W) */
X  volatile uint32_t PINSEL1;				  
N  __IO uint32_t PINSEL2;				 /* !< Offset: 0x008 PIN Select2 (R/W) */
X  volatile uint32_t PINSEL2;				  
N  __IO uint32_t PINSEL3;				 /* !< Offset: 0x00C PIN Select3 (R/W) */
X  volatile uint32_t PINSEL3;				  
N  __IO uint32_t PINSEL4;				 /* !< Offset: 0x010 PIN Select4 (R/W) */
X  volatile uint32_t PINSEL4;				  
N  __IO uint32_t PINSEL5;				 /* !< Offset: 0x014 PIN Select5 (R/W) */
X  volatile uint32_t PINSEL5;				  
N  __IO uint32_t PINSEL6;				 /* !< Offset: 0x018 PIN Select6 (R/W) */
X  volatile uint32_t PINSEL6;				  
N  __IO uint32_t PINSEL7;				 /* !< Offset: 0x01C PIN Select7 (R/W) */
X  volatile uint32_t PINSEL7;				  
N  __IO uint32_t PINSEL8;				 /* !< Offset: 0x020 PIN Select8 (R/W) */
X  volatile uint32_t PINSEL8;				  
N  __IO uint32_t PINSEL9;				 /* !< Offset: 0x024 PIN Select9 (R/W) */
X  volatile uint32_t PINSEL9;				  
N  __IO uint32_t PINSEL10;				 /* !< Offset: 0x028 PIN Select20 (R/W) */
X  volatile uint32_t PINSEL10;				  
N       uint32_t RESERVED0[5];
N  __IO uint32_t PINMODE0;				 /* !< Offset: 0x040 PIN Mode0 (R/W) */
X  volatile uint32_t PINMODE0;				  
N  __IO uint32_t PINMODE1;				 /* !< Offset: 0x044 PIN Mode1 (R/W) */
X  volatile uint32_t PINMODE1;				  
N  __IO uint32_t PINMODE2;				 /* !< Offset: 0x048 PIN Mode2 (R/W) */
X  volatile uint32_t PINMODE2;				  
N  __IO uint32_t PINMODE3;				 /* !< Offset: 0x04C PIN Mode3 (R/W) */
X  volatile uint32_t PINMODE3;				  
N  __IO uint32_t PINMODE4;				 /* !< Offset: 0x050 PIN Mode4 (R/W) */
X  volatile uint32_t PINMODE4;				  
N  __IO uint32_t PINMODE5;				 /* !< Offset: 0x054 PIN Mode5 (R/W) */
X  volatile uint32_t PINMODE5;				  
N  __IO uint32_t PINMODE6;				 /* !< Offset: 0x058 PIN Mode6 (R/W) */
X  volatile uint32_t PINMODE6;				  
N  __IO uint32_t PINMODE7;				 /* !< Offset: 0x05C PIN Mode7 (R/W) */
X  volatile uint32_t PINMODE7;				  
N  __IO uint32_t PINMODE8;				 /* !< Offset: 0x060 PIN Mode8 (R/W) */
X  volatile uint32_t PINMODE8;				  
N  __IO uint32_t PINMODE9;				 /* !< Offset: 0x064 PIN Mode9 (R/W) */
X  volatile uint32_t PINMODE9;				  
N  __IO uint32_t PINMODE_OD0;			 /* !< Offset: 0x068 Open Drain PIN Mode0 (R/W) */
X  volatile uint32_t PINMODE_OD0;			  
N  __IO uint32_t PINMODE_OD1;			 /* !< Offset: 0x06C Open Drain PIN Mode1 (R/W) */
X  volatile uint32_t PINMODE_OD1;			  
N  __IO uint32_t PINMODE_OD2;			 /* !< Offset: 0x070 Open Drain PIN Mode2 (R/W) */
X  volatile uint32_t PINMODE_OD2;			  
N  __IO uint32_t PINMODE_OD3;			 /* !< Offset: 0x074 Open Drain PIN Mode3 (R/W) */
X  volatile uint32_t PINMODE_OD3;			  
N  __IO uint32_t PINMODE_OD4;			 /* !< Offset: 0x078 Open Drain PIN Mode4 (R/W) */
X  volatile uint32_t PINMODE_OD4;			  
N  __IO uint32_t I2CPADCFG;				 /* !< Offset: 0x07C I2C Pad Configure (R/W) */
X  volatile uint32_t I2CPADCFG;				  
N} LPC_PINCON_TypeDef;
N
N/*------------- General Purpose Input/Output (GPIO) --------------------------*/
N/** @brief General Purpose Input/Output (GPIO) register structure definition */
Ntypedef struct
N{
N  union {
N    __IO uint32_t FIODIR;				 /* !< Offset: 0x00 Port direction (R/W) */
X    volatile uint32_t FIODIR;				  
N    struct {
N      __IO uint16_t FIODIRL;
X      volatile uint16_t FIODIRL;
N      __IO uint16_t FIODIRH;
X      volatile uint16_t FIODIRH;
N    };
N    struct {
N      __IO uint8_t  FIODIR0;
X      volatile uint8_t  FIODIR0;
N      __IO uint8_t  FIODIR1;
X      volatile uint8_t  FIODIR1;
N      __IO uint8_t  FIODIR2;
X      volatile uint8_t  FIODIR2;
N      __IO uint8_t  FIODIR3;
X      volatile uint8_t  FIODIR3;
N    };
N  };
N  uint32_t RESERVED0[3];
N  union {
N    __IO uint32_t FIOMASK;				 /* !< Offset: 0x10 Port mask (R/W) */
X    volatile uint32_t FIOMASK;				  
N    struct {
N      __IO uint16_t FIOMASKL;
X      volatile uint16_t FIOMASKL;
N      __IO uint16_t FIOMASKH;
X      volatile uint16_t FIOMASKH;
N    };
N    struct {
N      __IO uint8_t  FIOMASK0;
X      volatile uint8_t  FIOMASK0;
N      __IO uint8_t  FIOMASK1;
X      volatile uint8_t  FIOMASK1;
N      __IO uint8_t  FIOMASK2;
X      volatile uint8_t  FIOMASK2;
N      __IO uint8_t  FIOMASK3;
X      volatile uint8_t  FIOMASK3;
N    };
N  };
N  union {
N    __IO uint32_t FIOPIN;				 /* !< Offset: 0x14 Port value (R/W) */
X    volatile uint32_t FIOPIN;				  
N    struct {
N      __IO uint16_t FIOPINL;
X      volatile uint16_t FIOPINL;
N      __IO uint16_t FIOPINH;
X      volatile uint16_t FIOPINH;
N    };
N    struct {
N      __IO uint8_t  FIOPIN0;
X      volatile uint8_t  FIOPIN0;
N      __IO uint8_t  FIOPIN1;
X      volatile uint8_t  FIOPIN1;
N      __IO uint8_t  FIOPIN2;
X      volatile uint8_t  FIOPIN2;
N      __IO uint8_t  FIOPIN3;
X      volatile uint8_t  FIOPIN3;
N    };
N  };
N  union {
N    __IO uint32_t FIOSET;				 /* !< Offset: 0x18 Port output set (R/W) */
X    volatile uint32_t FIOSET;				  
N    struct {
N      __IO uint16_t FIOSETL;
X      volatile uint16_t FIOSETL;
N      __IO uint16_t FIOSETH;
X      volatile uint16_t FIOSETH;
N    };
N    struct {
N      __IO uint8_t  FIOSET0;
X      volatile uint8_t  FIOSET0;
N      __IO uint8_t  FIOSET1;
X      volatile uint8_t  FIOSET1;
N      __IO uint8_t  FIOSET2;
X      volatile uint8_t  FIOSET2;
N      __IO uint8_t  FIOSET3;
X      volatile uint8_t  FIOSET3;
N    };
N  };
N  union {
N    __O  uint32_t FIOCLR;				 /* !< Offset: 0x1C Port output clear (R/W) */
X    volatile  uint32_t FIOCLR;				  
N    struct {
N      __O  uint16_t FIOCLRL;
X      volatile  uint16_t FIOCLRL;
N      __O  uint16_t FIOCLRH;
X      volatile  uint16_t FIOCLRH;
N    };
N    struct {
N      __O  uint8_t  FIOCLR0;
X      volatile  uint8_t  FIOCLR0;
N      __O  uint8_t  FIOCLR1;
X      volatile  uint8_t  FIOCLR1;
N      __O  uint8_t  FIOCLR2;
X      volatile  uint8_t  FIOCLR2;
N      __O  uint8_t  FIOCLR3;
X      volatile  uint8_t  FIOCLR3;
N    };
N  };
N} LPC_GPIO_TypeDef;
N
N/** @brief General Purpose Input/Output interrupt (GPIOINT) register structure definition */
Ntypedef struct
N{
N  __I  uint32_t IntStatus;                  /*!< Offset: 0x000 (R/ )  GPIO overall Interrupt Status Register */
X  volatile const  uint32_t IntStatus;                   
N  __I  uint32_t IO0IntStatR;                /*!< Offset: 0x004 (R/ )  GPIO Interrupt Status Register 0 for Rising edge */
X  volatile const  uint32_t IO0IntStatR;                 
N  __I  uint32_t IO0IntStatF;                /*!< Offset: 0x008 (R/ )  GPIO Interrupt Status Register 0 for Falling edge */
X  volatile const  uint32_t IO0IntStatF;                 
N  __O  uint32_t IO0IntClr;                  /*!< Offset: 0x00C (R/W)  GPIO Interrupt Clear  Register 0 */
X  volatile  uint32_t IO0IntClr;                   
N  __IO uint32_t IO0IntEnR;                  /*!< Offset: 0x010 ( /W)  GPIO Interrupt Enable Register 0 for Rising edge */
X  volatile uint32_t IO0IntEnR;                   
N  __IO uint32_t IO0IntEnF;                  /*!< Offset: 0x014 (R/W)  GPIO Interrupt Enable Register 0 for Falling edge */
X  volatile uint32_t IO0IntEnF;                   
N       uint32_t RESERVED0[3];
N  __I  uint32_t IO2IntStatR;                /*!< Offset: 0x000 (R/ )  GPIO Interrupt Status Register 2 for Rising edge */
X  volatile const  uint32_t IO2IntStatR;                 
N  __I  uint32_t IO2IntStatF;                /*!< Offset: 0x000 (R/ )  GPIO Interrupt Status Register 2 for Falling edge */
X  volatile const  uint32_t IO2IntStatF;                 
N  __O  uint32_t IO2IntClr;                  /*!< Offset: 0x000 ( /W)  GPIO Interrupt Clear  Register 2 */
X  volatile  uint32_t IO2IntClr;                   
N  __IO uint32_t IO2IntEnR;                  /*!< Offset: 0x000 (R/W)  GPIO Interrupt Enable Register 2 for Rising edge */
X  volatile uint32_t IO2IntEnR;                   
N  __IO uint32_t IO2IntEnF;                  /*!< Offset: 0x000 (R/W)  GPIO Interrupt Enable Register 2 for Falling edge */
X  volatile uint32_t IO2IntEnF;                   
N} LPC_GPIOINT_TypeDef;
N
N/*------------- Timer (TIM) --------------------------------------------------*/
N/** @brief Timer (TIM) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t IR;                         /*!< Offset: 0x000 (R/W)  Interrupt Register */
X  volatile uint32_t IR;                          
N  __IO uint32_t TCR;                        /*!< Offset: 0x004 (R/W)  Timer Control Register */
X  volatile uint32_t TCR;                         
N  __IO uint32_t TC;                         /*!< Offset: 0x008 (R/W)  Timer Counter Register */
X  volatile uint32_t TC;                          
N  __IO uint32_t PR;                         /*!< Offset: 0x00C (R/W)  Prescale Register */
X  volatile uint32_t PR;                          
N  __IO uint32_t PC;                         /*!< Offset: 0x010 (R/W)  Prescale Counter Register */
X  volatile uint32_t PC;                          
N  __IO uint32_t MCR;                        /*!< Offset: 0x014 (R/W)  Match Control Register */
X  volatile uint32_t MCR;                         
N  __IO uint32_t MR0;                        /*!< Offset: 0x018 (R/W)  Match Register 0 */
X  volatile uint32_t MR0;                         
N  __IO uint32_t MR1;                        /*!< Offset: 0x01C (R/W)  Match Register 1 */
X  volatile uint32_t MR1;                         
N  __IO uint32_t MR2;                        /*!< Offset: 0x020 (R/W)  Match Register 2 */
X  volatile uint32_t MR2;                         
N  __IO uint32_t MR3;                        /*!< Offset: 0x024 (R/W)  Match Register 3 */
X  volatile uint32_t MR3;                         
N  __IO uint32_t CCR;                        /*!< Offset: 0x028 (R/W)  Capture Control Register */
X  volatile uint32_t CCR;                         
N  __I  uint32_t CR0;                        /*!< Offset: 0x02C (R/ )  Capture Register 0 */
X  volatile const  uint32_t CR0;                         
N  __I  uint32_t CR1;                        /*!< Offset: 0x030 (R/ )  Capture Register */
X  volatile const  uint32_t CR1;                         
N       uint32_t RESERVED0[2];
N  __IO uint32_t EMR;                        /*!< Offset: 0x03C (R/W)  External Match Register */
X  volatile uint32_t EMR;                         
N       uint32_t RESERVED1[12];
N  __IO uint32_t CTCR;                       /*!< Offset: 0x070 (R/W)  Count Control Register */
X  volatile uint32_t CTCR;                        
N} LPC_TIM_TypeDef;
N
N/*------------- Pulse-Width Modulation (PWM) ---------------------------------*/
N/** @brief Pulse-Width Modulation (PWM) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t IR;                         /*!< Offset: 0x000 (R/W)  Interrupt Register */
X  volatile uint32_t IR;                          
N  __IO uint32_t TCR;                        /*!< Offset: 0x004 (R/W)  Timer Control Register. Register */
X  volatile uint32_t TCR;                         
N  __IO uint32_t TC;                         /*!< Offset: 0x008 (R/W)  Timer Counter Register */
X  volatile uint32_t TC;                          
N  __IO uint32_t PR;                         /*!< Offset: 0x00C (R/W)  Prescale Register */
X  volatile uint32_t PR;                          
N  __IO uint32_t PC;                         /*!< Offset: 0x010 (R/W)  Prescale Counter Register */
X  volatile uint32_t PC;                          
N  __IO uint32_t MCR;                        /*!< Offset: 0x014 (R/W)  Match Control Register */
X  volatile uint32_t MCR;                         
N  __IO uint32_t MR0;                        /*!< Offset: 0x018 (R/W)  Match Register 0 */
X  volatile uint32_t MR0;                         
N  __IO uint32_t MR1;                        /*!< Offset: 0x01C (R/W)  Match Register 1 */
X  volatile uint32_t MR1;                         
N  __IO uint32_t MR2;                        /*!< Offset: 0x020 (R/W)  Match Register 2 */
X  volatile uint32_t MR2;                         
N  __IO uint32_t MR3;                        /*!< Offset: 0x024 (R/W)  Match Register 3 */
X  volatile uint32_t MR3;                         
N  __IO uint32_t CCR;                        /*!< Offset: 0x028 (R/W)  Capture Control Register */
X  volatile uint32_t CCR;                         
N  __I  uint32_t CR0;                        /*!< Offset: 0x02C (R/ )  Capture Register 0 */
X  volatile const  uint32_t CR0;                         
N  __I  uint32_t CR1;                        /*!< Offset: 0x030 (R/ )  Capture Register 1 */
X  volatile const  uint32_t CR1;                         
N  __I  uint32_t CR2;                        /*!< Offset: 0x034 (R/ )  Capture Register 2 */
X  volatile const  uint32_t CR2;                         
N  __I  uint32_t CR3;                        /*!< Offset: 0x038 (R/ )  Capture Register 3 */
X  volatile const  uint32_t CR3;                         
N       uint32_t RESERVED0;
N  __IO uint32_t MR4;                        /*!< Offset: 0x040 (R/W)  Match Register 4 */
X  volatile uint32_t MR4;                         
N  __IO uint32_t MR5;                        /*!< Offset: 0x044 (R/W)  Match Register 5 */
X  volatile uint32_t MR5;                         
N  __IO uint32_t MR6;                        /*!< Offset: 0x048 (R/W)  Match Register 6 */
X  volatile uint32_t MR6;                         
N  __IO uint32_t PCR;                        /*!< Offset: 0x04C (R/W)  PWM Control Register */
X  volatile uint32_t PCR;                         
N  __IO uint32_t LER;                        /*!< Offset: 0x050 (R/W)  Load Enable Register */
X  volatile uint32_t LER;                         
N       uint32_t RESERVED1[7];
N  __IO uint32_t CTCR;                       /*!< Offset: 0x070 (R/W)  Count Control Register */
X  volatile uint32_t CTCR;                        
N} LPC_PWM_TypeDef;
N
N/*------------- Universal Asynchronous Receiver Transmitter (UART) -----------*/
N/** @brief  Universal Asynchronous Receiver Transmitter (UART) register structure definition */
Ntypedef struct
N{
N  union {
N  __I  uint32_t RBR;                   /*!< Offset: 0x000 Receiver Buffer  Register (R/ ) */
X  volatile const  uint32_t RBR;                    
N  __O  uint32_t THR;                   /*!< Offset: 0x000 Transmit Holding Register ( /W) */
X  volatile  uint32_t THR;                    
N  __IO uint32_t DLL;                   /*!< Offset: 0x000 Divisor Latch LSB (R/W) */
X  volatile uint32_t DLL;                    
N  };
N  union {
N  __IO uint32_t DLM;                   /*!< Offset: 0x004 Divisor Latch MSB (R/W) */
X  volatile uint32_t DLM;                    
N  __IO uint32_t IER;                   /*!< Offset: 0x004 Interrupt Enable Register (R/W) */
X  volatile uint32_t IER;                    
N  };
N  union {
N  __I  uint32_t IIR;                   /*!< Offset: 0x008 Interrupt ID Register (R/ ) */
X  volatile const  uint32_t IIR;                    
N  __O  uint32_t FCR;                   /*!< Offset: 0x008 FIFO Control Register ( /W) */
X  volatile  uint32_t FCR;                    
N  };
N  __IO uint32_t LCR;                   /*!< Offset: 0x00C Line Control Register (R/W) */
X  volatile uint32_t LCR;                    
N       uint32_t RESERVED0;
N  __I  uint32_t LSR;                   /*!< Offset: 0x014 Line Status Register (R/ ) */
X  volatile const  uint32_t LSR;                    
N       uint32_t RESERVED1;
N  __IO uint32_t SCR;                   /*!< Offset: 0x01C Scratch Pad Register (R/W) */
X  volatile uint32_t SCR;                    
N  __IO uint32_t ACR;                   /*!< Offset: 0x020 Auto-baud Control Register (R/W) */
X  volatile uint32_t ACR;                    
N  __IO uint32_t ICR;                   /*!< Offset: 0x024 IrDA Control Register (R/W) */
X  volatile uint32_t ICR;                    
N  __IO uint32_t FDR;                   /*!< Offset: 0x028 Fractional Divider Register (R/W) */
X  volatile uint32_t FDR;                    
N       uint32_t RESERVED2;
N  __IO uint32_t TER;                   /*!< Offset: 0x030 Transmit Enable Register (R/W) */
X  volatile uint32_t TER;                    
N} LPC_UART_TypeDef;
N
N/** @brief  Universal Asynchronous Receiver Transmitter 0 (UART0) register structure definition */
Ntypedef struct
N{
N  union {
N  __I  uint32_t  RBR;                   /*!< Offset: 0x000 Receiver Buffer  Register (R/ ) */
X  volatile const  uint32_t  RBR;                    
N  __O  uint32_t  THR;                   /*!< Offset: 0x000 Transmit Holding Register ( /W) */
X  volatile  uint32_t  THR;                    
N  __IO uint32_t  DLL;                   /*!< Offset: 0x000 Divisor Latch LSB (R/W) */
X  volatile uint32_t  DLL;                    
N  };
N  union {
N  __IO uint32_t  DLM;                   /*!< Offset: 0x004 Divisor Latch MSB (R/W) */
X  volatile uint32_t  DLM;                    
N  __IO uint32_t  IER;                   /*!< Offset: 0x000 Interrupt Enable Register (R/W) */
X  volatile uint32_t  IER;                    
N  };
N  union {
N  __I  uint32_t  IIR;                   /*!< Offset: 0x008 Interrupt ID Register (R/ ) */
X  volatile const  uint32_t  IIR;                    
N  __O  uint32_t  FCR;                   /*!< Offset: 0x008 FIFO Control Register ( /W) */
X  volatile  uint32_t  FCR;                    
N  };
N  __IO uint32_t  LCR;                   /*!< Offset: 0x00C Line Control Register (R/W) */
X  volatile uint32_t  LCR;                    
N  __IO uint32_t  MCR;                   /*!< Offset: 0x010 Modem control Register (R/W) */
X  volatile uint32_t  MCR;                    
N  __I  uint32_t  LSR;                   /*!< Offset: 0x014 Line Status Register (R/ ) */
X  volatile const  uint32_t  LSR;                    
N  __I  uint32_t  MSR;                   /*!< Offset: 0x018 Modem status Register (R/ ) */
X  volatile const  uint32_t  MSR;                    
N  __IO uint32_t  SCR;                   /*!< Offset: 0x01C Scratch Pad Register (R/W) */
X  volatile uint32_t  SCR;                    
N  __IO uint32_t  ACR;                   /*!< Offset: 0x020 Auto-baud Control Register (R/W) */
X  volatile uint32_t  ACR;                    
N       uint32_t  RESERVED0;
N  __IO uint32_t  FDR;                   /*!< Offset: 0x028 Fractional Divider Register (R/W) */
X  volatile uint32_t  FDR;                    
N       uint32_t  RESERVED1;
N  __IO uint32_t  TER;                   /*!< Offset: 0x030 Transmit Enable Register (R/W) */
X  volatile uint32_t  TER;                    
N       uint32_t  RESERVED2[6];
N  __IO uint32_t  RS485CTRL;             /*!< Offset: 0x04C RS-485/EIA-485 Control Register (R/W) */
X  volatile uint32_t  RS485CTRL;              
N  __IO uint32_t  ADRMATCH;              /*!< Offset: 0x050 RS-485/EIA-485 address match Register (R/W) */
X  volatile uint32_t  ADRMATCH;               
N  __IO uint32_t  RS485DLY;              /*!< Offset: 0x054 RS-485/EIA-485 direction control delay Register (R/W) */
X  volatile uint32_t  RS485DLY;               
N} LPC_UART1_TypeDef;
N
N/*------------- Serial Peripheral Interface (SPI) ----------------------------*/
N/** @brief  Serial Peripheral Interface (SPI) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t SPCR;                       /*!< Offset: 0x000 SPI Control Register (R/W) */
X  volatile uint32_t SPCR;                        
N  __I  uint32_t SPSR;                       /*!< Offset: 0x004 SPI Status Register (R/) */
X  volatile const  uint32_t SPSR;                        
N  __IO uint32_t SPDR;                       /*!< Offset: 0x008 SPI Data Register (R/W) */
X  volatile uint32_t SPDR;                        
N  __IO uint32_t SPCCR;                      /*!< Offset: 0x00C SPI Clock Counter Register (R/W) */
X  volatile uint32_t SPCCR;                       
N       uint32_t RESERVED0[3];
N  __IO uint32_t SPINT;                      /*!< Offset: 0x01C SPI Interrupt Flag Register (R/W) */
X  volatile uint32_t SPINT;                       
N} LPC_SPI_TypeDef;
N
N/*------------- Synchronous Serial Communication (SSP) -----------------------*/
N/** @brief  Synchronous Serial Communication (SSP) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t CR0;                        /*!< Offset: 0x000 (R/W)  Control Register 0 */
X  volatile uint32_t CR0;                         
N  __IO uint32_t CR1;                        /*!< Offset: 0x004 (R/W)  Control Register 1 */
X  volatile uint32_t CR1;                         
N  __IO uint32_t DR;                         /*!< Offset: 0x008 (R/W)  Data Register */
X  volatile uint32_t DR;                          
N  __I  uint32_t SR;                         /*!< Offset: 0x00C (R/ )  Status Register */
X  volatile const  uint32_t SR;                          
N  __IO uint32_t CPSR;                       /*!< Offset: 0x010 (R/W)  Clock Prescale Register */
X  volatile uint32_t CPSR;                        
N  __IO uint32_t IMSC;                       /*!< Offset: 0x014 (R/W)  Interrupt Mask Set and Clear Register */
X  volatile uint32_t IMSC;                        
N  __IO uint32_t RIS;                        /*!< Offset: 0x018 (R/W)  Raw Interrupt Status Register */
X  volatile uint32_t RIS;                         
N  __IO uint32_t MIS;                        /*!< Offset: 0x01C (R/W)  Masked Interrupt Status Register */
X  volatile uint32_t MIS;                         
N  __IO uint32_t ICR;                        /*!< Offset: 0x020 (R/W)  SSPICR Interrupt Clear Register */
X  volatile uint32_t ICR;                         
N  __IO uint32_t DMACR;                      /*!< Offset: 0x024 (R/W)  DMA Control Register */
X  volatile uint32_t DMACR;                       
N} LPC_SSP_TypeDef;
N
N/*------------- Inter-Integrated Circuit (I2C) -------------------------------*/
N/** @brief  Inter-Integrated Circuit (I2C) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t CONSET;                     /*!< Offset: 0x000 (R/W)  I2C Control Set Register */
X  volatile uint32_t CONSET;                      
N  __I  uint32_t STAT;                       /*!< Offset: 0x004 (R/ )  I2C Status Register */
X  volatile const  uint32_t STAT;                        
N  __IO uint32_t DAT;                        /*!< Offset: 0x008 (R/W)  I2C Data Register */
X  volatile uint32_t DAT;                         
N  __IO uint32_t ADR0;                       /*!< Offset: 0x00C (R/W)  I2C Slave Address Register 0 */
X  volatile uint32_t ADR0;                        
N  __IO uint32_t SCLH;                       /*!< Offset: 0x010 (R/W)  SCH Duty Cycle Register High Half Word */
X  volatile uint32_t SCLH;                        
N  __IO uint32_t SCLL;                       /*!< Offset: 0x014 (R/W)  SCL Duty Cycle Register Low Half Word */
X  volatile uint32_t SCLL;                        
N  __O  uint32_t CONCLR;                     /*!< Offset: 0x018 (R/W)  I2C Control Clear Register */
X  volatile  uint32_t CONCLR;                      
N  __IO uint32_t MMCTRL;                     /*!< Offset: 0x01C (R/W)  Monitor mode control register */
X  volatile uint32_t MMCTRL;                      
N  __IO uint32_t ADR1;                       /*!< Offset: 0x020 (R/W)  I2C Slave Address Register 1 */
X  volatile uint32_t ADR1;                        
N  __IO uint32_t ADR2;                       /*!< Offset: 0x024 (R/W)  I2C Slave Address Register 2 */
X  volatile uint32_t ADR2;                        
N  __IO uint32_t ADR3;                       /*!< Offset: 0x028 (R/W)  I2C Slave Address Register 3 */
X  volatile uint32_t ADR3;                        
N  __I  uint32_t DATA_BUFFER;                /*!< Offset: 0x02C (R/ )  Data buffer Register */
X  volatile const  uint32_t DATA_BUFFER;                 
N  __IO uint32_t MASK0;                      /*!< Offset: 0x030 (R/W)  I2C Slave address mask register 0 */
X  volatile uint32_t MASK0;                       
N  __IO uint32_t MASK1;                      /*!< Offset: 0x034 (R/W)  I2C Slave address mask register 1 */
X  volatile uint32_t MASK1;                       
N  __IO uint32_t MASK2;                      /*!< Offset: 0x038 (R/W)  I2C Slave address mask register 2 */
X  volatile uint32_t MASK2;                       
N  __IO uint32_t MASK3;                      /*!< Offset: 0x03C (R/W)  I2C Slave address mask register 3 */
X  volatile uint32_t MASK3;                       
N} LPC_I2C_TypeDef;
N
N/*------------- Inter IC Sound (I2S) -----------------------------------------*/
N/** @brief  Inter IC Sound (I2S) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t DAO;                        /*!< Offset: 0x000 (R/W)  Digital Audio Output Register */
X  volatile uint32_t DAO;                         
N  __IO uint32_t DAI;                        /*!< Offset: 0x004 (R/W)  Digital Audio Input Register */
X  volatile uint32_t DAI;                         
N  __O  uint32_t TXFIFO;                     /*!< Offset: 0x008 ( /W)  Transmit FIFO */
X  volatile  uint32_t TXFIFO;                      
N  __I  uint32_t RXFIFO;                     /*!< Offset: 0x00C (R/ )  Receive FIFO */
X  volatile const  uint32_t RXFIFO;                      
N  __I  uint32_t STATE;                      /*!< Offset: 0x010 (R/W)  Status Feedback Register */
X  volatile const  uint32_t STATE;                       
N  __IO uint32_t DMA1;                       /*!< Offset: 0x014 (R/W)  DMA Configuration Register 1 */
X  volatile uint32_t DMA1;                        
N  __IO uint32_t DMA2;                       /*!< Offset: 0x018 (R/W)  DMA Configuration Register 2 */
X  volatile uint32_t DMA2;                        
N  __IO uint32_t IRQ;                        /*!< Offset: 0x01C (R/W)  Interrupt Request Control Register */
X  volatile uint32_t IRQ;                         
N  __IO uint32_t TXRATE;                     /*!< Offset: 0x020 (R/W)  Transmit reference clock divider Register */
X  volatile uint32_t TXRATE;                      
N  __IO uint32_t RXRATE;                     /*!< Offset: 0x024 (R/W)  Receive reference clock divider Register */
X  volatile uint32_t RXRATE;                      
N  __IO uint32_t TXBITRATE;                  /*!< Offset: 0x028 (R/W)  Transmit bit rate divider Register */
X  volatile uint32_t TXBITRATE;                   
N  __IO uint32_t RXBITRATE;                  /*!< Offset: 0x02C (R/W)  Receive bit rate divider Register */
X  volatile uint32_t RXBITRATE;                   
N  __IO uint32_t TXMODE;                     /*!< Offset: 0x030 (R/W)  Transmit mode control Register */
X  volatile uint32_t TXMODE;                      
N  __IO uint32_t RXMODE;                     /*!< Offset: 0x034 (R/W)  Receive mode control Register */
X  volatile uint32_t RXMODE;                      
N} LPC_I2S_TypeDef;
N
N/*------------- Repetitive Interrupt Timer (RIT) -----------------------------*/
N/** @brief  Repetitive Interrupt Timer (RIT) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t RICOMPVAL;
X  volatile uint32_t RICOMPVAL;
N  __IO uint32_t RIMASK;
X  volatile uint32_t RIMASK;
N  __IO uint32_t RICTRL;
X  volatile uint32_t RICTRL;
N  __IO uint32_t RICOUNTER;
X  volatile uint32_t RICOUNTER;
N} LPC_RIT_TypeDef;
N
N/*------------- Real-Time Clock (RTC) ----------------------------------------*/
N/** @brief  Real-Time Clock (RTC) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t ILR;                        /*!< Offset: 0x000 (R/W)  Interrupt Location Register */
X  volatile uint32_t ILR;                         
N       uint32_t RESERVED0;				    
N  __IO uint32_t CCR;                        /*!< Offset: 0x008 (R/W)  Clock Control Register */
X  volatile uint32_t CCR;                         
N  __IO uint32_t CIIR;                       /*!< Offset: 0x00C (R/W)  Counter Increment Interrupt Register */
X  volatile uint32_t CIIR;                        
N  __IO uint32_t AMR;                        /*!< Offset: 0x010 (R/W)  Alarm Mask Register */
X  volatile uint32_t AMR;                         
N  __I  uint32_t CTIME0;                     /*!< Offset: 0x014 (R/ )  Consolidated Time Register 0 */
X  volatile const  uint32_t CTIME0;                      
N  __I  uint32_t CTIME1;                     /*!< Offset: 0x018 (R/ )  Consolidated Time Register 1 */
X  volatile const  uint32_t CTIME1;                      
N  __I  uint32_t CTIME2;                     /*!< Offset: 0x01C (R/ )  Consolidated Time Register 2 */
X  volatile const  uint32_t CTIME2;                      
N  __IO uint32_t SEC;                        /*!< Offset: 0x020 (R/W)  Seconds Counter Register */
X  volatile uint32_t SEC;                         
N  __IO uint32_t MIN;                        /*!< Offset: 0x024 (R/W)  Minutes Register */
X  volatile uint32_t MIN;                         
N  __IO uint32_t HOUR;                       /*!< Offset: 0x028 (R/W)  Hours Register */
X  volatile uint32_t HOUR;                        
N  __IO uint32_t DOM;                        /*!< Offset: 0x02C (R/W)  Day of Month Register */
X  volatile uint32_t DOM;                         
N  __IO uint32_t DOW;                        /*!< Offset: 0x030 (R/W)  Day of Week Register */
X  volatile uint32_t DOW;                         
N  __IO uint32_t DOY;                        /*!< Offset: 0x034 (R/W)  Day of Year Register */
X  volatile uint32_t DOY;                         
N  __IO uint32_t MONTH;                      /*!< Offset: 0x038 (R/W)  Months Register */
X  volatile uint32_t MONTH;                       
N  __IO uint32_t YEAR;                       /*!< Offset: 0x03C (R/W)  Years Register */
X  volatile uint32_t YEAR;                        
N  __IO uint32_t CALIBRATION;                /*!< Offset: 0x040 (R/W)  Calibration Value Register */
X  volatile uint32_t CALIBRATION;                 
N  __IO uint32_t GPREG0;                     /*!< Offset: 0x044 (R/W)  General Purpose Register 0 */
X  volatile uint32_t GPREG0;                      
N  __IO uint32_t GPREG1;                     /*!< Offset: 0x048 (R/W)  General Purpose Register 1 */
X  volatile uint32_t GPREG1;                      
N  __IO uint32_t GPREG2;                     /*!< Offset: 0x04C (R/W)  General Purpose Register 2 */
X  volatile uint32_t GPREG2;                      
N  __IO uint32_t GPREG3;                     /*!< Offset: 0x050 (R/W)  General Purpose Register 3 */
X  volatile uint32_t GPREG3;                      
N  __IO uint32_t GPREG4;                     /*!< Offset: 0x054 (R/W)  General Purpose Register 4 */
X  volatile uint32_t GPREG4;                      
N  __IO uint32_t RTC_AUXEN;                  /*!< Offset: 0x058 (R/W)  RTC Auxiliary Enable Register */
X  volatile uint32_t RTC_AUXEN;                   
N  __IO uint32_t RTC_AUX;                    /*!< Offset: 0x05C (R/W)  RTC Auxiliary Control Register */
X  volatile uint32_t RTC_AUX;                     
N  __IO uint32_t ALSEC;                      /*!< Offset: 0x060 (R/W)  Alarm value for Seconds */
X  volatile uint32_t ALSEC;                       
N  __IO uint32_t ALMIN;                      /*!< Offset: 0x064 (R/W)  Alarm value for Minutes */
X  volatile uint32_t ALMIN;                       
N  __IO uint32_t ALHOUR;                     /*!< Offset: 0x068 (R/W)  Alarm value for Hours */
X  volatile uint32_t ALHOUR;                      
N  __IO uint32_t ALDOM;                      /*!< Offset: 0x06C (R/W)  Alarm value for Day of Month */
X  volatile uint32_t ALDOM;                       
N  __IO uint32_t ALDOW;                      /*!< Offset: 0x070 (R/W)  Alarm value for Day of Week */
X  volatile uint32_t ALDOW;                       
N  __IO uint32_t ALDOY;                      /*!< Offset: 0x074 (R/W)  Alarm value for Day of Year */
X  volatile uint32_t ALDOY;                       
N  __IO uint32_t ALMON;                      /*!< Offset: 0x078 (R/W)  Alarm value for Months */
X  volatile uint32_t ALMON;                       
N  __IO uint32_t ALYEAR;                     /*!< Offset: 0x07C (R/W)  Alarm value for Year */
X  volatile uint32_t ALYEAR;                      
N} LPC_RTC_TypeDef;
N
N/*------------- Watchdog Timer (WDT) -----------------------------------------*/
N/** @brief  Watchdog Timer (WDT) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t MOD;                        /*!< Offset: 0x000 (R/W)  Watchdog mode Register */
X  volatile uint32_t MOD;                         
N  __IO uint32_t TC;                         /*!< Offset: 0x004 (R/W)  Watchdog timer constant Register */
X  volatile uint32_t TC;                          
N  __O  uint32_t FEED;                       /*!< Offset: 0x008 ( /W)  Watchdog feed sequence Register */
X  volatile  uint32_t FEED;                        
N  __I  uint32_t TV;                         /*!< Offset: 0x00C (R/ )  Watchdog timer value Register */
X  volatile const  uint32_t TV;                          
N  __IO uint32_t WDCLKSEL;
X  volatile uint32_t WDCLKSEL;
N} LPC_WDT_TypeDef;
N
N/*------------- Analog-to-Digital Converter (ADC) ----------------------------*/
N/** @brief  Analog-to-Digital Converter (ADC) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t CR;                         /*!< Offset: 0x000 (R/W)  A/D Control Register */
X  volatile uint32_t CR;                          
N  __IO uint32_t GDR;                        /*!< Offset: 0x004 (R/W)  A/D Global Data Register */
X  volatile uint32_t GDR;                         
N       uint32_t RESERVED0;
N  __IO uint32_t INTEN;                      /*!< Offset: 0x00C (R/W)  A/D Interrupt Enable Register */
X  volatile uint32_t INTEN;                       
N  __I  uint32_t DR[8];                      /*!< Offset: 0x010 (R/ )  A/D Channel # Data Register */
X  volatile const  uint32_t DR[8];                       
N  __I  uint32_t STAT;                       /*!< Offset: 0x030 (R/ )  A/D Status Register */
X  volatile const  uint32_t STAT;                        
N  __IO uint32_t ADTRM;                      /*!< Offset: 0x034 (R/W)  ADC trim Register */
X  volatile uint32_t ADTRM;                       
N	__IO uint32_t ADCR;
X	volatile uint32_t ADCR;
N  __IO uint32_t ADGDR;
X  volatile uint32_t ADGDR;
N  __IO uint32_t ADINTEN;
X  volatile uint32_t ADINTEN;
N  __I  uint32_t ADDR0;
X  volatile const  uint32_t ADDR0;
N  __I  uint32_t ADDR1;
X  volatile const  uint32_t ADDR1;
N  __I  uint32_t ADDR2;
X  volatile const  uint32_t ADDR2;
N  __I  uint32_t ADDR3;
X  volatile const  uint32_t ADDR3;
N  __I  uint32_t ADDR4;
X  volatile const  uint32_t ADDR4;
N  __I  uint32_t ADDR5;
X  volatile const  uint32_t ADDR5;
N  __I  uint32_t ADDR6;
X  volatile const  uint32_t ADDR6;
N  __I  uint32_t ADDR7;
X  volatile const  uint32_t ADDR7;
N  __I  uint32_t ADSTAT;
X  volatile const  uint32_t ADSTAT;
N} LPC_ADC_TypeDef;
N
N/*------------- Digital-to-Analog Converter (DAC) ----------------------------*/
N/** @brief  Digital-to-Analog Converter (DAC) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t CR;                         /*!< Offset: 0x000 (R/W)  D/A Converter Register */
X  volatile uint32_t CR;                          
N  __IO uint32_t CTRL;                       /*!< Offset: 0x004 (R/W)  DAC Control register */
X  volatile uint32_t CTRL;                        
N  __IO uint32_t CNTVAL;                     /*!< Offset: 0x008 (R/W)  DAC Counter Value Register */
X  volatile uint32_t CNTVAL;                      
N	 __IO uint32_t DACR;
X	 volatile uint32_t DACR;
N  __IO uint32_t DACCTRL;
X  volatile uint32_t DACCTRL;
N  __IO uint16_t DACCNTVAL;
X  volatile uint16_t DACCNTVAL;
N} LPC_DAC_TypeDef;
N
N
N/*------------- Motor Control Pulse-Width Modulation (MCPWM) -----------------*/
N/** @brief  Motor Control Pulse-Width Modulation (MCPWM) register structure definition */
Ntypedef struct
N{
N  __I  uint32_t CON;                        /*!< Offset: 0x000 (R/ )  PWM Control read address Register */
X  volatile const  uint32_t CON;                         
N  __O  uint32_t CON_SET;                    /*!< Offset: 0x004 ( /W)  PWM Control set address Register */
X  volatile  uint32_t CON_SET;                     
N  __O  uint32_t CON_CLR;                    /*!< Offset: 0x008 ( /W)  PWM Control clear address Register */
X  volatile  uint32_t CON_CLR;                     
N  __I  uint32_t CAPCON;                     /*!< Offset: 0x00C (R/ )  Capture Control read address Register */
X  volatile const  uint32_t CAPCON;                      
N  __O  uint32_t CAPCON_SET;                 /*!< Offset: 0x010 ( /W)  Capture Control set address Register */
X  volatile  uint32_t CAPCON_SET;                  
N  __O  uint32_t CAPCON_CLR;                 /*!< Offset: 0x014 ( /W)  Event Control clear address Register */
X  volatile  uint32_t CAPCON_CLR;                  
N  __IO uint32_t TC0;                        /*!< Offset: 0x018 (R/W)  Timer Counter Register, channel 0 */
X  volatile uint32_t TC0;                         
N  __IO uint32_t TC1;                        /*!< Offset: 0x01C (R/W)  Timer Counter Register, channel 1 */
X  volatile uint32_t TC1;                         
N  __IO uint32_t TC2;                        /*!< Offset: 0x020 (R/W)  Timer Counter Register, channel 2 */
X  volatile uint32_t TC2;                         
N  __IO uint32_t LIM0;                       /*!< Offset: 0x024 (R/W)  Limit Register, channel 0 */
X  volatile uint32_t LIM0;                        
N  __IO uint32_t LIM1;                       /*!< Offset: 0x028 (R/W)  Limit Register, channel 1 */
X  volatile uint32_t LIM1;                        
N  __IO uint32_t LIM2;                       /*!< Offset: 0x02C (R/W)  Limit Register, channel 2 */
X  volatile uint32_t LIM2;                        
N  __IO uint32_t MAT0;                       /*!< Offset: 0x030 (R/W)  Match Register, channel 0 */
X  volatile uint32_t MAT0;                        
N  __IO uint32_t MAT1;                       /*!< Offset: 0x034 (R/W)  Match Register, channel 1 */
X  volatile uint32_t MAT1;                        
N  __IO uint32_t MAT2;                       /*!< Offset: 0x038 (R/W)  Match Register, channel 2 */
X  volatile uint32_t MAT2;                        
N  __IO uint32_t DT;                         /*!< Offset: 0x03C (R/W)  Dead time Register */
X  volatile uint32_t DT;                          
N  __IO uint32_t CP;                         /*!< Offset: 0x040 (R/W)  Commutation Pattern Register */
X  volatile uint32_t CP;                          
N  __IO uint32_t CAP0;                       /*!< Offset: 0x044 (R/W)  Capture Register, channel 0 */
X  volatile uint32_t CAP0;                        
N  __IO uint32_t CAP1;                       /*!< Offset: 0x048 (R/W)  Capture Register, channel 1 */
X  volatile uint32_t CAP1;                        
N  __IO uint32_t CAP2;                       /*!< Offset: 0x04C (R/W)  Capture Register, channel 2 */
X  volatile uint32_t CAP2;                        
N  __I  uint32_t INTEN;                      /*!< Offset: 0x050 (R/ )  Interrupt Enable read Register */
X  volatile const  uint32_t INTEN;                       
N  __O  uint32_t INTEN_SET;                  /*!< Offset: 0x054 ( /W)  Interrupt Enable set address Register */
X  volatile  uint32_t INTEN_SET;                   
N  __O  uint32_t INTEN_CLR;                  /*!< Offset: 0x058 ( /W)  Interrupt Enable clear address Register */
X  volatile  uint32_t INTEN_CLR;                   
N  __I  uint32_t CNTCON;                     /*!< Offset: 0x05C (R/ )  Count Control read address Register */
X  volatile const  uint32_t CNTCON;                      
N  __O  uint32_t CNTCON_SET;                 /*!< Offset: 0x060 ( /W)  Count Control set address Register */
X  volatile  uint32_t CNTCON_SET;                  
N  __O  uint32_t CNTCON_CLR;                 /*!< Offset: 0x064 ( /W)  Count Control clear address Register */
X  volatile  uint32_t CNTCON_CLR;                  
N  __I  uint32_t INTF;                       /*!< Offset: 0x068 (R/ )  Interrupt flags read address Register */
X  volatile const  uint32_t INTF;                        
N  __O  uint32_t INTF_SET;                   /*!< Offset: 0x06C ( /W)  Interrupt flags set address Register */
X  volatile  uint32_t INTF_SET;                    
N  __O  uint32_t INTF_CLR;                   /*!< Offset: 0x070 ( /W)  Interrupt flags clear address Register */
X  volatile  uint32_t INTF_CLR;                    
N  __O  uint32_t CAP_CLR;                    /*!< Offset: 0x074 ( /W)  Capture clear address Register */
X  volatile  uint32_t CAP_CLR;                     
N} LPC_MCPWM_TypeDef;
N
N/*------------- Quadrature Encoder Interface (QEI) ---------------------------*/
N/** @brief  Quadrature Encoder Interface (QEI) register structure definition */
Ntypedef struct
N{
N  __O  uint32_t CON;                        /*!< Offset: 0x000 ( /W)  Control Register */
X  volatile  uint32_t CON;                         
N  __I  uint32_t STAT;                       /*!< Offset: 0x004 (R/ )  Encoder Status Register */
X  volatile const  uint32_t STAT;                        
N  __IO uint32_t CONF;                       /*!< Offset: 0x008 (R/W)  Configuration Register */
X  volatile uint32_t CONF;                        
N  __I  uint32_t POS;                        /*!< Offset: 0x00C (R/ )  Position Register */
X  volatile const  uint32_t POS;                         
N  __IO uint32_t MAXPOS;                     /*!< Offset: 0x010 (R/W)  Maximum position Register */
X  volatile uint32_t MAXPOS;                      
N  __IO uint32_t CMPOS0;                     /*!< Offset: 0x014 (R/W)  Position compare Register 0 */
X  volatile uint32_t CMPOS0;                      
N  __IO uint32_t CMPOS1;                     /*!< Offset: 0x018 (R/W)  Position compare Register 1 */
X  volatile uint32_t CMPOS1;                      
N  __IO uint32_t CMPOS2;                     /*!< Offset: 0x01C (R/W)  Position compare Register 2 */
X  volatile uint32_t CMPOS2;                      
N  __I  uint32_t INXCNT;                     /*!< Offset: 0x020 (R/ )  Index count Register */
X  volatile const  uint32_t INXCNT;                      
N  __IO uint32_t INXCMP0;                    /*!< Offset: 0x024 (R/W)  Index compare Register 0 */
X  volatile uint32_t INXCMP0;                     
N  __IO uint32_t LOAD;                       /*!< Offset: 0x028 (R/W)  Velocity timer reload Register */
X  volatile uint32_t LOAD;                        
N  __I  uint32_t TIME;                       /*!< Offset: 0x02C (R/ )  Velocity timer Register */
X  volatile const  uint32_t TIME;                        
N  __I  uint32_t VEL;                        /*!< Offset: 0x030 (R/ )  Velocity counter Register */
X  volatile const  uint32_t VEL;                         
N  __I  uint32_t CAP;                        /*!< Offset: 0x034 (R/ )  Velocity capture Register */
X  volatile const  uint32_t CAP;                         
N  __IO uint32_t VELCOMP;                    /*!< Offset: 0x038 (R/W)  Velocity compare Register */
X  volatile uint32_t VELCOMP;                     
N  __IO uint32_t FILTER;
X  volatile uint32_t FILTER;
N       uint32_t RESERVED0[998];
N  __O  uint32_t IEC;                        /*!< Offset: 0xFD8 ( /W)  Interrupt enable clear Register */
X  volatile  uint32_t IEC;                         
N  __O  uint32_t IES;                        /*!< Offset: 0xFDC ( /W)  Interrupt enable set Register */
X  volatile  uint32_t IES;                         
N  __I  uint32_t INTSTAT;                    /*!< Offset: 0xFE0 (R/ )  Interrupt status Register */
X  volatile const  uint32_t INTSTAT;                     
N  __I  uint32_t IE;                         /*!< Offset: 0xFE4 (R/ )  Interrupt enable Register */
X  volatile const  uint32_t IE;                          
N  __O  uint32_t CLR;                        /*!< Offset: 0xFE8 ( /W)  Interrupt status clear Register */
X  volatile  uint32_t CLR;                         
N  __O  uint32_t SET;                        /*!< Offset: 0xFEC ( /W)  Interrupt status set Register */
X  volatile  uint32_t SET;                         
N} LPC_QEI_TypeDef;
N
N/*------------- Controller Area Network (CAN) --------------------------------*/
N/** @brief  Controller Area Network Acceptance Filter RAM (CANAF_RAM)structure definition */
Ntypedef struct
N{
N  __IO uint32_t mask[512];                  /*!< Offset: 0x000 (R/W)  Acceptance Filter RAM */
X  volatile uint32_t mask[512];                   
N} LPC_CANAF_RAM_TypeDef;
N
N/** @brief  Controller Area Network Acceptance Filter(CANAF) register structure definition */
Ntypedef struct                          /* Acceptance Filter Registers        */
N{
N  __IO uint32_t AFMR;                       /*!< Offset: 0x000 (R/W)  Acceptance Filter Register */
X  volatile uint32_t AFMR;                        
N  __IO uint32_t SFF_sa;                     /*!< Offset: 0x004 (R/W)  Standard Frame Individual Start Address Register */
X  volatile uint32_t SFF_sa;                      
N  __IO uint32_t SFF_GRP_sa;                 /*!< Offset: 0x008 (R/W)  Standard Frame Group Start Address Register */
X  volatile uint32_t SFF_GRP_sa;                  
N  __IO uint32_t EFF_sa;                     /*!< Offset: 0x00C (R/W)  Extended Frame Start Address Register */
X  volatile uint32_t EFF_sa;                      
N  __IO uint32_t EFF_GRP_sa;                 /*!< Offset: 0x010 (R/W)  Extended Frame Group Start Address Register */
X  volatile uint32_t EFF_GRP_sa;                  
N  __IO uint32_t ENDofTable;                 /*!< Offset: 0x014 (R/W)  End of AF Tables Register */
X  volatile uint32_t ENDofTable;                  
N  __I  uint32_t LUTerrAd;                   /*!< Offset: 0x018 (R/ )  LUT Error Address Register */
X  volatile const  uint32_t LUTerrAd;                    
N  __I  uint32_t LUTerr;                     /*!< Offset: 0x01C (R/ )  LUT Error Register */
X  volatile const  uint32_t LUTerr;                      
N  __IO uint32_t FCANIE;                     /*!< Offset: 0x020 (R/W)  Global FullCANInterrupt Enable Register */
X  volatile uint32_t FCANIE;                      
N  __IO uint32_t FCANIC0;                    /*!< Offset: 0x024 (R/W)  FullCAN Interrupt and Capture Register 0 */
X  volatile uint32_t FCANIC0;                     
N  __IO uint32_t FCANIC1;                    /*!< Offset: 0x028 (R/W)  FullCAN Interrupt and Capture Register 1 */
X  volatile uint32_t FCANIC1;                     
N} LPC_CANAF_TypeDef;
N
N/** @brief  Controller Area Network Central (CANCR) register structure definition */
Ntypedef struct                          /* Central Registers                  */
N{
N  __I  uint32_t TxSR;                       /*!< Offset: 0x000 (R/ )  CAN Central Transmit Status Register */
X  volatile const  uint32_t TxSR;                        
N  __I  uint32_t RxSR;                       /*!< Offset: 0x004 (R/ )  CAN Central Receive Status Register */
X  volatile const  uint32_t RxSR;                        
N  __I  uint32_t MSR;                        /*!< Offset: 0x008 (R/ )  CAN Central Miscellaneous Register */
X  volatile const  uint32_t MSR;                         
N} LPC_CANCR_TypeDef;
N
N/** @brief  Controller Area Network Controller (CAN) register structure definition */
Ntypedef struct                              /* Controller Registers               */
N{
N  __IO uint32_t MOD;                        /*!< Offset: 0x000 (R/W)  CAN Mode Register */
X  volatile uint32_t MOD;                         
N  __O  uint32_t CMR;                        /*!< Offset: 0x004 ( /W)  CAN Command Register */
X  volatile  uint32_t CMR;                         
N  __IO uint32_t GSR;                        /*!< Offset: 0x008 (R/W)  CAN Global Status Register */
X  volatile uint32_t GSR;                         
N  __I  uint32_t ICR;                        /*!< Offset: 0x00C (R/ )  CAN Interrupt and Capture Register */
X  volatile const  uint32_t ICR;                         
N  __IO uint32_t IER;                        /*!< Offset: 0x010 (R/W)  CAN Interrupt Enable Register */
X  volatile uint32_t IER;                         
N  __IO uint32_t BTR;                        /*!< Offset: 0x014 (R/W)  CAN Bus Timing Register */
X  volatile uint32_t BTR;                         
N  __IO uint32_t EWL;                        /*!< Offset: 0x018 (R/W)  CAN Error Warning Limit Register */
X  volatile uint32_t EWL;                         
N  __I  uint32_t SR;                         /*!< Offset: 0x01C (R/ )  CAN Status Register */
X  volatile const  uint32_t SR;                          
N  __IO uint32_t RFS;                        /*!< Offset: 0x020 (R/W)  CAN Receive Frame Status Register */
X  volatile uint32_t RFS;                         
N  __IO uint32_t RID;                        /*!< Offset: 0x024 (R/W)  CAN Receive Identifier Register */
X  volatile uint32_t RID;                         
N  __IO uint32_t RDA;                        /*!< Offset: 0x028 (R/W)  CAN Receive Data Register A */
X  volatile uint32_t RDA;                         
N  __IO uint32_t RDB;                        /*!< Offset: 0x02C (R/W)  CAN Receive Data Register B */
X  volatile uint32_t RDB;                         
N  __IO uint32_t TFI1;                       /*!< Offset: 0x030 (R/W)  CAN Transmit Frame Information Register 1 */
X  volatile uint32_t TFI1;                        
N  __IO uint32_t TID1;                       /*!< Offset: 0x034 (R/W)  CAN Transmit Identifier Register 1 */
X  volatile uint32_t TID1;                        
N  __IO uint32_t TDA1;                       /*!< Offset: 0x038 (R/W)  CAN Transmit Data Register A 1 */
X  volatile uint32_t TDA1;                        
N  __IO uint32_t TDB1;                       /*!< Offset: 0x03C (R/W)  CAN Transmit Data Register B 1 */
X  volatile uint32_t TDB1;                        
N  __IO uint32_t TFI2;                       /*!< Offset: 0x040 (R/W)  CAN Transmit Frame Information Register 2 */
X  volatile uint32_t TFI2;                        
N  __IO uint32_t TID2;                       /*!< Offset: 0x044 (R/W)  CAN Transmit Identifier Register 2 */
X  volatile uint32_t TID2;                        
N  __IO uint32_t TDA2;                       /*!< Offset: 0x048 (R/W)  CAN Transmit Data Register A 2 */
X  volatile uint32_t TDA2;                        
N  __IO uint32_t TDB2;                       /*!< Offset: 0x04C (R/W)  CAN Transmit Data Register B 2 */
X  volatile uint32_t TDB2;                        
N  __IO uint32_t TFI3;                       /*!< Offset: 0x050 (R/W)  CAN Transmit Frame Information Register 3 */
X  volatile uint32_t TFI3;                        
N  __IO uint32_t TID3;                       /*!< Offset: 0x054 (R/W)  CAN Transmit Identifier Register 3 */
X  volatile uint32_t TID3;                        
N  __IO uint32_t TDA3;                       /*!< Offset: 0x058 (R/W)  CAN Transmit Data Register A 3 */
X  volatile uint32_t TDA3;                        
N  __IO uint32_t TDB3;                       /*!< Offset: 0x05C (R/W)  CAN Transmit Data Register B 3 */
X  volatile uint32_t TDB3;                        
N} LPC_CAN_TypeDef;
N
N/*------------- General Purpose Direct Memory Access (GPDMA) -----------------*/
N/** @brief  General Purpose Direct Memory Access (GPDMA) register structure definition */
Ntypedef struct                              /* Common Registers                   */
N{
N  __I  uint32_t IntStat;                    /*!< Offset: 0x000 (R/ )  DMA Interrupt Status Register */
X  volatile const  uint32_t IntStat;                     
N  __I  uint32_t IntTCStat;                  /*!< Offset: 0x004 (R/ )  DMA Interrupt Terminal Count Request Status Register */
X  volatile const  uint32_t IntTCStat;                   
N  __O  uint32_t IntTCClear;                 /*!< Offset: 0x008 ( /W)  DMA Interrupt Terminal Count Request Clear Register */
X  volatile  uint32_t IntTCClear;                  
N  __I  uint32_t IntErrStat;                 /*!< Offset: 0x00C (R/ )  DMA Interrupt Error Status Register */
X  volatile const  uint32_t IntErrStat;                  
N  __O  uint32_t IntErrClr;                  /*!< Offset: 0x010 ( /W)  DMA Interrupt Error Clear Register */
X  volatile  uint32_t IntErrClr;                   
N  __I  uint32_t RawIntTCStat;               /*!< Offset: 0x014 (R/ )  DMA Raw Interrupt Terminal Count Status Register */
X  volatile const  uint32_t RawIntTCStat;                
N  __I  uint32_t RawIntErrStat;              /*!< Offset: 0x018 (R/ )  DMA Raw Error Interrupt Status Register */
X  volatile const  uint32_t RawIntErrStat;               
N  __I  uint32_t EnbldChns;                  /*!< Offset: 0x01C (R/ )  DMA Enabled Channel Register */
X  volatile const  uint32_t EnbldChns;                   
N  __IO uint32_t SoftBReq;                   /*!< Offset: 0x020 (R/W)  DMA Software Burst Request Register */
X  volatile uint32_t SoftBReq;                    
N  __IO uint32_t SoftSReq;                   /*!< Offset: 0x024 (R/W)  DMA Software Single Request Register */
X  volatile uint32_t SoftSReq;                    
N  __IO uint32_t SoftLBReq;                  /*!< Offset: 0x028 (R/W)  DMA Software Last Burst Request Register */
X  volatile uint32_t SoftLBReq;                   
N  __IO uint32_t SoftLSReq;                  /*!< Offset: 0x02C (R/W)  DMA Software Last Single Request Register */
X  volatile uint32_t SoftLSReq;                   
N  __IO uint32_t Config;                     /*!< Offset: 0x030 (R/W)  DMA Configuration Register */
X  volatile uint32_t Config;                      
N  __IO uint32_t Sync;                       /*!< Offset: 0x034 (R/W)  DMA Synchronization Register */
X  volatile uint32_t Sync;                        
N} LPC_GPDMA_TypeDef;
N
N/** @brief  General Purpose Direct Memory Access Channel (GPDMACH) register structure definition */
Ntypedef struct                              /* Channel Registers                  */
N{
N  __IO uint32_t CSrcAddr;                   /*!< Offset: 0x000 (R/W)  DMA Channel # Source Address Register */
X  volatile uint32_t CSrcAddr;                    
N  __IO uint32_t CDestAddr;                  /*!< Offset: 0x004 (R/W)  DMA Channel # Destination Address Register */
X  volatile uint32_t CDestAddr;                   
N  __IO uint32_t CLLI;                       /*!< Offset: 0x008 (R/W)  DMA Channel # Linked List Item Register */
X  volatile uint32_t CLLI;                        
N  __IO uint32_t CControl;                   /*!< Offset: 0x00C (R/W)  DMA Channel # Control Register */
X  volatile uint32_t CControl;                    
N  __IO uint32_t CConfig;                    /*!< Offset: 0x010 (R/W)  DMA Channel # Configuration Register */
X  volatile uint32_t CConfig;                     
N} LPC_GPDMACH_TypeDef;
N
N/*------------- Universal Serial Bus (USB) -----------------------------------*/
N/** @brief  Universal Serial Bus (USB) register structure definition */
Ntypedef struct
N{
N  __I  uint32_t Revision;                 /*!< Offset: 0x000 (R/ )  Revision Register */
X  volatile const  uint32_t Revision;                  
N  __IO uint32_t Control;                  /*!< Offset: 0x004 (R/W)  Control Register */
X  volatile uint32_t Control;                   
N  __IO uint32_t CommandStatus;            /*!< Offset: 0x008 (R/W)  Command / Status Register */
X  volatile uint32_t CommandStatus;             
N  __IO uint32_t InterruptStatus;          /*!< Offset: 0x00C (R/W)  Interrupt Status Register */
X  volatile uint32_t InterruptStatus;           
N  __IO uint32_t InterruptEnable;          /*!< Offset: 0x010 (R/W)  Interrupt Enable Register */
X  volatile uint32_t InterruptEnable;           
N  __IO uint32_t InterruptDisable;         /*!< Offset: 0x014 (R/W)  Interrupt Disable Register */
X  volatile uint32_t InterruptDisable;          
N  __IO uint32_t HCCA;                     /*!< Offset: 0x018 (R/W)  Host Controller communication Area Register */
X  volatile uint32_t HCCA;                      
N  __I  uint32_t PeriodCurrentED;          /*!< Offset: 0x01C (R/ )   Register */
X  volatile const  uint32_t PeriodCurrentED;           
N  __IO uint32_t ControlHeadED;            /*!< Offset: 0x020 (R/W)   Register */
X  volatile uint32_t ControlHeadED;             
N  __IO uint32_t ControlCurrentED;         /*!< Offset: 0x024 (R/W)   Register */
X  volatile uint32_t ControlCurrentED;          
N  __IO uint32_t BulkHeadED;               /*!< Offset: 0x028 (R/W)   Register */
X  volatile uint32_t BulkHeadED;                
N  __IO uint32_t BulkCurrentED;            /*!< Offset: 0x02C (R/W)   Register */
X  volatile uint32_t BulkCurrentED;             
N  __I  uint32_t DoneHead;                 /*!< Offset: 0x030 (R/ )   Register */
X  volatile const  uint32_t DoneHead;                  
N  __IO uint32_t FmInterval;               /*!< Offset: 0x034 (R/W)   Register */
X  volatile uint32_t FmInterval;                
N  __I  uint32_t FmRemaining;              /*!< Offset: 0x038 (R/ )   Register */
X  volatile const  uint32_t FmRemaining;               
N  __I  uint32_t FmNumber;                 /*!< Offset: 0x03C (R/ )   Register */
X  volatile const  uint32_t FmNumber;                  
N  __IO uint32_t PeriodicStart;            /*!< Offset: 0x040 (R/W)   Register */
X  volatile uint32_t PeriodicStart;             
N  __IO uint32_t LSTreshold;               /*!< Offset: 0x044 (R/W)   Register */
X  volatile uint32_t LSTreshold;                
N  __IO uint32_t RhDescriptorA;            /*!< Offset: 0x048 (R/W)   Register */
X  volatile uint32_t RhDescriptorA;             
N  __IO uint32_t RhDescriptorB;            /*!< Offset: 0x04C (R/W)   Register */
X  volatile uint32_t RhDescriptorB;             
N  __IO uint32_t RhStatus;                 /*!< Offset: 0x050 (R/W)   Register */
X  volatile uint32_t RhStatus;                  
N  __IO uint32_t RhPortStatus1;            /*!< Offset: 0x054 (R/W)   Register */
X  volatile uint32_t RhPortStatus1;             
N  __IO uint32_t RhPortStatus2;            /*!< Offset: 0x05C (R/W)   Register */
X  volatile uint32_t RhPortStatus2;             
N       uint32_t RESERVED0[40];
N  __I  uint32_t Module_ID;                /*!< Offset: 0x0FC (R/ )  Module ID / Version Reverence ID Register */
X  volatile const  uint32_t Module_ID;                 
N                                          /* USB On-The-Go Registers            */
N  __I  uint32_t IntSt;                    /*!< Offset: 0x100 (R/ )  OTG Interrupt Status Register */
X  volatile const  uint32_t IntSt;                     
N  __IO uint32_t IntEn;                    /*!< Offset: 0x104 (R/W)  OTG Interrupt Enable Register */
X  volatile uint32_t IntEn;                     
N  __O  uint32_t IntSet;                   /*!< Offset: 0x108 ( /W)  OTG Interrupt Set Register */
X  volatile  uint32_t IntSet;                    
N  __O  uint32_t IntClr;                   /*!< Offset: 0x10C ( /W)  OTG Interrupt Clear Register */
X  volatile  uint32_t IntClr;                    
N  __IO uint32_t StCtrl;                   /*!< Offset: 0x110 (R/W)  OTG Status and Control Register */
X  volatile uint32_t StCtrl;                    
N  __IO uint32_t Tmr;                      /*!< Offset: 0x114 (R/W)  OTG Timer Register */
X  volatile uint32_t Tmr;                       
N       uint32_t RESERVED1[58];
N                                          /* USB Device Interrupt Registers     */
N  __I  uint32_t DevIntSt;                 /*!< Offset: 0x200 (R/ )  USB Device Interrupt Status Register */
X  volatile const  uint32_t DevIntSt;                  
N  __IO uint32_t DevIntEn;                 /*!< Offset: 0x204 (R/W)  USB Device Interrupt Enable Register */
X  volatile uint32_t DevIntEn;                  
N  __O  uint32_t DevIntClr;                /*!< Offset: 0x208 ( /W)  USB Device Interrupt Clear Register */
X  volatile  uint32_t DevIntClr;                 
N  __O  uint32_t DevIntSet;                /*!< Offset: 0x20C ( /W)  USB Device Interrupt Set Register */
X  volatile  uint32_t DevIntSet;                 
N                                          /* USB Device SIE Command Registers   */
N  __O  uint32_t CmdCode;                  /*!< Offset: 0x210 (R/W)  USB Command Code Register */
X  volatile  uint32_t CmdCode;                   
N  __I  uint32_t CmdData;                  /*!< Offset: 0x214 (R/W)  USB Command Data Register */
X  volatile const  uint32_t CmdData;                   
N                                          /* USB Device Transfer Registers      */
N  __I  uint32_t RxData;                   /*!< Offset: 0x218 (R/ )  USB Receive Data Register */
X  volatile const  uint32_t RxData;                    
N  __O  uint32_t TxData;                   /*!< Offset: 0x21C ( /W)  USB Transmit Data Register */
X  volatile  uint32_t TxData;                    
N  __I  uint32_t RxPLen;                   /*!< Offset: 0x220 (R/ )  USB Receive Packet Length Register */
X  volatile const  uint32_t RxPLen;                    
N  __O  uint32_t TxPLen;                   /*!< Offset: 0x224 ( /W)  USB Transmit Packet Length Register */
X  volatile  uint32_t TxPLen;                    
N  __IO uint32_t Ctrl;                     /*!< Offset: 0x228 (R/W)  USB Control Register */
X  volatile uint32_t Ctrl;                      
N  __O  uint32_t DevIntPri;                /*!< Offset: 0x22C (R/W)  USB Device Interrupt Priority Register */
X  volatile  uint32_t DevIntPri;                 
N                                          /* USB Device Endpoint Interrupt Regs */
N  __I  uint32_t EpIntSt;                  /*!< Offset: 0x230 (R/ )  USB Endpoint Interrupt Status Register */
X  volatile const  uint32_t EpIntSt;                   
N  __IO uint32_t EpIntEn;                  /*!< Offset: 0x234 (R/W)  USB Endpoint Interrupt Enable Register */
X  volatile uint32_t EpIntEn;                   
N  __O  uint32_t EpIntClr;                 /*!< Offset: 0x238 ( /W)  USB Endpoint Interrupt Clear Register */
X  volatile  uint32_t EpIntClr;                  
N  __O  uint32_t EpIntSet;                 /*!< Offset: 0x23C ( /W)  USB Endpoint Interrupt Set Register */
X  volatile  uint32_t EpIntSet;                  
N  __O  uint32_t EpIntPri;                 /*!< Offset: 0x240 ( /W)  USB Endpoint Interrupt Priority Register */
X  volatile  uint32_t EpIntPri;                  
N                                          /* USB Device Endpoint Realization Reg*/
N  __IO uint32_t ReEp;                     /*!< Offset: 0x244 (R/W)  USB Realize Endpoint Register */
X  volatile uint32_t ReEp;                      
N  __O  uint32_t EpInd;                    /*!< Offset: 0x248 ( /W)  USB Endpoint Index Register */
X  volatile  uint32_t EpInd;                     
N  __IO uint32_t MaxPSize;                 /*!< Offset: 0x24C (R/W)  USB MaxPacketSize Register */
X  volatile uint32_t MaxPSize;                  
N                                          /* USB Device DMA Registers           */
N  __I  uint32_t DMARSt;                   /*!< Offset: 0x250 (R/ )  USB DMA Request Status Register */
X  volatile const  uint32_t DMARSt;                    
N  __O  uint32_t DMARClr;                  /*!< Offset: 0x254 ( /W)  USB DMA Request Clear Register */
X  volatile  uint32_t DMARClr;                   
N  __O  uint32_t DMARSet;                  /*!< Offset: 0x258 ( /W)  USB DMA Request Set Register */
X  volatile  uint32_t DMARSet;                   
N       uint32_t RESERVED2[9];
N  __IO uint32_t UDCAH;                    /*!< Offset: 0x280 (R/W)  USB UDCA Head Register */
X  volatile uint32_t UDCAH;                     
N  __I  uint32_t EpDMASt;                  /*!< Offset: 0x284 (R/ )  USB EP DMA Status Register */
X  volatile const  uint32_t EpDMASt;                   
N  __O  uint32_t EpDMAEn;                  /*!< Offset: 0x288 ( /W)  USB EP DMA Enable Register */
X  volatile  uint32_t EpDMAEn;                   
N  __O  uint32_t EpDMADis;                 /*!< Offset: 0x28C ( /W)  USB EP DMA Disable Register */
X  volatile  uint32_t EpDMADis;                  
N  __I  uint32_t DMAIntSt;                 /*!< Offset: 0x290 (R/ )  USB DMA Interrupt Status Register */
X  volatile const  uint32_t DMAIntSt;                  
N  __IO uint32_t DMAIntEn;                 /*!< Offset: 0x294 (R/W)  USB DMA Interrupt Enable Register */
X  volatile uint32_t DMAIntEn;                  
N       uint32_t RESERVED3[2];
N  __I  uint32_t EoTIntSt;                 /*!< Offset: 0x2A0 (R/ )  USB End of Transfer Interrupt Status Register */
X  volatile const  uint32_t EoTIntSt;                  
N  __O  uint32_t EoTIntClr;                /*!< Offset: 0x2A4 ( /W)  USB End of Transfer Interrupt Clear Register */
X  volatile  uint32_t EoTIntClr;                 
N  __O  uint32_t EoTIntSet;                /*!< Offset: 0x2A8 ( /W)  USB End of Transfer Interrupt Set Register */
X  volatile  uint32_t EoTIntSet;                 
N  __I  uint32_t NDDRIntSt;                /*!< Offset: 0x2AC (R/ )  USB New DD Request Interrupt Status Register */
X  volatile const  uint32_t NDDRIntSt;                 
N  __O  uint32_t NDDRIntClr;               /*!< Offset: 0x2B0 ( /W)  USB New DD Request Interrupt Clear Register */
X  volatile  uint32_t NDDRIntClr;                
N  __O  uint32_t NDDRIntSet;               /*!< Offset: 0x2B4 ( /W)  USB New DD Request Interrupt Set Register */
X  volatile  uint32_t NDDRIntSet;                
N  __I  uint32_t SysErrIntSt;              /*!< Offset: 0x2B8 (R/ )  USB System Error Interrupt Status Register */
X  volatile const  uint32_t SysErrIntSt;               
N  __O  uint32_t SysErrIntClr;             /*!< Offset: 0x2BC ( /W)  USB System Error Interrupt Clear Register */
X  volatile  uint32_t SysErrIntClr;              
N  __O  uint32_t SysErrIntSet;             /*!< Offset: 0x2C0 ( /W)  USB System Error Interrupt Set Register */
X  volatile  uint32_t SysErrIntSet;              
N       uint32_t RESERVED4[15];
N                                          /* USB OTG I2C Registers              */
N  union {
N  __I  uint32_t I2C_RX;                   /*!< Offset: 0x300 (R/ )  OTG I2C Receive Register */
X  volatile const  uint32_t I2C_RX;                    
N  __O  uint32_t I2C_TX;                   /*!< Offset: 0x300 ( /W)  OTG I2C Transmit Register */
X  volatile  uint32_t I2C_TX;                    
N  };
N  __I  uint32_t I2C_STS;                  /*!< Offset: 0x304 (R/ )  OTG I2C Status Register */
X  volatile const  uint32_t I2C_STS;                   
N  __IO uint32_t I2C_CTL;                  /*!< Offset: 0x308 (R/W)  OTG I2C Control Register */
X  volatile uint32_t I2C_CTL;                   
N  __IO uint32_t I2C_CLKHI;                /*!< Offset: 0x30C (R/W)  OTG I2C Clock High Register */
X  volatile uint32_t I2C_CLKHI;                 
N  __O  uint32_t I2C_CLKLO;                /*!< Offset: 0x310 ( /W)  OTG I2C Clock Low Register */
X  volatile  uint32_t I2C_CLKLO;                 
N       uint32_t RESERVED5[824];
N                                          /* USB Clock Control Registers        */
N  union {
N  __IO uint32_t USBClkCtrl;               /*!< Offset: 0xFF4 (R/W)  OTG clock controller Register */
X  volatile uint32_t USBClkCtrl;                
N  __IO uint32_t OTGClkCtrl;               /*!< Offset: 0xFF4 (R/W)  USB clock controller Register */
X  volatile uint32_t OTGClkCtrl;                
N  };
N  union {
N  __I  uint32_t USBClkSt;                 /*!< Offset: 0xFF8 (R/ )  OTG clock status Register */
X  volatile const  uint32_t USBClkSt;                  
N  __I  uint32_t OTGClkSt;                 /*!< Offset: 0xFF8 (R/ )  USB clock status Register */
X  volatile const  uint32_t OTGClkSt;                  
N  };
N} LPC_USB_TypeDef;
N
N/*------------- Ethernet Media Access Controller (EMAC) ----------------------*/
N/** @brief  Ethernet Media Access Controller (EMAC) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t MAC1;                       /*!< Offset: 0x000 (R/W)  MAC Configuration Register 1 */
X  volatile uint32_t MAC1;                        
N  __IO uint32_t MAC2;                       /*!< Offset: 0x004 (R/W)  MAC Configuration Register 2 */
X  volatile uint32_t MAC2;                        
N  __IO uint32_t IPGT;                       /*!< Offset: 0x008 (R/W)  Back-to-Back Inter-Packet-Gap Register */
X  volatile uint32_t IPGT;                        
N  __IO uint32_t IPGR;                       /*!< Offset: 0x00C (R/W)  Non Back-to-Back Inter-Packet-Gap Register */
X  volatile uint32_t IPGR;                        
N  __IO uint32_t CLRT;                       /*!< Offset: 0x010 (R/W)  Collision Window / Retry Register */
X  volatile uint32_t CLRT;                        
N  __IO uint32_t MAXF;                       /*!< Offset: 0x014 (R/W)  Maximum Frame Register */
X  volatile uint32_t MAXF;                        
N  __IO uint32_t SUPP;                       /*!< Offset: 0x018 (R/W)  PHY Support Register */
X  volatile uint32_t SUPP;                        
N  __IO uint32_t TEST;                       /*!< Offset: 0x01C (R/W)  Test Register */
X  volatile uint32_t TEST;                        
N  __IO uint32_t MCFG;                       /*!< Offset: 0x020 (R/W)  MII Mgmt Configuration Register */
X  volatile uint32_t MCFG;                        
N  __IO uint32_t MCMD;                       /*!< Offset: 0x024 (R/W)  MII Mgmt Command Register */
X  volatile uint32_t MCMD;                        
N  __IO uint32_t MADR;                       /*!< Offset: 0x028 (R/W)  MII Mgmt Address Register */
X  volatile uint32_t MADR;                        
N  __O  uint32_t MWTD;                       /*!< Offset: 0x02C ( /W)  MII Mgmt Write Data Register */
X  volatile  uint32_t MWTD;                        
N  __I  uint32_t MRDD;                       /*!< Offset: 0x030 (R/ )  MII Mgmt Read Data Register */
X  volatile const  uint32_t MRDD;                        
N  __I  uint32_t MIND;                       /*!< Offset: 0x034 (R/ )  MII Mgmt Indicators Register */
X  volatile const  uint32_t MIND;                        
N       uint32_t RESERVED0[2];
N  __IO uint32_t SA0;                        /*!< Offset: 0x040 (R/W)  Station Address 0 Register */
X  volatile uint32_t SA0;                         
N  __IO uint32_t SA1;                        /*!< Offset: 0x044 (R/W)  Station Address 1 Register */
X  volatile uint32_t SA1;                         
N  __IO uint32_t SA2;                        /*!< Offset: 0x048 (R/W)  Station Address 2 Register */
X  volatile uint32_t SA2;                         
N       uint32_t RESERVED1[45];
N  __IO uint32_t Command;                    /*!< Offset: 0x100 (R/W)  Command Register */
X  volatile uint32_t Command;                     
N  __I  uint32_t Status;                     /*!< Offset: 0x104 (R/ )  Status Register */
X  volatile const  uint32_t Status;                      
N  __IO uint32_t RxDescriptor;               /*!< Offset: 0x108 (R/W)  Receive Descriptor Base Address Register */
X  volatile uint32_t RxDescriptor;                
N  __IO uint32_t RxStatus;                   /*!< Offset: 0x10C (R/W)  Receive Status Base Address Register */
X  volatile uint32_t RxStatus;                    
N  __IO uint32_t RxDescriptorNumber;         /*!< Offset: 0x110 (R/W)  Receive Number of Descriptors Register */
X  volatile uint32_t RxDescriptorNumber;          
N  __I  uint32_t RxProduceIndex;             /*!< Offset: 0x114 (R/ )  Receive Produce Index Register */
X  volatile const  uint32_t RxProduceIndex;              
N  __IO uint32_t RxConsumeIndex;             /*!< Offset: 0x118 (R/W)  Receive Consume Index Register */
X  volatile uint32_t RxConsumeIndex;              
N  __IO uint32_t TxDescriptor;               /*!< Offset: 0x11C (R/W)  Transmit Descriptor Base Address Register */
X  volatile uint32_t TxDescriptor;                
N  __IO uint32_t TxStatus;                   /*!< Offset: 0x120 (R/W)  Transmit Status Base Address Register */
X  volatile uint32_t TxStatus;                    
N  __IO uint32_t TxDescriptorNumber;         /*!< Offset: 0x124 (R/W)  Transmit Number of Descriptors Register */
X  volatile uint32_t TxDescriptorNumber;          
N  __IO uint32_t TxProduceIndex;             /*!< Offset: 0x128 (R/W)  Transmit Produce Index Register */
X  volatile uint32_t TxProduceIndex;              
N  __I  uint32_t TxConsumeIndex;             /*!< Offset: 0x12C (R/ )  Transmit Consume Index Register */
X  volatile const  uint32_t TxConsumeIndex;              
N       uint32_t RESERVED2[10];
N  __I  uint32_t TSV0;                       /*!< Offset: 0x158 (R/ )  Transmit Status Vector 0 Register */
X  volatile const  uint32_t TSV0;                        
N  __I  uint32_t TSV1;                       /*!< Offset: 0x15C (R/ )  Transmit Status Vector 1 Register */
X  volatile const  uint32_t TSV1;                        
N  __I  uint32_t RSV;                        /*!< Offset: 0x160 (R/ )  Receive Status Vector Register */
X  volatile const  uint32_t RSV;                         
N       uint32_t RESERVED3[3];
N  __IO uint32_t FlowControlCounter;         /*!< Offset: 0x170 (R/W)  Flow Control Counter Register */
X  volatile uint32_t FlowControlCounter;          
N  __I  uint32_t FlowControlStatus;          /*!< Offset: 0x174 (R/ )  Flow Control Status egister */
X  volatile const  uint32_t FlowControlStatus;           
N       uint32_t RESERVED4[34];
N  __IO uint32_t RxFilterCtrl;               /*!< Offset: 0x200 (R/W)  Receive Filter Control Register */
X  volatile uint32_t RxFilterCtrl;                
N  __I  uint32_t RxFilterWoLStatus;          /*!< Offset: 0x204 (R/ )  Receive Filter WoL Status Register */
X  volatile const  uint32_t RxFilterWoLStatus;           
N  __O  uint32_t RxFilterWoLClear;           /*!< Offset: 0x208 ( /W)  Receive Filter WoL Clear Register */
X  volatile  uint32_t RxFilterWoLClear;            
N       uint32_t RESERVED5;
N  __IO uint32_t HashFilterL;                /*!< Offset: 0x210 (R/W)  Hash Filter Table LSBs Register */
X  volatile uint32_t HashFilterL;                 
N  __IO uint32_t HashFilterH;                /*!< Offset: 0x214 (R/W)  Hash Filter Table MSBs Register */
X  volatile uint32_t HashFilterH;                 
N       uint32_t RESERVED6[882];
N  __I  uint32_t IntStatus;                  /*!< Offset: 0xFE0 (R/ )  Interrupt Status Register */
X  volatile const  uint32_t IntStatus;                   
N  __IO uint32_t IntEnable;                  /*!< Offset: 0xFE4 (R/W)  Interrupt Enable Register */
X  volatile uint32_t IntEnable;                   
N  __O  uint32_t IntClear;                   /*!< Offset: 0xFE8 ( /W)  Interrupt Clear Register */
X  volatile  uint32_t IntClear;                    
N  __O  uint32_t IntSet;                     /*!< Offset: 0xFEC ( /W)  Interrupt Set Register */
X  volatile  uint32_t IntSet;                      
N       uint32_t RESERVED7;
N  __IO uint32_t PowerDown;                  /*!< Offset: 0xFF4 (R/W)  Power-Down Register */
X  volatile uint32_t PowerDown;                   
N} LPC_EMAC_TypeDef;
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N
N/******************************************************************************/
N/*                         Peripheral memory map                              */
N/******************************************************************************/
N/* Base addresses                                                             */
N#define LPC_FLASH_BASE        (0x00000000UL)
N#define LPC_RAM_BASE          (0x10000000UL)
N#ifdef __LPC17XX_REV00
S#define LPC_AHBRAM0_BASE      (0x20000000UL)
S#define LPC_AHBRAM1_BASE      (0x20004000UL)
N#else
N#define LPC_AHBRAM0_BASE      (0x2007C000UL)
N#define LPC_AHBRAM1_BASE      (0x20080000UL)
N#endif
N#define LPC_GPIO_BASE         (0x2009C000UL)
N#define LPC_APB0_BASE         (0x40000000UL)
N#define LPC_APB1_BASE         (0x40080000UL)
N#define LPC_AHB_BASE          (0x50000000UL)
N#define LPC_CM3_BASE          (0xE0000000UL)
N
N/* APB0 peripherals                                                           */
N#define LPC_WDT_BASE          (LPC_APB0_BASE + 0x00000)
N#define LPC_TIM0_BASE         (LPC_APB0_BASE + 0x04000)
N#define LPC_TIM1_BASE         (LPC_APB0_BASE + 0x08000)
N#define LPC_UART0_BASE        (LPC_APB0_BASE + 0x0C000)
N#define LPC_UART1_BASE        (LPC_APB0_BASE + 0x10000)
N#define LPC_PWM1_BASE         (LPC_APB0_BASE + 0x18000)
N#define LPC_I2C0_BASE         (LPC_APB0_BASE + 0x1C000)
N#define LPC_SPI_BASE          (LPC_APB0_BASE + 0x20000)
N#define LPC_RTC_BASE          (LPC_APB0_BASE + 0x24000)
N#define LPC_GPIOINT_BASE      (LPC_APB0_BASE + 0x28080)
N#define LPC_PINCON_BASE       (LPC_APB0_BASE + 0x2C000)
N#define LPC_SSP1_BASE         (LPC_APB0_BASE + 0x30000)
N#define LPC_ADC_BASE          (LPC_APB0_BASE + 0x34000)
N#define LPC_CANAF_RAM_BASE    (LPC_APB0_BASE + 0x38000)
N#define LPC_CANAF_BASE        (LPC_APB0_BASE + 0x3C000)
N#define LPC_CANCR_BASE        (LPC_APB0_BASE + 0x40000)
N#define LPC_CAN1_BASE         (LPC_APB0_BASE + 0x44000)
N#define LPC_CAN2_BASE         (LPC_APB0_BASE + 0x48000)
N#define LPC_I2C1_BASE         (LPC_APB0_BASE + 0x5C000)
N
N/* APB1 peripherals                                                           */
N#define LPC_SSP0_BASE         (LPC_APB1_BASE + 0x08000)
N#define LPC_DAC_BASE          (LPC_APB1_BASE + 0x0C000)
N#define LPC_TIM2_BASE         (LPC_APB1_BASE + 0x10000)
N#define LPC_TIM3_BASE         (LPC_APB1_BASE + 0x14000)
N#define LPC_UART2_BASE        (LPC_APB1_BASE + 0x18000)
N#define LPC_UART3_BASE        (LPC_APB1_BASE + 0x1C000)
N#define LPC_I2C2_BASE         (LPC_APB1_BASE + 0x20000)
N#define LPC_I2S_BASE          (LPC_APB1_BASE + 0x28000)
N#define LPC_RIT_BASE          (LPC_APB1_BASE + 0x30000)
N#define LPC_MCPWM_BASE        (LPC_APB1_BASE + 0x38000)
N#define LPC_QEI_BASE          (LPC_APB1_BASE + 0x3C000)
N#define LPC_SC_BASE           (LPC_APB1_BASE + 0x7C000)
N
N/* AHB peripherals                                                            */
N#define LPC_EMAC_BASE         (LPC_AHB_BASE  + 0x00000)
N#define LPC_GPDMA_BASE        (LPC_AHB_BASE  + 0x04000)
N#define LPC_GPDMACH0_BASE     (LPC_AHB_BASE  + 0x04100)
N#define LPC_GPDMACH1_BASE     (LPC_AHB_BASE  + 0x04120)
N#define LPC_GPDMACH2_BASE     (LPC_AHB_BASE  + 0x04140)
N#define LPC_GPDMACH3_BASE     (LPC_AHB_BASE  + 0x04160)
N#define LPC_GPDMACH4_BASE     (LPC_AHB_BASE  + 0x04180)
N#define LPC_GPDMACH5_BASE     (LPC_AHB_BASE  + 0x041A0)
N#define LPC_GPDMACH6_BASE     (LPC_AHB_BASE  + 0x041C0)
N#define LPC_GPDMACH7_BASE     (LPC_AHB_BASE  + 0x041E0)
N#define LPC_USB_BASE          (LPC_AHB_BASE  + 0x0C000)
N
N/* GPIOs                                                                      */
N#define LPC_GPIO0_BASE        (LPC_GPIO_BASE + 0x00000)
N#define LPC_GPIO1_BASE        (LPC_GPIO_BASE + 0x00020)
N#define LPC_GPIO2_BASE        (LPC_GPIO_BASE + 0x00040)
N#define LPC_GPIO3_BASE        (LPC_GPIO_BASE + 0x00060)
N#define LPC_GPIO4_BASE        (LPC_GPIO_BASE + 0x00080)
N
N
N/******************************************************************************/
N/*                         Peripheral declaration                             */
N/******************************************************************************/
N#define LPC_SC                ((LPC_SC_TypeDef        *) LPC_SC_BASE       )
N#define LPC_GPIO0             ((LPC_GPIO_TypeDef      *) LPC_GPIO0_BASE    )
N#define LPC_GPIO1             ((LPC_GPIO_TypeDef      *) LPC_GPIO1_BASE    )
N#define LPC_GPIO2             ((LPC_GPIO_TypeDef      *) LPC_GPIO2_BASE    )
N#define LPC_GPIO3             ((LPC_GPIO_TypeDef      *) LPC_GPIO3_BASE    )
N#define LPC_GPIO4             ((LPC_GPIO_TypeDef      *) LPC_GPIO4_BASE    )
N#define LPC_WDT               ((LPC_WDT_TypeDef       *) LPC_WDT_BASE      )
N#define LPC_TIM0              ((LPC_TIM_TypeDef       *) LPC_TIM0_BASE     )
N#define LPC_TIM1              ((LPC_TIM_TypeDef       *) LPC_TIM1_BASE     )
N#define LPC_TIM2              ((LPC_TIM_TypeDef       *) LPC_TIM2_BASE     )
N#define LPC_TIM3              ((LPC_TIM_TypeDef       *) LPC_TIM3_BASE     )
N#define LPC_RIT               ((LPC_RIT_TypeDef       *) LPC_RIT_BASE      )
N#define LPC_UART0             ((LPC_UART_TypeDef      *) LPC_UART0_BASE    )
N#define LPC_UART1             ((LPC_UART1_TypeDef     *) LPC_UART1_BASE    )
N#define LPC_UART2             ((LPC_UART_TypeDef      *) LPC_UART2_BASE    )
N#define LPC_UART3             ((LPC_UART_TypeDef      *) LPC_UART3_BASE    )
N#define LPC_PWM1              ((LPC_PWM_TypeDef       *) LPC_PWM1_BASE     )
N#define LPC_I2C0              ((LPC_I2C_TypeDef       *) LPC_I2C0_BASE     )
N#define LPC_I2C1              ((LPC_I2C_TypeDef       *) LPC_I2C1_BASE     )
N#define LPC_I2C2              ((LPC_I2C_TypeDef       *) LPC_I2C2_BASE     )
N#define LPC_I2S               ((LPC_I2S_TypeDef       *) LPC_I2S_BASE      )
N#define LPC_SPI               ((LPC_SPI_TypeDef       *) LPC_SPI_BASE      )
N#define LPC_RTC               ((LPC_RTC_TypeDef       *) LPC_RTC_BASE      )
N#define LPC_GPIOINT           ((LPC_GPIOINT_TypeDef   *) LPC_GPIOINT_BASE  )
N#define LPC_PINCON            ((LPC_PINCON_TypeDef    *) LPC_PINCON_BASE   )
N#define LPC_SSP0              ((LPC_SSP_TypeDef       *) LPC_SSP0_BASE     )
N#define LPC_SSP1              ((LPC_SSP_TypeDef       *) LPC_SSP1_BASE     )
N#define LPC_ADC               ((LPC_ADC_TypeDef       *) LPC_ADC_BASE      )
N#define LPC_DAC               ((LPC_DAC_TypeDef       *) LPC_DAC_BASE      )
N#define LPC_CANAF_RAM         ((LPC_CANAF_RAM_TypeDef *) LPC_CANAF_RAM_BASE)
N#define LPC_CANAF             ((LPC_CANAF_TypeDef     *) LPC_CANAF_BASE    )
N#define LPC_CANCR             ((LPC_CANCR_TypeDef     *) LPC_CANCR_BASE    )
N#define LPC_CAN1              ((LPC_CAN_TypeDef       *) LPC_CAN1_BASE     )
N#define LPC_CAN2              ((LPC_CAN_TypeDef       *) LPC_CAN2_BASE     )
N#define LPC_MCPWM             ((LPC_MCPWM_TypeDef     *) LPC_MCPWM_BASE    )
N#define LPC_QEI               ((LPC_QEI_TypeDef       *) LPC_QEI_BASE      )
N#define LPC_EMAC              ((LPC_EMAC_TypeDef      *) LPC_EMAC_BASE     )
N#define LPC_GPDMA             ((LPC_GPDMA_TypeDef     *) LPC_GPDMA_BASE    )
N#define LPC_GPDMACH0          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH0_BASE )
N#define LPC_GPDMACH1          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH1_BASE )
N#define LPC_GPDMACH2          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH2_BASE )
N#define LPC_GPDMACH3          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH3_BASE )
N#define LPC_GPDMACH4          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH4_BASE )
N#define LPC_GPDMACH5          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH5_BASE )
N#define LPC_GPDMACH6          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH6_BASE )
N#define LPC_GPDMACH7          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH7_BASE )
N#define LPC_USB               ((LPC_USB_TypeDef       *) LPC_USB_BASE      )
N
N/**
N * @}
N */
N
N#endif  // __LPC17xx_H__
L 31 "Blinky.c" 2
N#include "type.h"
L 1 "type.h" 1
N/*****************************************************************************
N *   type.h:  Type definition Header file for NXP LPC17xx Family 
N *   Microprocessors
N *
N *   Copyright(C) 2009, NXP Semiconductor
N *   All rights reserved.
N *
N *   History
N *   2009.05.25  ver 1.00    Prelimnary version, first Release
N *
N******************************************************************************/
N#include <stdint.h>
N
N#ifndef __TYPE_H__
N#define __TYPE_H__
N
N#ifndef NULL
S#define NULL    ((void *)0)
N#endif
N
N#ifndef FALSE
N#define FALSE   (0)
N#endif
N
N#ifndef TRUE
N#define TRUE    (1)
N#endif
N
N
Ntypedef enum {RESET = 0, SET = !RESET} FlagStatus, ITStatus;
Ntypedef enum {DISABLE = 0, ENABLE = !DISABLE} FunctionalState;
N
N#endif  /* __TYPE_H__ */
L 32 "Blinky.c" 2
N
N#include "usb.h"
L 1 "usb.h" 1
N/*----------------------------------------------------------------------------
N *      U S B  -  K e r n e l
N *----------------------------------------------------------------------------
N * Name:    usb.h
N * Purpose: USB Definitions
N * Version: V1.20
N *----------------------------------------------------------------------------
N *      This software is supplied "AS IS" without any warranties, express,
N *      implied or statutory, including but not limited to the implied
N *      warranties of fitness for purpose, satisfactory quality and
N *      noninfringement. Keil extends you a royalty-free right to reproduce
N *      and distribute executable files created using this software for use
N *      on NXP Semiconductors LPC family microcontroller devices only. Nothing 
N *      else gives you the right to use this software.
N *
N * Copyright (c) 2009 Keil - An ARM Company. All rights reserved.
N *---------------------------------------------------------------------------*/
N
N#ifndef __USB_H__
N#define __USB_H__
N
N
Ntypedef __packed union {
N  uint16_t W;
N  __packed struct {
N    uint8_t L;
N    uint8_t H;
N  } WB;
N} WORD_BYTE;
N
N
N/* bmRequestType.Dir */
N#define REQUEST_HOST_TO_DEVICE     0
N#define REQUEST_DEVICE_TO_HOST     1
N
N/* bmRequestType.Type */
N#define REQUEST_STANDARD           0
N#define REQUEST_CLASS              1
N#define REQUEST_VENDOR             2
N#define REQUEST_RESERVED           3
N
N/* bmRequestType.Recipient */
N#define REQUEST_TO_DEVICE          0
N#define REQUEST_TO_INTERFACE       1
N#define REQUEST_TO_ENDPOINT        2
N#define REQUEST_TO_OTHER           3
N
N/* bmRequestType Definition */
Ntypedef __packed union _REQUEST_TYPE {
N  __packed struct _BM {
N    uint8_t Recipient : 5;
N    uint8_t Type      : 2;
N    uint8_t Dir       : 1;
N  } BM;
N  uint8_t B;
N} REQUEST_TYPE;
N
N/* USB Standard Request Codes */
N#define USB_REQUEST_GET_STATUS                 0
N#define USB_REQUEST_CLEAR_FEATURE              1
N#define USB_REQUEST_SET_FEATURE                3
N#define USB_REQUEST_SET_ADDRESS                5
N#define USB_REQUEST_GET_DESCRIPTOR             6
N#define USB_REQUEST_SET_DESCRIPTOR             7
N#define USB_REQUEST_GET_CONFIGURATION          8
N#define USB_REQUEST_SET_CONFIGURATION          9
N#define USB_REQUEST_GET_INTERFACE              10
N#define USB_REQUEST_SET_INTERFACE              11
N#define USB_REQUEST_SYNC_FRAME                 12
N
N/* USB GET_STATUS Bit Values */
N#define USB_GETSTATUS_SELF_POWERED             0x01
N#define USB_GETSTATUS_REMOTE_WAKEUP            0x02
N#define USB_GETSTATUS_ENDPOINT_STALL           0x01
N
N/* USB Standard Feature selectors */
N#define USB_FEATURE_ENDPOINT_STALL             0
N#define USB_FEATURE_REMOTE_WAKEUP              1
N
N/* USB Default Control Pipe Setup Packet */
Ntypedef __packed struct _USB_SETUP_PACKET {
N  REQUEST_TYPE bmRequestType;
N  uint8_t         bRequest;
N  WORD_BYTE    wValue;
N  WORD_BYTE    wIndex;
N  uint16_t         wLength;
N} USB_SETUP_PACKET;
N
N
N/* USB Descriptor Types */
N#define USB_DEVICE_DESCRIPTOR_TYPE                  1
N#define USB_CONFIGURATION_DESCRIPTOR_TYPE           2
N#define USB_STRING_DESCRIPTOR_TYPE                  3
N#define USB_INTERFACE_DESCRIPTOR_TYPE               4
N#define USB_ENDPOINT_DESCRIPTOR_TYPE                5
N#define USB_DEVICE_QUALIFIER_DESCRIPTOR_TYPE        6
N#define USB_OTHER_SPEED_CONFIG_DESCRIPTOR_TYPE      7
N#define USB_INTERFACE_POWER_DESCRIPTOR_TYPE         8
N#define USB_OTG_DESCRIPTOR_TYPE                     9
N#define USB_DEBUG_DESCRIPTOR_TYPE                  10
N#define USB_INTERFACE_ASSOCIATION_DESCRIPTOR_TYPE  11 
N
N/* USB Device Classes */
N#define USB_DEVICE_CLASS_RESERVED              0x00
N#define USB_DEVICE_CLASS_AUDIO                 0x01
N#define USB_DEVICE_CLASS_COMMUNICATIONS        0x02
N#define USB_DEVICE_CLASS_HUMAN_INTERFACE       0x03
N#define USB_DEVICE_CLASS_MONITOR               0x04
N#define USB_DEVICE_CLASS_PHYSICAL_INTERFACE    0x05
N#define USB_DEVICE_CLASS_POWER                 0x06
N#define USB_DEVICE_CLASS_PRINTER               0x07
N#define USB_DEVICE_CLASS_STORAGE               0x08
N#define USB_DEVICE_CLASS_HUB                   0x09
N#define USB_DEVICE_CLASS_MISCELLANEOUS         0xEF
N#define USB_DEVICE_CLASS_VENDOR_SPECIFIC       0xFF
N
N/* bmAttributes in Configuration Descriptor */
N#define USB_CONFIG_POWERED_MASK                0x40
N#define USB_CONFIG_BUS_POWERED                 0x80
N#define USB_CONFIG_SELF_POWERED                0xC0
N#define USB_CONFIG_REMOTE_WAKEUP               0x20
N
N/* bMaxPower in Configuration Descriptor */
N#define USB_CONFIG_POWER_MA(mA)                ((mA)/2)
N
N/* bEndpointAddress in Endpoint Descriptor */
N#define USB_ENDPOINT_DIRECTION_MASK            0x80
N#define USB_ENDPOINT_OUT(addr)                 ((addr) | 0x00)
N#define USB_ENDPOINT_IN(addr)                  ((addr) | 0x80)
N
N/* bmAttributes in Endpoint Descriptor */
N#define USB_ENDPOINT_TYPE_MASK                 0x03
N#define USB_ENDPOINT_TYPE_CONTROL              0x00
N#define USB_ENDPOINT_TYPE_ISOCHRONOUS          0x01
N#define USB_ENDPOINT_TYPE_BULK                 0x02
N#define USB_ENDPOINT_TYPE_INTERRUPT            0x03
N#define USB_ENDPOINT_SYNC_MASK                 0x0C
N#define USB_ENDPOINT_SYNC_NO_SYNCHRONIZATION   0x00
N#define USB_ENDPOINT_SYNC_ASYNCHRONOUS         0x04
N#define USB_ENDPOINT_SYNC_ADAPTIVE             0x08
N#define USB_ENDPOINT_SYNC_SYNCHRONOUS          0x0C
N#define USB_ENDPOINT_USAGE_MASK                0x30
N#define USB_ENDPOINT_USAGE_DATA                0x00
N#define USB_ENDPOINT_USAGE_FEEDBACK            0x10
N#define USB_ENDPOINT_USAGE_IMPLICIT_FEEDBACK   0x20
N#define USB_ENDPOINT_USAGE_RESERVED            0x30
N
N/* USB Standard Device Descriptor */
Ntypedef __packed struct _USB_DEVICE_DESCRIPTOR {
N  uint8_t  bLength;
N  uint8_t  bDescriptorType;
N  uint16_t  bcdUSB;
N  uint8_t  bDeviceClass;
N  uint8_t  bDeviceSubClass;
N  uint8_t  bDeviceProtocol;
N  uint8_t  bMaxPacketSize0;
N  uint16_t  idVendor;
N  uint16_t  idProduct;
N  uint16_t  bcdDevice;
N  uint8_t  iManufacturer;
N  uint8_t  iProduct;
N  uint8_t  iSerialNumber;
N  uint8_t  bNumConfigurations;
N} USB_DEVICE_DESCRIPTOR;
N
N/* USB 2.0 Device Qualifier Descriptor */
Ntypedef __packed struct _USB_DEVICE_QUALIFIER_DESCRIPTOR {
N  uint8_t  bLength;
N  uint8_t  bDescriptorType;
N  uint16_t  bcdUSB;
N  uint8_t  bDeviceClass;
N  uint8_t  bDeviceSubClass;
N  uint8_t  bDeviceProtocol;
N  uint8_t  bMaxPacketSize0;
N  uint8_t  bNumConfigurations;
N  uint8_t  bReserved;
N} USB_DEVICE_QUALIFIER_DESCRIPTOR;
N
N/* USB Standard Configuration Descriptor */
Ntypedef __packed struct _USB_CONFIGURATION_DESCRIPTOR {
N  uint8_t  bLength;
N  uint8_t  bDescriptorType;
N  uint16_t  wTotalLength;
N  uint8_t  bNumInterfaces;
N  uint8_t  bConfigurationValue;
N  uint8_t  iConfiguration;
N  uint8_t  bmAttributes;
N  uint8_t  bMaxPower;
N} USB_CONFIGURATION_DESCRIPTOR;
N
N/* USB Standard Interface Descriptor */
Ntypedef __packed struct _USB_INTERFACE_DESCRIPTOR {
N  uint8_t  bLength;
N  uint8_t  bDescriptorType;
N  uint8_t  bInterfaceNumber;
N  uint8_t  bAlternateSetting;
N  uint8_t  bNumEndpoints;
N  uint8_t  bInterfaceClass;
N  uint8_t  bInterfaceSubClass;
N  uint8_t  bInterfaceProtocol;
N  uint8_t  iInterface;
N} USB_INTERFACE_DESCRIPTOR;
N
N/* USB Standard Endpoint Descriptor */
Ntypedef __packed struct _USB_ENDPOINT_DESCRIPTOR {
N  uint8_t  bLength;
N  uint8_t  bDescriptorType;
N  uint8_t  bEndpointAddress;
N  uint8_t  bmAttributes;
N  uint16_t  wMaxPacketSize;
N  uint8_t  bInterval;
N} USB_ENDPOINT_DESCRIPTOR;
N
N/* USB String Descriptor */
Ntypedef __packed struct _USB_STRING_DESCRIPTOR {
N  uint8_t  bLength;
N  uint8_t  bDescriptorType;
N  uint16_t  bString/*[]*/;
N} USB_STRING_DESCRIPTOR;
N
N/* USB Common Descriptor */
Ntypedef __packed struct _USB_COMMON_DESCRIPTOR {
N  uint8_t  bLength;
N  uint8_t  bDescriptorType;
N} USB_COMMON_DESCRIPTOR;
N
N
N#endif  /* __USB_H__ */
L 34 "Blinky.c" 2
N#include "usbcfg.h"
L 1 "usbcfg.h" 1
N/*----------------------------------------------------------------------------
N *      U S B  -  K e r n e l
N *----------------------------------------------------------------------------
N * Name:    usbcfg.h
N * Purpose: USB Custom Configuration
N * Version: V1.20
N *----------------------------------------------------------------------------
N *      This software is supplied "AS IS" without any warranties, express,
N *      implied or statutory, including but not limited to the implied
N *      warranties of fitness for purpose, satisfactory quality and
N *      noninfringement. Keil extends you a royalty-free right to reproduce
N *      and distribute executable files created using this software for use
N *      on NXP Semiconductors LPC family microcontroller devices only. Nothing 
N *      else gives you the right to use this software.
N *
N * Copyright (c) 2009 Keil - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------
N * History:
N *          V1.20 Added vendor specific support
N *          V1.00 Initial Version
N *----------------------------------------------------------------------------*/
N
N#ifndef __USBCFG_H__
N#define __USBCFG_H__
N
N
N//*** <<< Use Configuration Wizard in Context Menu >>> ***
N
N
N/*
N// <h> USB Configuration
N//   <o0> USB Power
N//        <i> Default Power Setting
N//        <0=> Bus-powered
N//        <1=> Self-powered
N//   <o1> Max Number of Interfaces <1-256>
N//   <o2> Max Number of Endpoints  <1-32>
N//   <o3> Max Endpoint 0 Packet Size
N//        <8=> 8 Bytes <16=> 16 Bytes <32=> 32 Bytes <64=> 64 Bytes
N//   <e4> DMA Transfer
N//     <i> Use DMA for selected Endpoints
N//     <o5.0>  Endpoint 0 Out
N//     <o5.1>  Endpoint 0 In
N//     <o5.2>  Endpoint 1 Out
N//     <o5.3>  Endpoint 1 In
N//     <o5.4>  Endpoint 2 Out
N//     <o5.5>  Endpoint 2 In
N//     <o5.6>  Endpoint 3 Out
N//     <o5.7>  Endpoint 3 In
N//     <o5.8>  Endpoint 4 Out
N//     <o5.9>  Endpoint 4 In
N//     <o5.10> Endpoint 5 Out
N//     <o5.11> Endpoint 5 In
N//     <o5.12> Endpoint 6 Out
N//     <o5.13> Endpoint 6 In
N//     <o5.14> Endpoint 7 Out
N//     <o5.15> Endpoint 7 In
N//     <o5.16> Endpoint 8 Out
N//     <o5.17> Endpoint 8 In
N//     <o5.18> Endpoint 9 Out
N//     <o5.19> Endpoint 9 In
N//     <o5.20> Endpoint 10 Out
N//     <o5.21> Endpoint 10 In
N//     <o5.22> Endpoint 11 Out
N//     <o5.23> Endpoint 11 In
N//     <o5.24> Endpoint 12 Out
N//     <o5.25> Endpoint 12 In
N//     <o5.26> Endpoint 13 Out
N//     <o5.27> Endpoint 13 In
N//     <o5.28> Endpoint 14 Out
N//     <o5.29> Endpoint 14 In
N//     <o5.30> Endpoint 15 Out
N//     <o5.31> Endpoint 15 In
N//   </e>
N// </h>
N*/
N
N#define USB_POWER           0
N#define USB_IF_NUM          4
N#define USB_EP_NUM          32
N#define USB_MAX_PACKET0     64
N#define USB_DMA             1
N#define USB_DMA_EP          0x00000040
N
N
N/*
N// <h> USB Event Handlers
N//   <h> Device Events
N//     <o0.0> Power Event
N//     <o1.0> Reset Event
N//     <o2.0> Suspend Event
N//     <o3.0> Resume Event
N//     <o4.0> Remote Wakeup Event
N//     <o5.0> Start of Frame Event
N//     <o6.0> Error Event
N//   </h>
N//   <h> Endpoint Events
N//     <o7.0>  Endpoint 0 Event
N//     <o7.1>  Endpoint 1 Event
N//     <o7.2>  Endpoint 2 Event
N//     <o7.3>  Endpoint 3 Event
N//     <o7.4>  Endpoint 4 Event
N//     <o7.5>  Endpoint 5 Event
N//     <o7.6>  Endpoint 6 Event
N//     <o7.7>  Endpoint 7 Event
N//     <o7.8>  Endpoint 8 Event
N//     <o7.9>  Endpoint 9 Event
N//     <o7.10> Endpoint 10 Event
N//     <o7.11> Endpoint 11 Event
N//     <o7.12> Endpoint 12 Event
N//     <o7.13> Endpoint 13 Event
N//     <o7.14> Endpoint 14 Event
N//     <o7.15> Endpoint 15 Event
N//   </h>
N//   <h> USB Core Events
N//     <o8.0>  Set Configuration Event
N//     <o9.0>  Set Interface Event
N//     <o10.0> Set/Clear Feature Event
N//   </h>
N// </h>
N*/
N
N#define USB_POWER_EVENT     0
N#define USB_RESET_EVENT     1
N#define USB_SUSPEND_EVENT   0
N#define USB_RESUME_EVENT    0
N#define USB_WAKEUP_EVENT    0
N#define USB_SOF_EVENT       1
N#define USB_ERROR_EVENT     0
N#define USB_EP_EVENT        0x0009
N#define USB_CONFIGURE_EVENT 0
N#define USB_INTERFACE_EVENT 0
N#define USB_FEATURE_EVENT   0
N
N
N/*
N// <e0> USB Class Support
N//   <i> enables USB Class specific Requests
N//   <e1> Human Interface Device (HID)
N//     <o2> Interface Number <0-255>
N//   </e>
N//   <e3> Mass Storage
N//     <o4> Interface Number <0-255>
N//   </e>
N//   <e5> Audio Device
N//     <o6> Control Interface Number <0-255>
N//     <o7> Streaming Interface 1 Number <0-255>
N//     <o8> Streaming Interface 2 Number <0-255>
N//   </e>
N//   <e9> Communication Device
N//     <o10> Control Interface Number <0-255>
N//     <o11> Bulk Interface Number <0-255>
N//     <o12> Max Communication Device Buffer Size
N//        <8=> 8 Bytes <16=> 16 Bytes <32=> 32 Bytes <64=> 64 Bytes 
N//   </e>
N// </e>
N*/
N
N#define USB_CLASS           1
N#define USB_HID             0
N#define USB_HID_IF_NUM      0
N#define USB_MSC             0
N#define USB_MSC_IF_NUM      0
N#define USB_AUDIO           1
N#define USB_ADC_CIF_NUM     0
N#define USB_ADC_SIF1_NUM    1
N#define USB_ADC_SIF2_NUM    2
N#define USB_CDC  			0
N#define USB_CDC_CIF_NUM     0
N#define USB_CDC_DIF_NUM     1
N#define USB_CDC_BUFSIZE     64
N
N/*
N// <e0> USB Vendor Support
N//   <i> enables USB Vendor specific Requests
N// </e>
N*/
N#define USB_VENDOR          0
N
N
N#endif  /* __USBCFG_H__ */
L 35 "Blinky.c" 2
N#include "usbhw.h"
L 1 "usbhw.h" 1
N/*----------------------------------------------------------------------------
N *      U S B  -  K e r n e l
N *----------------------------------------------------------------------------
N * Name:    usbhw.h
N * Purpose: USB Hardware Layer Definitions
N * Version: V1.20
N *----------------------------------------------------------------------------
N *      This software is supplied "AS IS" without any warranties, express,
N *      implied or statutory, including but not limited to the implied
N *      warranties of fitness for purpose, satisfactory quality and
N *      noninfringement. Keil extends you a royalty-free right to reproduce
N *      and distribute executable files created using this software for use
N *      on NXP Semiconductors LPC family microcontroller devices only. Nothing 
N *      else gives you the right to use this software.
N *
N * Copyright (c) 2009 Keil - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------
N * History:
N *          V1.20 Added USB_ClearEPBuf 
N *          V1.00 Initial Version
N *----------------------------------------------------------------------------*/
N
N#ifndef __USBHW_H__
N#define __USBHW_H__
N
N
N/* USB RAM Definitions */
N#define USB_RAM_ADR     0x20080000  /* USB RAM Start Address */
N#define USB_RAM_SZ      0x00004000  /* USB RAM Size (4kB) */
N
N/* DMA Endpoint Descriptors */
N#define DD_NISO_CNT             16  /* Non-Iso EP DMA Descr. Count (max. 32) */
N#define DD_ISO_CNT               8  /* Iso EP DMA Descriptor Count (max. 32) */
N#define DD_NISO_SZ    (DD_NISO_CNT * 16)    /* Non-Iso DMA Descr. Size */
N#define DD_ISO_SZ     (DD_ISO_CNT  * 20)    /* Iso DMA Descriptor Size */
N#define DD_NISO_ADR   (USB_RAM_ADR + 128)   /* Non-Iso DMA Descr. Address */
N#define DD_ISO_ADR    (DD_NISO_ADR + DD_NISO_SZ) /* Iso DMA Descr. Address */
N#define DD_SZ                 (128 + DD_NISO_SZ + DD_ISO_SZ) /* Descr. Size */
N
N/* DMA Buffer Memory Definitions */
N#define DMA_BUF_ADR   (USB_RAM_ADR + DD_SZ) /* DMA Buffer Start Address */
N#define DMA_BUF_SZ    (USB_RAM_SZ  - DD_SZ) /* DMA Buffer Size */
N
N/* USB Error Codes */
N#define USB_ERR_PID         0x0001  /* PID Error */
N#define USB_ERR_UEPKT       0x0002  /* Unexpected Packet */
N#define USB_ERR_DCRC        0x0004  /* Data CRC Error */
N#define USB_ERR_TIMOUT      0x0008  /* Bus Time-out Error */
N#define USB_ERR_EOP         0x0010  /* End of Packet Error */
N#define USB_ERR_B_OVRN      0x0020  /* Buffer Overrun */
N#define USB_ERR_BTSTF       0x0040  /* Bit Stuff Error */
N#define USB_ERR_TGL         0x0080  /* Toggle Bit Error */
N
N/* USB DMA Status Codes */
N#define USB_DMA_INVALID     0x0000  /* DMA Invalid - Not Configured */
N#define USB_DMA_IDLE        0x0001  /* DMA Idle - Waiting for Trigger */
N#define USB_DMA_BUSY        0x0002  /* DMA Busy - Transfer in progress */
N#define USB_DMA_DONE        0x0003  /* DMA Transfer Done (no Errors)*/
N#define USB_DMA_OVER_RUN    0x0004  /* Data Over Run */
N#define USB_DMA_UNDER_RUN   0x0005  /* Data Under Run (Short Packet) */
N#define USB_DMA_ERROR       0x0006  /* Error */
N#define USB_DMA_UNKNOWN     0xFFFF  /* Unknown State */
N
N/* USB DMA Descriptor */
Ntypedef struct _USB_DMA_DESCRIPTOR {
N  uint32_t BufAdr;                     /* DMA Buffer Address */
N  uint16_t  BufLen;                     /* DMA Buffer Length */
N  uint16_t  MaxSize;                    /* Maximum Packet Size */
N  uint32_t InfoAdr;                    /* Packet Info Memory Address */
N  union {                           /* DMA Configuration */
N    struct {
N      uint32_t Link   : 1;             /* Link to existing Descriptors */
N      uint32_t IsoEP  : 1;             /* Isonchronous Endpoint */
N      uint32_t ATLE   : 1;             /* ATLE (Auto Transfer Length Extract) */
N      uint32_t Rsrvd  : 5;             /* Reserved */
N      uint32_t LenPos : 8;             /* Length Position (ATLE) */
N    } Type;
N    uint32_t Val;
N  } Cfg;
N} USB_DMA_DESCRIPTOR;
N
N/* USB Hardware Functions */
Nextern void  USB_Init       (void);
Nextern void  USB_Connect    (uint32_t  con);
Nextern void  USB_Reset      (void);
Nextern void  USB_Suspend    (void);
Nextern void  USB_Resume     (void);
Nextern void  USB_WakeUp     (void);
Nextern void  USB_WakeUpCfg  (uint32_t  cfg);
Nextern void  USB_SetAddress (uint32_t adr);
Nextern void  USB_Configure  (uint32_t  cfg);
Nextern void  USB_ConfigEP   (USB_ENDPOINT_DESCRIPTOR *pEPD);
Nextern void  USB_DirCtrlEP  (uint32_t dir);
Nextern void  USB_EnableEP   (uint32_t EPNum);
Nextern void  USB_DisableEP  (uint32_t EPNum);
Nextern void  USB_ResetEP    (uint32_t EPNum);
Nextern void  USB_SetStallEP (uint32_t EPNum);
Nextern void  USB_ClrStallEP (uint32_t EPNum);
Nextern void USB_ClearEPBuf  (uint32_t  EPNum);
Nextern uint32_t USB_ReadEP     (uint32_t EPNum, uint8_t *pData);
Nextern uint32_t USB_WriteEP    (uint32_t EPNum, uint8_t *pData, uint32_t cnt);
Nextern uint32_t  USB_DMA_Setup  (uint32_t EPNum, USB_DMA_DESCRIPTOR *pDD);
Nextern void  USB_DMA_Enable (uint32_t EPNum);
Nextern void  USB_DMA_Disable(uint32_t EPNum);
Nextern uint32_t USB_DMA_Status (uint32_t EPNum);
Nextern uint32_t USB_DMA_BufAdr (uint32_t EPNum);
Nextern uint32_t USB_DMA_BufCnt (uint32_t EPNum);
Nextern uint32_t USB_GetFrame   (void);
Nextern void  USB_IRQHandler (void);
N
N
N#endif  /* __USBHW_H__ */
L 36 "Blinky.c" 2
N#include "usbcore.h"
L 1 "usbcore.h" 1
N/*----------------------------------------------------------------------------
N *      U S B  -  K e r n e l
N *----------------------------------------------------------------------------
N * Name:    usbcore.h
N * Purpose: USB Core Definitions
N * Version: V1.20
N *----------------------------------------------------------------------------
N *      This software is supplied "AS IS" without any warranties, express,
N *      implied or statutory, including but not limited to the implied
N *      warranties of fitness for purpose, satisfactory quality and
N *      noninfringement. Keil extends you a royalty-free right to reproduce
N *      and distribute executable files created using this software for use
N *      on NXP Semiconductors LPC family microcontroller devices only. Nothing 
N *      else gives you the right to use this software.
N *
N * Copyright (c) 2009 Keil - An ARM Company. All rights reserved.
N *---------------------------------------------------------------------------*/
N
N#ifndef __USBCORE_H__
N#define __USBCORE_H__
N
N
N/* USB Endpoint Data Structure */
Ntypedef struct _USB_EP_DATA {
N  uint8_t  *pData;
N  uint16_t Count;
N} USB_EP_DATA;
N
N/* USB Core Global Variables */
Nextern uint16_t USB_DeviceStatus;
Nextern uint8_t  USB_DeviceAddress;
Nextern uint8_t  USB_Configuration;
Nextern uint32_t USB_EndPointMask;
Nextern uint32_t USB_EndPointHalt;
Nextern uint32_t USB_EndPointStall;
Nextern uint8_t  USB_AltSetting[USB_IF_NUM];
Xextern uint8_t  USB_AltSetting[4];
N
N/* USB Endpoint 0 Buffer */
Nextern uint8_t  EP0Buf[USB_MAX_PACKET0];
Xextern uint8_t  EP0Buf[64];
N
N/* USB Endpoint 0 Data Info */
Nextern USB_EP_DATA EP0Data;
N
N/* USB Setup Packet */
Nextern USB_SETUP_PACKET SetupPacket;
N
N/* USB Core Functions */
Nextern void USB_ResetCore (void);
N
N
N
N#endif  /* __USBCORE_H__ */
L 37 "Blinky.c" 2
N#include "usbaudio.h"
L 1 "usbaudio.h" 1
N/*----------------------------------------------------------------------------
N *      Name:    usbaudio.h
N *      Purpose: USB Audio Demo Definitions
N *      Version: V1.10
N *----------------------------------------------------------------------------
N *      This software is supplied "AS IS" without any warranties, express,
N *      implied or statutory, including but not limited to the implied
N *      warranties of fitness for purpose, satisfactory quality and
N *      noninfringement. Keil extends you a royalty-free right to reproduce
N *      and distribute executable files created using this software for use
N *      on NXP Semiconductors LPC family microcontroller devices only. Nothing 
N *      else gives you the right to use this software.
N *
N * Copyright (c) 2009 Keil - An ARM Company. All rights reserved.
N *---------------------------------------------------------------------------*/
N
N/* Audio Definitions */
N#define DATA_FREQ 32000                 /* Audio Data Frequency */
N#define P_S       32                    /* Packet Size */
N#if USB_DMA
X#if 1
N#define P_C       4                     /* Packet Count */
N#else
S#define P_C       1                     /* Packet Count */
N#endif
N#define B_S       (8*P_C*P_S)           /* Buffer Size */
N
N/* Push Button Definitions */
N// #define PBINT     0x00004000            /* P0.14 */
N
N/* LED Definitions */
N#define LEDMSK    0x000000FF            /* P2.0..7 */
N
N/* Audio Demo Variables */
Nextern uint8_t  Mute;                      /* Mute State */
Nextern uint32_t Volume;                    /* Volume Level */
Nextern uint16_t  VolCur;                    /* Volume Current Value */
N#if !USB_DMA
X#if !1
Sextern uint32_t InfoBuf[P_C];              /* Packet Info Buffer */
Sextern short DataBuf[B_S];              /* Data Buffer */
N#else
Nextern uint32_t *InfoBuf;
Nextern short *DataBuf;
N#endif
Nextern uint16_t  DataOut;                   /* Data Out Index */
Nextern uint16_t  DataIn;                    /* Data In Index */
Nextern uint8_t   DataRun;                   /* Data Stream Run State */
L 38 "Blinky.c" 2
N
Nextern  void SystemClockUpdate(void);
Nextern uint32_t SystemFrequency;  
Nuint8_t  Mute;                                 
Nuint32_t Volume;                               
N
N#if USB_DMA
X#if 1
Nuint32_t *InfoBuf = (uint32_t *)(DMA_BUF_ADR);
Xuint32_t *InfoBuf = (uint32_t *)((0x20080000 + (128 + (16 * 16) + (8 * 20))));
Nshort *DataBuf = (short *)(DMA_BUF_ADR + 4*P_C);
Xshort *DataBuf = (short *)((0x20080000 + (128 + (16 * 16) + (8 * 20))) + 4*4);
N#else
Suint32_t InfoBuf[P_C];
Sshort DataBuf[B_S];                         
N#endif
N
Nuint16_t  DataOut;                              
Nuint16_t  DataIn;                               
N
Nuint8_t   DataRun;                              
Nuint16_t  PotVal;                               
Nuint32_t  VUM;                                  
Nuint32_t  Tick;                                 
N
N// Define joystick button bit values (based on hardware design)
N#define KBD_SELECT 0x01   // Select button on joystick
N#define KBD_UP     0x08   // Up button
N#define KBD_RIGHT  0x10   // Right button
N#define KBD_DOWN   0x20   // Down button
N#define KBD_LEFT   0x40   // Left button
N#define KBD_MASK   0x79   // Mask for the relevant joystick bits (excluding Select)
N
N#define __FI        1                      // Font index for the LCD (16x24 font size)
N#define __USE_LCD   1                      // Set to 1 to enable LCD output (disabled by default)
N
N// External variables/functions to interact with the joystick
Nextern uint32_t KBD_val;
Nextern void KBD_Init(void);       // Joystick initialization function
Nextern uint32_t KBD_get(void);    // Function to get joystick status
Nextern uint32_t get_button(void);		// Function to get joystick value
Nvolatile uint32_t kbd_val;        // Global variable to store joystick status (debugging)
N
Nint currentImage;
Nchar reactionTimeStr[20];
N
Nvoid delay (uint32_t delay_time) {
N
N	volatile uint32_t i;
N	
N	for (i = 0; i < delay_time; i++) {
N	
N	}
N
N}
N
Nvoid slideshow() {
N	
N	
N	GLCD_Clear(White);
X	GLCD_Clear(0xFFFF);
N	
N	
N	while (1) {
N		uint32_t joystickInput = get_button();
N		
N		if (joystickInput == KBD_DOWN) {
X		if (joystickInput == 0x20) {
N		currentImage++;
N		GLCD_Clear(White);	
X		GLCD_Clear(0xFFFF);	
N		
N		if (currentImage > 2) {
N			currentImage = 0;
N		}
N		
N		delay(10000000);
N			
N		}
N		
N		if (joystickInput == KBD_UP) {
X		if (joystickInput == 0x08) {
N		currentImage--;
N		GLCD_Clear(White);	
X		GLCD_Clear(0xFFFF);	
N		
N		if (currentImage < 0) {
N			currentImage = 2;
N		}
N		
N		delay(10000000);
N			
N		}
N	
N		switch (currentImage) {
N		
N			case 0:
N				GLCD_DisplayString(0, 0, __FI, "     Slideshow!     ");
X				GLCD_DisplayString(0, 0, 1, "     Slideshow!     ");
N				GLCD_DisplayString(1, 0, __FI, "      IMAGE  1      ");
X				GLCD_DisplayString(1, 0, 1, "      IMAGE  1      ");
N				GLCD_Bitmap(160-50, 120-48, REDBULL_WIDTH, REDBULL_HEIGHT, REDBULL_PIXEL_DATA);
X				GLCD_Bitmap(160-50, 120-48, (100), (100), ((unsigned char*) REDBULL_pixel_data));
N				GLCD_DisplayString(9, 0, __FI, " USE ^ and v to CTRL ");
X				GLCD_DisplayString(9, 0, 1, " USE ^ and v to CTRL ");
N				break;
N			case 1:
N				GLCD_DisplayString(0, 0, __FI, "     Slideshow!     ");
X				GLCD_DisplayString(0, 0, 1, "     Slideshow!     ");
N				GLCD_DisplayString(1, 0, __FI, "      IMAGE  2      ");
X				GLCD_DisplayString(1, 0, 1, "      IMAGE  2      ");
N				GLCD_Bitmap(160-50, 120-50, MERC_WIDTH, MERC_HEIGHT, MERC_PIXEL_DATA);
X				GLCD_Bitmap(160-50, 120-50, (100), (100), ((unsigned char*) MERC_pixel_data));
N				GLCD_DisplayString(9, 0, __FI, " USE ^ and v to CTRL ");
X				GLCD_DisplayString(9, 0, 1, " USE ^ and v to CTRL ");
N				break;
N			case 2:
N				GLCD_DisplayString(0, 0, __FI, "     Slideshow!     ");
X				GLCD_DisplayString(0, 0, 1, "     Slideshow!     ");
N				GLCD_DisplayString(1, 0, __FI, "      IMAGE  3      ");
X				GLCD_DisplayString(1, 0, 1, "      IMAGE  3      ");
N				GLCD_Bitmap(160-50, 120-50, HAAS_WIDTH, HAAS_HEIGHT, HAAS_PIXEL_DATA);
X				GLCD_Bitmap(160-50, 120-50, (100), (97), ((unsigned char*) HAAS_pixel_data));
N				GLCD_DisplayString(9, 0, __FI, " USE ^ and v to CTRL ");
X				GLCD_DisplayString(9, 0, 1, " USE ^ and v to CTRL ");
N				break;
N		}
N	
N		if (joystickInput == KBD_LEFT) {
X		if (joystickInput == 0x40) {
N			GLCD_Clear(White);
X			GLCD_Clear(0xFFFF);
N			return;
N		}
N	}
N	
N	
N}
N
N// GLCD_Bitmap(160-50, 120-50, GIMP_IMAGE_WIDTH, GIMP_IMAGE_HEIGHT, GIMP_IMAGE_PIXEL_DATA);
N
N
Nvoid reactionTimeGame() {
N	
N	uint32_t joystickInput;
N	uint32_t startTime = 0;
N    uint32_t reactionTime = 0;
N    uint32_t currentTime = 0;
N    int time_counter = 0;  // Used for incrementing the time
N	
N	GLCD_Clear(White);
X	GLCD_Clear(0xFFFF);
N    GLCD_SetTextColor(Black);
X    GLCD_SetTextColor(0x0000);
N	
N
N	
N		while (1) {
N		
N		GLCD_DisplayString(0, 0, __FI, "   Welcome to the   ");
X		GLCD_DisplayString(0, 0, 1, "   Welcome to the   ");
N    	GLCD_DisplayString(1, 0, __FI, " Reaction Time Game ");
X    	GLCD_DisplayString(1, 0, 1, " Reaction Time Game ");
N
N    	GLCD_DisplayString(8, 0, __FI, "    Start Game ->   ");
X    	GLCD_DisplayString(8, 0, 1, "    Start Game ->   ");
N    	GLCD_DisplayString(9, 0, __FI, "   <- Return Home   ");	
X    	GLCD_DisplayString(9, 0, 1, "   <- Return Home   ");	
N			
N		joystickInput = get_button();
N			
N		if (joystickInput == KBD_RIGHT) {
X		if (joystickInput == 0x10) {
N			
N		GLCD_Clear(White);
X		GLCD_Clear(0xFFFF);
N		GLCD_DisplayString(5, 0, __FI, "PRESS SELECT WHEN IT");
X		GLCD_DisplayString(5, 0, 1, "PRESS SELECT WHEN IT");
N		GLCD_DisplayString(6, 0, __FI, "     GOES BLACK     ");
X		GLCD_DisplayString(6, 0, 1, "     GOES BLACK     ");
N
N    	delay(80000000);
N    	GLCD_Clear(Black);  // Optionally clear screen before flashing   
X    	GLCD_Clear(0x0000);  
N
N		GLCD_SetTextColor(Black);
X		GLCD_SetTextColor(0x0000);
N	
N		// Start measuring reaction time (time between GLCD background change and button press)
N    	startTime = 0;  // Start the counter at 0 when background color is changed
N
N    	// Change background color to signal user
N    	GLCD_Clear(White);  // Flash the screen with a different color (e.g., white)
X    	GLCD_Clear(0xFFFF);  
N
N		while (1) {
N        // Increment the counter (this represents time passed in your game)
N        delay(1000);  // Adjust this to control the speed of time incrementation
N        time_counter++;    // Each loop is one "tick" of time passed
N        currentTime = time_counter;
N
N        // Check if the joystick button is pressed
N        joystickInput = get_button();
N        if (joystickInput == KBD_SELECT) {  // The user presses the joystick
X        if (joystickInput == 0x01) {  
N            reactionTime = currentTime;  // Store reaction time as the time passed
N            break;  // Exit the loop once the button is pressed
N        }
N				
N			}
N
N			sprintf(reactionTimeStr, "Reaction Time: %d", reactionTime);  // Convert time to string
N
N			while (1) {
N				joystickInput = get_button();
N				
W "Blinky.c" 218 36 argument of type "char *" is incompatible with parameter of type "unsigned char *"
N				GLCD_DisplayString(5, 0, __FI, reactionTimeStr);
X				GLCD_DisplayString(5, 0, 1, reactionTimeStr);
N				
N				if (reactionTime < 500) {
N					GLCD_SetTextColor(DarkGreen);
X					GLCD_SetTextColor(0x03E0);
N					GLCD_DisplayString(6, 0, __FI, "      You Win!      ");
X					GLCD_DisplayString(6, 0, 1, "      You Win!      ");
N					GLCD_DisplayString(9, 0, __FI, "   <- Restart Game   ");	
X					GLCD_DisplayString(9, 0, 1, "   <- Restart Game   ");	
N				}
N				
N				if (reactionTime > 500) {
N					GLCD_SetTextColor(Red);
X					GLCD_SetTextColor(0xF800);
N					GLCD_DisplayString(6, 0, __FI, "      You Lose      ");
X					GLCD_DisplayString(6, 0, 1, "      You Lose      ");
N					GLCD_DisplayString(9, 0, __FI, "   <- Restart Game  ");	
X					GLCD_DisplayString(9, 0, 1, "   <- Restart Game  ");	
N				}
N				
N				
N				if (joystickInput == KBD_LEFT) {
X				if (joystickInput == 0x40) {
N					reactionTimeGame();
N					return;
N				}
N
N        }
N	}
N		
N			if (joystickInput == KBD_LEFT) {
X			if (joystickInput == 0x40) {
N				GLCD_Clear(White);
X				GLCD_Clear(0xFFFF);
N				return;
N			}
N
N	}
W "Blinky.c" 161 11 variable "startTime"  was set but never used
N}
N
N
Nvoid mp3Player() {
N
N  uint32_t joystickInput;
N
N	volatile uint32_t pclkdiv, pclk;
N
N	SystemClockUpdate();
N
N	LPC_PINCON->PINSEL1 &=~((0x03<<18)|(0x03<<20));  
X	((LPC_PINCON_TypeDef *) ((0x40000000UL) + 0x2C000) )->PINSEL1 &=~((0x03<<18)|(0x03<<20));  
N	LPC_PINCON->PINSEL1 |= ((0x01<<18)|(0x02<<20));
X	((LPC_PINCON_TypeDef *) ((0x40000000UL) + 0x2C000) )->PINSEL1 |= ((0x01<<18)|(0x02<<20));
N
N	LPC_SC->PCONP |= (1 << 12);
X	((LPC_SC_TypeDef *) ((0x40080000UL) + 0x7C000) )->PCONP |= (1 << 12);
N
N
N	LPC_ADC->CR = 0x00200E04;		
X	((LPC_ADC_TypeDef *) ((0x40000000UL) + 0x34000) )->CR = 0x00200E04;		
N	LPC_DAC->CR = 0x00008000;		
X	((LPC_DAC_TypeDef *) ((0x40080000UL) + 0x0C000) )->CR = 0x00008000;		
N
N	pclkdiv = (LPC_SC->PCLKSEL0 >> 2) & 0x03;
X	pclkdiv = (((LPC_SC_TypeDef *) ((0x40080000UL) + 0x7C000) )->PCLKSEL0 >> 2) & 0x03;
N	switch ( pclkdiv )
N	{
N	case 0x00:
N	default:
N	pclk = SystemFrequency/4;
N	break;
N	case 0x01:
N	pclk = SystemFrequency;
N	break; 
N	case 0x02:
N	pclk = SystemFrequency/2;
N	break; 
N	case 0x03:
N	pclk = SystemFrequency/8;
N	break;
N	}
N
N	LPC_TIM0->MR0 = pclk/DATA_FREQ - 1;	
X	((LPC_TIM_TypeDef *) ((0x40000000UL) + 0x04000) )->MR0 = pclk/32000 - 1;	
N	LPC_TIM0->MCR = 3;					
X	((LPC_TIM_TypeDef *) ((0x40000000UL) + 0x04000) )->MCR = 3;					
N	LPC_TIM0->TCR = 1;					
X	((LPC_TIM_TypeDef *) ((0x40000000UL) + 0x04000) )->TCR = 1;					
N	NVIC_EnableIRQ(TIMER0_IRQn);
N
N	USB_Init();				
N	USB_Connect(TRUE);		
X	USB_Connect((1));		
N
N    GLCD_Clear(White);
X    GLCD_Clear(0xFFFF);
N    GLCD_DisplayString(1, 0, __FI, "     MP3 Player      ");
X    GLCD_DisplayString(1, 0, 1, "     MP3 Player      ");
N		GLCD_Bitmap(160-100, 120-25, AUDIOMENU_WIDTH, AUDIOMENU_HEIGHT, AUDIOMENU_PIXEL_DATA);
X		GLCD_Bitmap(160-100, 120-25, (200), (71), ((unsigned char*) AUDIOMENU_pixel_data));
N
N    while (1) {
N
N        joystickInput = get_button();
N
N        if (joystickInput == KBD_LEFT) {
X        if (joystickInput == 0x40) {
N            GLCD_Clear(White);
X            GLCD_Clear(0xFFFF);
N            return;
N        }
N
N    }
N
N}
N
N void TIMER0_IRQHandler(void) 
N {
N   long  val;
N   uint32_t cnt;
N
N   if (DataRun) {                            
N     val = DataBuf[DataOut];                 
N     cnt = (DataIn - DataOut) & (B_S - 1);   
X     cnt = (DataIn - DataOut) & ((8*4*32) - 1);   
N     if (cnt == (B_S - P_C*P_S)) {           
X     if (cnt == ((8*4*32) - 4*32)) {           
N       DataOut++;                            
N     }
N     if (cnt > (P_C*P_S)) {                  
X     if (cnt > (4*32)) {                  
N       DataOut++;                           
N     }
N     DataOut &= B_S - 1;                     
X     DataOut &= (8*4*32) - 1;                     
N     if (val < 0) VUM -= val;                
N     else         VUM += val;                
N     val  *= Volume;                         
N     val >>= 16;                            
N     val  += 0x8000;                        
N     val  &= 0xFFFF;                         
N  } else {
N     val = 0x8000;                           
N   }
N
N   if (Mute) {
N     val = 0x8000;                           
N   }
N
N   LPC_DAC->CR = val & 0xFFC0;             
X   ((LPC_DAC_TypeDef *) ((0x40080000UL) + 0x0C000) )->CR = val & 0xFFC0;             
N
N   if ((Tick++ & 0x03FF) == 0) {             
W "Blinky.c" 342 6 function "get_potval" declared implicitly
N     get_potval();                          
N     if (VolCur == 0x8000) {                 
N       Volume = 0;                       
N     } else {
N       Volume = VolCur * PotVal;            
N     }
N     val = VUM >> 20;                        
N    VUM = 0;                                
N     if (val > 7) val = 7;                 
N   }
N
N   LPC_TIM0->IR = 1;                        
X   ((LPC_TIM_TypeDef *) ((0x40000000UL) + 0x04000) )->IR = 1;                        
N}
N
N// Function to display the home menu using switch-case with a counter
Nvoid home_menu() {
N    int counter = 0;  // 0: Slideshow, 1: Game, 2: Audio
N    uint32_t joystickInput;
N		GLCD_Clear(White);  // Set background to white
X		GLCD_Clear(0xFFFF);  
N		GLCD_SetTextColor(Black);
X		GLCD_SetTextColor(0x0000);
N    GLCD_SetBackColor(White);
X    GLCD_SetBackColor(0xFFFF);
N
N
N    
N    
N    while (1) {
N    GLCD_DisplayString(0, 0, __FI, "COE718 FINAL PROJECT");
X    GLCD_DisplayString(0, 0, 1, "COE718 FINAL PROJECT");
N    GLCD_DisplayString(1, 0, __FI, "     BY:  APATH     ");
X    GLCD_DisplayString(1, 0, 1, "     BY:  APATH     ");
N    GLCD_DisplayString(2, 0, __FI, "    MEDIA CENTER    ");  
X    GLCD_DisplayString(2, 0, 1, "    MEDIA CENTER    ");  
N		GLCD_DisplayString(9, 0, __FI, " USE ^ and v to CTRL ");
X		GLCD_DisplayString(9, 0, 1, " USE ^ and v to CTRL ");
N			
N        // Menu options (text and highlighted background for selected option)
N        switch (counter) {
N            case 0: // Slideshow selected
N                GLCD_SetBackColor(Blue);  // Highlight Slideshow option
X                GLCD_SetBackColor(0x001F);  
N                GLCD_DisplayString(5, 0, __FI, "1) Slideshow------->");
X                GLCD_DisplayString(5, 0, 1, "1) Slideshow------->");
N                GLCD_SetBackColor(White);  // Reset background for the next option
X                GLCD_SetBackColor(0xFFFF);  
N                GLCD_DisplayString(6, 0, __FI, "2) Game             ");
X                GLCD_DisplayString(6, 0, 1, "2) Game             ");
N                GLCD_DisplayString(7, 0, __FI, "3) MP3 Player       ");
X                GLCD_DisplayString(7, 0, 1, "3) MP3 Player       ");
N                break;
N            case 1: // Flash Black Screen selected
N                GLCD_SetBackColor(Blue);  // Highlight Flash Black Screen option
X                GLCD_SetBackColor(0x001F);  
N                GLCD_DisplayString(6, 0, __FI, "2) Game------------>");
X                GLCD_DisplayString(6, 0, 1, "2) Game------------>");
N                GLCD_SetBackColor(White);  // Reset background for the next option
X                GLCD_SetBackColor(0xFFFF);  
N                GLCD_DisplayString(5, 0, __FI, "1) Slideshow        ");
X                GLCD_DisplayString(5, 0, 1, "1) Slideshow        ");
N                GLCD_DisplayString(7, 0, __FI, "3) MP3 Player       ");
X                GLCD_DisplayString(7, 0, 1, "3) MP3 Player       ");
N                break;
N            case 2: 
N                GLCD_SetBackColor(Blue);
X                GLCD_SetBackColor(0x001F);
N                GLCD_DisplayString(7, 0, __FI, "3) MP3 Player------>");
X                GLCD_DisplayString(7, 0, 1, "3) MP3 Player------>");
N                GLCD_SetBackColor(White);
X                GLCD_SetBackColor(0xFFFF);
N                GLCD_DisplayString(5, 0, __FI, "1) Slideshow        ");
X                GLCD_DisplayString(5, 0, 1, "1) Slideshow        ");
N                GLCD_DisplayString(6, 0, __FI, "2) Game             ");
X                GLCD_DisplayString(6, 0, 1, "2) Game             ");
N        }
N        
N        joystickInput = get_button();  // Get joystick input
N
N        if (joystickInput == KBD_DOWN) {
X        if (joystickInput == 0x20) {
N				counter++;	
N				
N				if (counter > 2) {
N					counter = 0;
N				}
N				
N				delay(500000);
N					
N				}
N				
N				if (joystickInput == KBD_UP) {
X				if (joystickInput == 0x08) {
N				counter--;
N				
N				if (counter < 0) {
N					counter = 2;
N				}
N				
N				delay(500000);
N					
N				}
N
N        if (joystickInput == KBD_RIGHT) {  // Select the highlighted option
X        if (joystickInput == 0x10) {  
N            switch (counter) {
N                case 0:
N                    slideshow();  // Call slideshow function
N                    break;
N                case 1:
N                    reactionTimeGame();  // Call flash black screen function
N                    break;
N                case 2:
N                    mp3Player();
N                    break;
N            }
N        }
N    }
N}
N
N
N
N/*----------------------------------------------------------------------------
N  Main Program
N *----------------------------------------------------------------------------*/
Nint main (void) {                       /* Main Program                       */
N  LED_Init ();
N  GLCD_Init();
N	KBD_Init();
N  GLCD_Clear  (White);
X  GLCD_Clear  (0xFFFF);
N
N	while (1) {
N		
N		home_menu();
N		
N	}
N
W "Blinky.c" 454 2 last line of file ends without a newline
N}
